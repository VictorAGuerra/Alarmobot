
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008974  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008b04  08008b04  00009b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c28  08008c28  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c30  08008c30  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c34  08008c34  00009c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008c38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb8  2000006c  08008ca4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c24  08008ca4  0000ac24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd11  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426f  00000000  00000000  00029dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  0002e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f3  00000000  00000000  0002fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005547  00000000  00000000  00031253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f7aa  00000000  00000000  0003679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001120ef  00000000  00000000  00055f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed4  00000000  00000000  00168078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008aec 	.word	0x08008aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008aec 	.word	0x08008aec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd8e 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f828 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f91e 	bl	800070c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d0:	f000 f876 	bl	80005c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ea 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, rx_data, 1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004d8:	f005 f922 	bl	8005720 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004dc:	4a09      	ldr	r2, [pc, #36]	@ (8000504 <main+0x44>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <main+0x48>)
 80004e2:	f005 f967 	bl	80057b4 <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a08      	ldr	r2, [pc, #32]	@ (800050c <main+0x4c>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80004ec:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <main+0x50>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4808      	ldr	r0, [pc, #32]	@ (8000514 <main+0x54>)
 80004f2:	f005 f95f 	bl	80057b4 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a07      	ldr	r2, [pc, #28]	@ (8000518 <main+0x58>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004fc:	f005 f934 	bl	8005768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0x40>
 8000504:	08008b98 	.word	0x08008b98
 8000508:	08000a35 	.word	0x08000a35
 800050c:	20000174 	.word	0x20000174
 8000510:	08008bbc 	.word	0x08008bbc
 8000514:	08000aad 	.word	0x08000aad
 8000518:	20000178 	.word	0x20000178

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	@ 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	@ 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 f81c 	bl	8008568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000542:	f002 f8bb 	bl	80026bc <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 fae0 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f8f2 	bl	8002768 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 fac1 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fcba 	bl	8002f20 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 faad 	bl	8000b10 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	@ 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 80005e4:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <MX_ADC1_Init+0xe4>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000600:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000602:	2204      	movs	r2, #4
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000606:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000614:	2201      	movs	r2, #1
 8000616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000642:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 8000644:	f000 febe 	bl	80013c4 <HAL_ADC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800064e:	f000 fa5f 	bl	8000b10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4810      	ldr	r0, [pc, #64]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800065e:	f001 fc19 	bl	8001e94 <HAL_ADCEx_MultiModeConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000668:	f000 fa52 	bl	8000b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_ADC1_Init+0xe8>)
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000670:	2306      	movs	r3, #6
 8000672:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000678:	237f      	movs	r3, #127	@ 0x7f
 800067a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_ADC1_Init+0xe0>)
 800068a:	f000 ffeb 	bl	8001664 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000694:	f000 fa3c 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000088 	.word	0x20000088
 80006a4:	50040000 	.word	0x50040000
 80006a8:	04300002 	.word	0x04300002

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f003 fdee 	bl	80042d0 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 fa09 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ec 	.word	0x200000ec
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a2b      	ldr	r2, [pc, #172]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a25      	ldr	r2, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|RedLED_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f001 ff56 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_GPIO_Init+0xcc>)
 80007a8:	f001 fd86 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin RedLED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|RedLED_Pin;
 80007ac:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f001 fd76 	bl	80022b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	@ 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800

080007dc <CMD>:

/* USER CODE BEGIN 4 */
void CMD(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
   for(;;){
        char recebido;
        if (HAL_UART_Receive(&huart2, &recebido, 1, HAL_MAX_DELAY)==HAL_OK)
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	483d      	ldr	r0, [pc, #244]	@ (80008e0 <CMD+0x104>)
 80007ec:	f003 fe47 	bl	800447e <HAL_UART_Receive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f5      	bne.n	80007e2 <CMD+0x6>
            switch(recebido){
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b52      	subs	r3, #82	@ 0x52
 80007fa:	2b27      	cmp	r3, #39	@ 0x27
 80007fc:	d866      	bhi.n	80008cc <CMD+0xf0>
 80007fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <CMD+0x28>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	080008dd 	.word	0x080008dd
 8000808:	080008cd 	.word	0x080008cd
 800080c:	080008cd 	.word	0x080008cd
 8000810:	080008cd 	.word	0x080008cd
 8000814:	080008a5 	.word	0x080008a5
 8000818:	080008cd 	.word	0x080008cd
 800081c:	080008cd 	.word	0x080008cd
 8000820:	080008b9 	.word	0x080008b9
 8000824:	080008cd 	.word	0x080008cd
 8000828:	080008cd 	.word	0x080008cd
 800082c:	080008cd 	.word	0x080008cd
 8000830:	080008cd 	.word	0x080008cd
 8000834:	080008cd 	.word	0x080008cd
 8000838:	080008cd 	.word	0x080008cd
 800083c:	080008cd 	.word	0x080008cd
 8000840:	080008cd 	.word	0x080008cd
 8000844:	080008cd 	.word	0x080008cd
 8000848:	080008cd 	.word	0x080008cd
 800084c:	080008cd 	.word	0x080008cd
 8000850:	080008cd 	.word	0x080008cd
 8000854:	080008cd 	.word	0x080008cd
 8000858:	080008cd 	.word	0x080008cd
 800085c:	080008cd 	.word	0x080008cd
 8000860:	080008cd 	.word	0x080008cd
 8000864:	080008cd 	.word	0x080008cd
 8000868:	080008cd 	.word	0x080008cd
 800086c:	080008cd 	.word	0x080008cd
 8000870:	080008cd 	.word	0x080008cd
 8000874:	080008cd 	.word	0x080008cd
 8000878:	080008cd 	.word	0x080008cd
 800087c:	080008cd 	.word	0x080008cd
 8000880:	080008cd 	.word	0x080008cd
 8000884:	080008dd 	.word	0x080008dd
 8000888:	080008cd 	.word	0x080008cd
 800088c:	080008cd 	.word	0x080008cd
 8000890:	080008cd 	.word	0x080008cd
 8000894:	080008a5 	.word	0x080008a5
 8000898:	080008cd 	.word	0x080008cd
 800089c:	080008cd 	.word	0x080008cd
 80008a0:	080008b9 	.word	0x080008b9
            case 'V':
            case 'v':
            	Alarm_Start();
 80008a4:	f000 f830 	bl	8000908 <Alarm_Start>
            	HAL_UART_Transmit(&huart2, "interpreter alarm start\n\r", sizeof("alarm start\n\r"), HAL_MAX_DELAY);
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	220e      	movs	r2, #14
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <CMD+0x108>)
 80008b0:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <CMD+0x104>)
 80008b2:	f003 fd5b 	bl	800436c <HAL_UART_Transmit>
                break;
 80008b6:	e012      	b.n	80008de <CMD+0x102>
            case 'Y':
            case 'y':
            	  Super_Alarm();
 80008b8:	f000 f85e 	bl	8000978 <Super_Alarm>
                  HAL_UART_Transmit(&huart2, "interpreter alarm stop\n\r", sizeof("led Yellow Toggle\n\r"), HAL_MAX_DELAY);
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	2214      	movs	r2, #20
 80008c2:	4909      	ldr	r1, [pc, #36]	@ (80008e8 <CMD+0x10c>)
 80008c4:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <CMD+0x104>)
 80008c6:	f003 fd51 	bl	800436c <HAL_UART_Transmit>
                break;
 80008ca:	e008      	b.n	80008de <CMD+0x102>
//                    HAL_UART_Transmit(&huart2, "B1 press\n\r", sizeof("B1 press\r"), HAL_MAX_DELAY);
//                else
//                    HAL_UART_Transmit(&huart2, "B1 not press\n\r", sizeof("B1 not press\n\r"), HAL_MAX_DELAY);
                break;
            default:
                HAL_UART_Transmit(&huart2, "invalid \n\r", sizeof("invalid \n\r"), HAL_MAX_DELAY);
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	220b      	movs	r2, #11
 80008d2:	4906      	ldr	r1, [pc, #24]	@ (80008ec <CMD+0x110>)
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <CMD+0x104>)
 80008d6:	f003 fd49 	bl	800436c <HAL_UART_Transmit>
 80008da:	e782      	b.n	80007e2 <CMD+0x6>
                break;
 80008dc:	bf00      	nop
   for(;;){
 80008de:	e780      	b.n	80007e2 <CMD+0x6>
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	08008b14 	.word	0x08008b14
 80008e8:	08008b30 	.word	0x08008b30
 80008ec:	08008b4c 	.word	0x08008b4c

080008f0 <Blue_Button_Pressed>:
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_Delay(duration);
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

int Blue_Button_Pressed(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80008f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <Blue_Button_Pressed+0x14>)
 80008fa:	f001 fe87 	bl	800260c <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	bd80      	pop	{r7, pc}
 8000904:	48000800 	.word	0x48000800

08000908 <Alarm_Start>:


void Alarm_Start(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	while (Blue_Button_Pressed()) {
 800090c:	e015      	b.n	800093a <Alarm_Start+0x32>
		printf("Alarme Tocando\r\n");
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <Alarm_Start+0x68>)
 8000910:	f007 fd4a 	bl	80083a8 <puts>
		HAL_GPIO_TogglePin(RedLED_GPIO_Port, RedLED_Pin);
 8000914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f001 fea6 	bl	800266c <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000926:	f001 fea1 	bl	800266c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800092a:	2120      	movs	r1, #32
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f001 fe9c 	bl	800266c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000934:	20c8      	movs	r0, #200	@ 0xc8
 8000936:	f000 fb95 	bl	8001064 <HAL_Delay>
	while (Blue_Button_Pressed()) {
 800093a:	f7ff ffd9 	bl	80008f0 <Blue_Button_Pressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e4      	bne.n	800090e <Alarm_Start+0x6>

	}
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f001 fe76 	bl	800263c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f001 fe70 	bl	800263c <HAL_GPIO_WritePin>
	printf("Alarme Interrompido\r\n");
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <Alarm_Start+0x6c>)
 800095e:	f007 fd23 	bl	80083a8 <puts>
	HAL_Delay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000966:	f000 fb7d 	bl	8001064 <HAL_Delay>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	08008b58 	.word	0x08008b58
 8000974:	08008b68 	.word	0x08008b68

08000978 <Super_Alarm>:

void Super_Alarm(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	while (Blue_Button_Pressed()) {
 800097c:	e012      	b.n	80009a4 <Super_Alarm+0x2c>
		printf("Alarme Tocando\r\n");
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <Super_Alarm+0x60>)
 8000980:	f007 fd12 	bl	80083a8 <puts>
		HAL_GPIO_TogglePin(RedLED_GPIO_Port, RedLED_Pin);
 8000984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f001 fe6e 	bl	800266c <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000996:	f001 fe69 	bl	800266c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800099a:	2120      	movs	r1, #32
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f001 fe64 	bl	800266c <HAL_GPIO_TogglePin>
	while (Blue_Button_Pressed()) {
 80009a4:	f7ff ffa4 	bl	80008f0 <Blue_Button_Pressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1e7      	bne.n	800097e <Super_Alarm+0x6>

	}
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f001 fe41 	bl	800263c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f001 fe3b 	bl	800263c <HAL_GPIO_WritePin>
	printf("Alarme Interrompido\r\n");
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <Super_Alarm+0x64>)
 80009c8:	f007 fcee 	bl	80083a8 <puts>
	HAL_Delay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d0:	f000 fb48 	bl	8001064 <HAL_Delay>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	08008b58 	.word	0x08008b58
 80009dc:	08008b68 	.word	0x08008b68

080009e0 <_write>:

int _write(int file, uint8_t *ptr, int len) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	switch (file) {
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d003      	beq.n	80009fa <_write+0x1a>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d009      	beq.n	8000a0c <_write+0x2c>
 80009f8:	e011      	b.n	8000a1e <_write+0x3e>
	case STDOUT_FILENO:
		HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <_write+0x50>)
 8000a06:	f003 fcb1 	bl	800436c <HAL_UART_Transmit>
		break;
 8000a0a:	e00b      	b.n	8000a24 <_write+0x44>

	case STDERR_FILENO:
		HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <_write+0x50>)
 8000a18:	f003 fca8 	bl	800436c <HAL_UART_Transmit>
		break;
 8000a1c:	e002      	b.n	8000a24 <_write+0x44>

	default:
		return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e000      	b.n	8000a26 <_write+0x46>
	}

	return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000ec 	.word	0x200000ec

08000a34 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t largada;
	int tempo = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
	  while (Blue_Button_Pressed());
 8000a40:	bf00      	nop
 8000a42:	f7ff ff55 	bl	80008f0 <Blue_Button_Pressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fa      	bne.n	8000a42 <StartTask1+0xe>

			  while (!Blue_Button_Pressed());
 8000a4c:	bf00      	nop
 8000a4e:	f7ff ff4f 	bl	80008f0 <Blue_Button_Pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0fa      	beq.n	8000a4e <StartTask1+0x1a>
			  HAL_Delay(20);
 8000a58:	2014      	movs	r0, #20
 8000a5a:	f000 fb03 	bl	8001064 <HAL_Delay>

			  largada = HAL_GetTick();
 8000a5e:	f000 faf5 	bl	800104c <HAL_GetTick>
 8000a62:	60b8      	str	r0, [r7, #8]
			  tempo += 5000;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	60fb      	str	r3, [r7, #12]

			  while (HAL_GetTick() < largada + tempo) {
 8000a6e:	e012      	b.n	8000a96 <StartTask1+0x62>

				  if (!Blue_Button_Pressed()){
 8000a70:	f7ff ff3e 	bl	80008f0 <Blue_Button_Pressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <StartTask1+0x62>

					  while(!Blue_Button_Pressed());
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ff38 	bl	80008f0 <Blue_Button_Pressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0fa      	beq.n	8000a7c <StartTask1+0x48>
					  HAL_Delay(20);
 8000a86:	2014      	movs	r0, #20
 8000a88:	f000 faec 	bl	8001064 <HAL_Delay>

					  tempo += 5000;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000a92:	3308      	adds	r3, #8
 8000a94:	60fb      	str	r3, [r7, #12]
			  while (HAL_GetTick() < largada + tempo) {
 8000a96:	f000 fad9 	bl	800104c <HAL_GetTick>
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d3e4      	bcc.n	8000a70 <StartTask1+0x3c>
				  }
			  }

			  Alarm_Start();
 8000aa6:	f7ff ff2f 	bl	8000908 <Alarm_Start>
	  while (Blue_Button_Pressed());
 8000aaa:	e7c9      	b.n	8000a40 <StartTask1+0xc>

08000aac <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	  for(;;)
	  {
		CMD();
 8000ab4:	f7ff fe92 	bl	80007dc <CMD>
		if (!Blue_Button_Pressed()) {
 8000ab8:	f7ff ff1a 	bl	80008f0 <Blue_Button_Pressed>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f8      	bne.n	8000ab4 <StartTask2+0x8>
			while(!Blue_Button_Pressed()) {
 8000ac2:	e006      	b.n	8000ad2 <StartTask2+0x26>
				HAL_GPIO_WritePin(RedLED_GPIO_Port, RedLED_Pin, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f001 fdb5 	bl	800263c <HAL_GPIO_WritePin>
			while(!Blue_Button_Pressed()) {
 8000ad2:	f7ff ff0d 	bl	80008f0 <Blue_Button_Pressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f3      	beq.n	8000ac4 <StartTask2+0x18>
			}
			HAL_GPIO_WritePin(LD2_GPIO_Port, RedLED_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f001 fda9 	bl	800263c <HAL_GPIO_WritePin>
		CMD();
 8000aea:	e7e3      	b.n	8000ab4 <StartTask2+0x8>

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 fa91 	bl	8001024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40001000 	.word	0x40001000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	f06f 0001 	mvn.w	r0, #1
 8000b5a:	f001 fb03 	bl	8002164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2288      	movs	r2, #136	@ 0x88
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fceb 	bl	8008568 <memset>
  if(hadc->Instance==ADC1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a27      	ldr	r2, [pc, #156]	@ (8000c34 <HAL_ADC_MspInit+0xc8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d146      	bne.n	8000c2a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ba0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ba2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fbfd 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000bd8:	f7ff ff9a 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	4a15      	ldr	r2, [pc, #84]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000be2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_ADC_MspInit+0xcc>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c12:	230b      	movs	r3, #11
 8000c14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_ADC_MspInit+0xd0>)
 8000c26:	f001 fb47 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	37b0      	adds	r7, #176	@ 0xb0
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	50040000 	.word	0x50040000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000800 	.word	0x48000800

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0ac      	sub	sp, #176	@ 0xb0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2288      	movs	r2, #136	@ 0x88
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 fc81 	bl	8008568 <memset>
  if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a25      	ldr	r2, [pc, #148]	@ (8000d00 <HAL_UART_MspInit+0xc0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d143      	bne.n	8000cf8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fba5 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f7ff ff42 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c90:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0xc4>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f001 fae8 	bl	80022b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2105      	movs	r1, #5
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f001 fa39 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf2:	2026      	movs	r0, #38	@ 0x26
 8000cf4:	f001 fa52 	bl	800219c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	37b0      	adds	r7, #176	@ 0xb0
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d16:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_InitTick+0xe0>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a33      	ldr	r2, [pc, #204]	@ (8000de8 <HAL_InitTick+0xe0>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <HAL_InitTick+0xe0>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2e:	f107 0210 	add.w	r2, r7, #16
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fab5 	bl	80032a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d48:	f002 fa82 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8000d4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d4e:	e004      	b.n	8000d5a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d50:	f002 fa7e 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8000d54:	4603      	mov	r3, r0
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5c:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	0c9b      	lsrs	r3, r3, #18
 8000d64:	3b01      	subs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d68:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d6a:	4a22      	ldr	r2, [pc, #136]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d76:	4a1e      	ldr	r2, [pc, #120]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d8e:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d90:	f002 ffd8 	bl	8003d44 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11b      	bne.n	8000dda <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da2:	4813      	ldr	r0, [pc, #76]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000da4:	f003 f830 	bl	8003e08 <HAL_TIM_Base_Start_IT>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d111      	bne.n	8000dda <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db6:	2036      	movs	r0, #54	@ 0x36
 8000db8:	f001 f9f0 	bl	800219c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	d808      	bhi.n	8000dd4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2036      	movs	r0, #54	@ 0x36
 8000dc8:	f001 f9cc 	bl	8002164 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_InitTick+0xf0>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e002      	b.n	8000dda <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3738      	adds	r7, #56	@ 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	2000017c 	.word	0x2000017c
 8000df4:	40001000 	.word	0x40001000
 8000df8:	20000004 	.word	0x20000004

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <USART2_IRQHandler+0x10>)
 8000e3a:	f003 fbe9 	bl	8004610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000ec 	.word	0x200000ec

08000e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM6_DAC_IRQHandler+0x10>)
 8000e4e:	f003 f84b 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000017c 	.word	0x2000017c

08000e5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f007 fb68 	bl	8008604 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20018000 	.word	0x20018000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200001c8 	.word	0x200001c8
 8000f68:	20001c28 	.word	0x20001c28

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f007 fb27 	bl	8008610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fa7d 	bl	80004c0 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fd4:	08008c38 	.word	0x08008c38
  ldr r2, =_sbss
 8000fd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fdc:	20001c24 	.word	0x20001c24

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_Init+0x3c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <HAL_Init+0x3c>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f001 f8a7 	bl	800214e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001000:	200f      	movs	r0, #15
 8001002:	f7ff fe81 	bl	8000d08 <HAL_InitTick>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	e001      	b.n	8001016 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001012:	f7ff fd83 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001016:	79fb      	ldrb	r3, [r7, #7]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	200001cc 	.word	0x200001cc

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200001cc 	.word	0x200001cc

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	@ 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <LL_ADC_SetOffset+0x44>)
 8001136:	4013      	ands	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	4313      	orrs	r3, r2
 8001144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03fff000 	.word	0x03fff000

0800115c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3360      	adds	r3, #96	@ 0x60
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	@ 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011be:	b480      	push	{r7}
 80011c0:	b087      	sub	sp, #28
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3330      	adds	r3, #48	@ 0x30
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	211f      	movs	r1, #31
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0e9b      	lsrs	r3, r3, #26
 80011f6:	f003 011f 	and.w	r1, r3, #31
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	431a      	orrs	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001216:	b480      	push	{r7}
 8001218:	b087      	sub	sp, #28
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3314      	adds	r3, #20
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	0e5b      	lsrs	r3, r3, #25
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0d1b      	lsrs	r3, r3, #20
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2107      	movs	r1, #7
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	0d1b      	lsrs	r3, r3, #20
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0318 	and.w	r3, r3, #24
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001290:	40d9      	lsrs	r1, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	400b      	ands	r3, r1
 8001296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	0007ffff 	.word	0x0007ffff

080012b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6093      	str	r3, [r2, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <LL_ADC_IsEnabled+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_IsEnabled+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d101      	bne.n	800138e <LL_ADC_REG_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e130      	b.n	8001640 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fbbd 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff67 	bl	80012d8 <LL_ADC_IsDeepPowerDownEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff4d 	bl	80012b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff82 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff66 	bl	8001300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <HAL_ADC_Init+0x284>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	4a84      	ldr	r2, [pc, #528]	@ (800164c <HAL_ADC_Init+0x288>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	3301      	adds	r3, #1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001448:	e002      	b.n	8001450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3b01      	subs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff64 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff75 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 800148c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80c9 	bne.w	800162e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80c5 	bne.w	800162e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014ac:	f043 0202 	orr.w	r2, r3, #2
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff49 	bl	8001350 <LL_ADC_IsEnabled>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d115      	bne.n	80014f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c4:	4862      	ldr	r0, [pc, #392]	@ (8001650 <HAL_ADC_Init+0x28c>)
 80014c6:	f7ff ff43 	bl	8001350 <LL_ADC_IsEnabled>
 80014ca:	4604      	mov	r4, r0
 80014cc:	4861      	ldr	r0, [pc, #388]	@ (8001654 <HAL_ADC_Init+0x290>)
 80014ce:	f7ff ff3f 	bl	8001350 <LL_ADC_IsEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	431c      	orrs	r4, r3
 80014d6:	4860      	ldr	r0, [pc, #384]	@ (8001658 <HAL_ADC_Init+0x294>)
 80014d8:	f7ff ff3a 	bl	8001350 <LL_ADC_IsEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	4323      	orrs	r3, r4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4619      	mov	r1, r3
 80014ea:	485c      	ldr	r0, [pc, #368]	@ (800165c <HAL_ADC_Init+0x298>)
 80014ec:	f7ff fdde 	bl	80010ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e5b      	ldrb	r3, [r3, #25]
 80014f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001500:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001506:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d106      	bne.n	800152c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001522:	3b01      	subs	r3, #1
 8001524:	045b      	lsls	r3, r3, #17
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <HAL_ADC_Init+0x29c>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	430b      	orrs	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff1b 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 8001566:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d13d      	bne.n	80015ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d13a      	bne.n	80015ea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001578:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001580:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001590:	f023 0302 	bic.w	r3, r3, #2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	430b      	orrs	r3, r1
 800159c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d118      	bne.n	80015da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	e007      	b.n	80015ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10c      	bne.n	800160c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f023 010f 	bic.w	r1, r3, #15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
 800160a:	e007      	b.n	800161c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020f 	bic.w	r2, r2, #15
 800161a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	@ 0x54
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800163e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3724      	adds	r7, #36	@ 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	053e2d63 	.word	0x053e2d63
 8001650:	50040000 	.word	0x50040000
 8001654:	50040100 	.word	0x50040100
 8001658:	50040200 	.word	0x50040200
 800165c:	50040300 	.word	0x50040300
 8001660:	fff0c007 	.word	0xfff0c007

08001664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b6      	sub	sp, #216	@ 0xd8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x22>
 8001682:	2302      	movs	r3, #2
 8001684:	e3c9      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x7b6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe6f 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 83aa 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	3b02      	subs	r3, #2
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d81b      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x8e>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <HAL_ADC_ConfigChannel+0x5c>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016e9 	.word	0x080016e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80016d0:	230c      	movs	r3, #12
 80016d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016d6:	e010      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80016d8:	2312      	movs	r3, #18
 80016da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016de:	e00c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80016e0:	2318      	movs	r3, #24
 80016e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016e6:	e008      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80016e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016f0:	e003      	b.n	80016fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80016f2:	2306      	movs	r3, #6
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001708:	f7ff fd59 	bl	80011be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe30 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001716:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fe3c 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 8001724:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 81a4 	bne.w	8001a7a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 819f 	bne.w	8001a7a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	461a      	mov	r2, r3
 800174a:	f7ff fd64 	bl	8001216 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00a      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6919      	ldr	r1, [r3, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001780:	f7ff fcc8 	bl	8001114 <LL_ADC_SetOffset>
 8001784:	e179      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fce5 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x14e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fcda 	bl	800115c <LL_ADC_GetOffsetChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	e01e      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x18c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fccf 	bl	800115c <LL_ADC_GetOffsetChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e004      	b.n	80017ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80017e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1a4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	e018      	b.n	800183a <HAL_ADC_ConfigChannel+0x1d6>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800181c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e004      	b.n	800183a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc9e 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc82 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x214>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc77 	bl	800115c <LL_ADC_GetOffsetChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	e01e      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x252>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc6c 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001896:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800189a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800189e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80018a6:	2320      	movs	r3, #32
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80018aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x26a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	e018      	b.n	8001900 <HAL_ADC_ConfigChannel+0x29c>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80018e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80018ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80018f2:	2320      	movs	r3, #32
 80018f4:	e004      	b.n	8001900 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80018f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc3b 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2102      	movs	r1, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc1f 	bl	800115c <LL_ADC_GetOffsetChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_ADC_ConfigChannel+0x2da>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc14 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	e01e      	b.n	800197c <HAL_ADC_ConfigChannel+0x318>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2102      	movs	r1, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc09 	bl	800115c <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800195c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e004      	b.n	800197a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x330>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	e014      	b.n	80019be <HAL_ADC_ConfigChannel+0x35a>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80019a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80019a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e004      	b.n	80019be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80019b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019be:	429a      	cmp	r2, r3
 80019c0:	d106      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbdc 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2103      	movs	r1, #3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbc0 	bl	800115c <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x398>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2103      	movs	r1, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fbb5 	bl	800115c <LL_ADC_GetOffsetChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	f003 021f 	and.w	r2, r3, #31
 80019fa:	e017      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x3c8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2103      	movs	r1, #3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fbaa 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e003      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x3e0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	e011      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x404>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e003      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb87 	bl	8001188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc66 	bl	8001350 <LL_ADC_IsEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8140 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f7ff fbe7 	bl	800126c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4a8f      	ldr	r2, [pc, #572]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x67c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f040 8131 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x46e>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	bf94      	ite	ls
 8001aca:	2301      	movls	r3, #1
 8001acc:	2300      	movhi	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	e019      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x4a2>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d079      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x4c2>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	069b      	lsls	r3, r3, #26
 8001b20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b24:	e015      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x4ee>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e003      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	069b      	lsls	r3, r3, #26
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x50e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	e017      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x53e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	ea42 0103 	orr.w	r1, r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x564>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	051b      	lsls	r3, r3, #20
 8001bc6:	e018      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x596>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	e081      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x5b6>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	3301      	adds	r3, #1
 8001c12:	069b      	lsls	r3, r3, #26
 8001c14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c18:	e015      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x5e2>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	069b      	lsls	r3, r3, #26
 8001c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x602>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	e017      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x632>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	61bb      	str	r3, [r7, #24]
  return result;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	ea42 0103 	orr.w	r1, r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x65e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 021f 	and.w	r2, r3, #31
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	051b      	lsls	r3, r3, #20
 8001cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	e01e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x69c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	60fb      	str	r3, [r7, #12]
  return result;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e006      	b.n	8001cec <HAL_ADC_ConfigChannel+0x688>
 8001cde:	bf00      	nop
 8001ce0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 021f 	and.w	r2, r3, #31
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	051b      	lsls	r3, r3, #20
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fa85 	bl	8001216 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d07a      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	4843      	ldr	r0, [pc, #268]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d1a:	f7ff f9ed 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 8001d1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a41      	ldr	r2, [pc, #260]	@ (8001e2c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12c      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d126      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x6e8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3b      	ldr	r2, [pc, #236]	@ (8001e34 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d15d      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d54:	4619      	mov	r1, r3
 8001d56:	4834      	ldr	r0, [pc, #208]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d58:	f7ff f9bb 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	4a36      	ldr	r2, [pc, #216]	@ (8001e3c <HAL_ADC_ConfigChannel+0x7d8>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d84:	e040      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d118      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x74c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d12d      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	4619      	mov	r1, r3
 8001dba:	481b      	ldr	r0, [pc, #108]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dbc:	f7ff f989 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc0:	e024      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_ADC_ConfigChannel+0x7e0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d120      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_ADC_ConfigChannel+0x7cc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d115      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001de6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dea:	4619      	mov	r1, r3
 8001dec:	480e      	ldr	r0, [pc, #56]	@ (8001e28 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dee:	f7ff f970 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 8001df2:	e00c      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001e06:	e002      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	37d8      	adds	r7, #216	@ 0xd8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	80080000 	.word	0x80080000
 8001e28:	50040300 	.word	0x50040300
 8001e2c:	c7520000 	.word	0xc7520000
 8001e30:	50040000 	.word	0x50040000
 8001e34:	50040200 	.word	0x50040200
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	cb840000 	.word	0xcb840000
 8001e44:	80000001 	.word	0x80000001

08001e48 <LL_ADC_IsEnabled>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_IsEnabled+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_IsEnabled+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_IsConversionOngoing>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b09f      	sub	sp, #124	@ 0x7c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e093      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a47      	ldr	r2, [pc, #284]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ecc:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	e001      	b.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e072      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffb9 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001efc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffb3 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d154      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d151      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f16:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02c      	beq.n	8001f7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f32:	035b      	lsls	r3, r3, #13
 8001f34:	430b      	orrs	r3, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3c:	4829      	ldr	r0, [pc, #164]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f3e:	f7ff ff83 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f42:	4604      	mov	r4, r0
 8001f44:	4828      	ldr	r0, [pc, #160]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f46:	f7ff ff7f 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	431c      	orrs	r4, r3
 8001f4e:	4828      	ldr	r0, [pc, #160]	@ (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f50:	f7ff ff7a 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d137      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f64:	f023 030f 	bic.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6811      	ldr	r1, [r2, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	6892      	ldr	r2, [r2, #8]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f78:	e028      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f86:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f88:	f7ff ff5e 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f90:	f7ff ff5a 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	431c      	orrs	r4, r3
 8001f98:	4815      	ldr	r0, [pc, #84]	@ (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f9a:	f7ff ff55 	bl	8001e48 <LL_ADC_IsEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4323      	orrs	r3, r4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fae:	f023 030f 	bic.w	r3, r3, #15
 8001fb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001fb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb6:	e009      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001fca:	e000      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	377c      	adds	r7, #124	@ 0x7c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	50040000 	.word	0x50040000
 8001fe8:	50040100 	.word	0x50040100
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	50040200 	.word	0x50040200

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff4c 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002176:	f7ff ff61 	bl	800203c <__NVIC_GetPriorityGrouping>
 800217a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f7ff ffb1 	bl	80020e8 <NVIC_EncodePriority>
 8002186:	4602      	mov	r2, r0
 8002188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff80 	bl	8002094 <__NVIC_SetPriority>
}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff54 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d008      	beq.n	80021e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e022      	b.n	8002228 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 020e 	bic.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f003 021c 	and.w	r2, r3, #28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d005      	beq.n	8002258 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2204      	movs	r2, #4
 8002250:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e029      	b.n	80022ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 020e 	bic.w	r2, r2, #14
 8002266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	f003 021c 	and.w	r2, r3, #28
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
    }
  }
  return status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c6:	e17f      	b.n	80025c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8171 	beq.w	80025c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d005      	beq.n	80022f8 <HAL_GPIO_Init+0x40>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d130      	bne.n	800235a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232e:	2201      	movs	r2, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0201 	and.w	r2, r3, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b03      	cmp	r3, #3
 8002364:	d118      	bne.n	8002398 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	6939      	ldr	r1, [r7, #16]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80ac 	beq.w	80025c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b5f      	ldr	r3, [pc, #380]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246e:	4a5e      	ldr	r2, [pc, #376]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6613      	str	r3, [r2, #96]	@ 0x60
 8002476:	4b5c      	ldr	r3, [pc, #368]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002482:	4a5a      	ldr	r2, [pc, #360]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024ac:	d025      	beq.n	80024fa <HAL_GPIO_Init+0x242>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4f      	ldr	r2, [pc, #316]	@ (80025f0 <HAL_GPIO_Init+0x338>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01f      	beq.n	80024f6 <HAL_GPIO_Init+0x23e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	@ (80025f4 <HAL_GPIO_Init+0x33c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d019      	beq.n	80024f2 <HAL_GPIO_Init+0x23a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4d      	ldr	r2, [pc, #308]	@ (80025f8 <HAL_GPIO_Init+0x340>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x236>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	@ (80025fc <HAL_GPIO_Init+0x344>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x232>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002600 <HAL_GPIO_Init+0x348>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x22e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002604 <HAL_GPIO_Init+0x34c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x22a>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024e2:	2307      	movs	r3, #7
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x244>
 80024fa:	2300      	movs	r3, #0
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250c:	4937      	ldr	r1, [pc, #220]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_GPIO_Init+0x350>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800253e:	4a32      	ldr	r2, [pc, #200]	@ (8002608 <HAL_GPIO_Init+0x350>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_GPIO_Init+0x350>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002568:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_GPIO_Init+0x350>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800256e:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_GPIO_Init+0x350>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002592:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_GPIO_Init+0x350>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_GPIO_Init+0x350>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_GPIO_Init+0x350>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae78 	bne.w	80022c8 <HAL_GPIO_Init+0x10>
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010000 	.word	0x40010000
 80025f0:	48000400 	.word	0x48000400
 80025f4:	48000800 	.word	0x48000800
 80025f8:	48000c00 	.word	0x48000c00
 80025fc:	48001000 	.word	0x48001000
 8002600:	48001400 	.word	0x48001400
 8002604:	48001800 	.word	0x48001800
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002658:	e002      	b.n	8002660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	041a      	lsls	r2, r3, #16
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43d9      	mvns	r1, r3
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	400b      	ands	r3, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a4:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ca:	d130      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d8:	d038      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026da:	4b20      	ldr	r3, [pc, #128]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026e2:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2232      	movs	r2, #50	@ 0x32
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002700:	e002      	b.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b01      	subs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002714:	d102      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f2      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002728:	d110      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e00f      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273a:	d007      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002744:	4a05      	ldr	r2, [pc, #20]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40007000 	.word	0x40007000
 8002760:	20000000 	.word	0x20000000
 8002764:	431bde83 	.word	0x431bde83

08002768 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3ca      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4b97      	ldr	r3, [pc, #604]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4b94      	ldr	r3, [pc, #592]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e4 	beq.w	8002964 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4a>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	f040 808b 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8087 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b2:	4b89      	ldr	r3, [pc, #548]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e3a2      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	4b82      	ldr	r3, [pc, #520]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_RCC_OscConfig+0x7c>
 80027da:	4b7f      	ldr	r3, [pc, #508]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e2:	e005      	b.n	80027f0 <HAL_RCC_OscConfig+0x88>
 80027e4:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d223      	bcs.n	800283c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd87 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e383      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002808:	4b73      	ldr	r3, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a72      	ldr	r2, [pc, #456]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b70      	ldr	r3, [pc, #448]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	496d      	ldr	r1, [pc, #436]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	4b6c      	ldr	r3, [pc, #432]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	4968      	ldr	r1, [pc, #416]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e025      	b.n	8002888 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a65      	ldr	r2, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4960      	ldr	r1, [pc, #384]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	495b      	ldr	r1, [pc, #364]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd47 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e343      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002888:	f000 fc4a 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	4950      	ldr	r1, [pc, #320]	@ (80029dc <HAL_RCC_OscConfig+0x274>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a4e      	ldr	r2, [pc, #312]	@ (80029e0 <HAL_RCC_OscConfig+0x278>)
 80028a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028a8:	4b4e      	ldr	r3, [pc, #312]	@ (80029e4 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fa2b 	bl	8000d08 <HAL_InitTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d052      	beq.n	8002962 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	e327      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028c8:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a42      	ldr	r2, [pc, #264]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fbba 	bl	800104c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028dc:	f7fe fbb6 	bl	800104c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e310      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ee:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fa:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a36      	ldr	r2, [pc, #216]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4931      	ldr	r1, [pc, #196]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002918:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	492c      	ldr	r1, [pc, #176]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e01a      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800292e:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293a:	f7fe fb87 	bl	800104c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002942:	f7fe fb83 	bl	800104c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2dd      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002954:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x1da>
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002962:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d074      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x21a>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d10e      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d10b      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d064      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d160      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e2ba      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x24a>
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x298>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x280>
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a05      	ldr	r2, [pc, #20]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a02      	ldr	r2, [pc, #8]	@ (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x298>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08008be0 	.word	0x08008be0
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004
 80029e8:	4ba0      	ldr	r3, [pc, #640]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a9f      	ldr	r2, [pc, #636]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b9d      	ldr	r3, [pc, #628]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9c      	ldr	r2, [pc, #624]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fb20 	bl	800104c <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fb1c 	bl	800104c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e276      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	4b92      	ldr	r3, [pc, #584]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2a8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fb0c 	bl	800104c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fb08 	bl	800104c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e262      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4a:	4b88      	ldr	r3, [pc, #544]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d0>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d060      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x310>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	4b7c      	ldr	r3, [pc, #496]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x328>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e23f      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b76      	ldr	r3, [pc, #472]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4973      	ldr	r1, [pc, #460]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	e040      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aae:	4b6f      	ldr	r3, [pc, #444]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fac7 	bl	800104c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fac3 	bl	800104c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e21d      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b62      	ldr	r3, [pc, #392]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	495f      	ldr	r1, [pc, #380]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e018      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5c      	ldr	r2, [pc, #368]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe faa3 	bl	800104c <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fa9f 	bl	800104c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1f9      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1c:	4b53      	ldr	r3, [pc, #332]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03c      	beq.n	8002bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b42:	4a4a      	ldr	r2, [pc, #296]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fa7e 	bl	800104c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fa7a 	bl	800104c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1d4      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	4b41      	ldr	r3, [pc, #260]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3ec>
 8002b74:	e01b      	b.n	8002bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b3d      	ldr	r3, [pc, #244]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fa61 	bl	800104c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fa5d 	bl	800104c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1b7      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba0:	4b32      	ldr	r3, [pc, #200]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ef      	bne.n	8002b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80a6 	beq.w	8002d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd8:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d118      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fa24 	bl	800104c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7fe fa20 	bl	800104c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e17a      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d8>
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	4a0d      	ldr	r2, [pc, #52]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c3e:	e029      	b.n	8002c94 <HAL_RCC_OscConfig+0x52c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d115      	bne.n	8002c74 <HAL_RCC_OscConfig+0x50c>
 8002c48:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a03      	ldr	r2, [pc, #12]	@ (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x52c>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
 8002c74:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c84:	4b98      	ldr	r3, [pc, #608]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a97      	ldr	r2, [pc, #604]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f9d6 	bl	800104c <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f9d2 	bl	800104c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e12a      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x53c>
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe f9bf 	bl	800104c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe f9bb 	bl	800104c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e113      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ed      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	4a79      	ldr	r2, [pc, #484]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80fe 	beq.w	8002f0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	f040 80d0 	bne.w	8002ebc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d1c:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d130      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d127      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d5c:	2a07      	cmp	r2, #7
 8002d5e:	bf14      	ite	ne
 8002d60:	2201      	movne	r2, #1
 8002d62:	2200      	moveq	r2, #0
 8002d64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d113      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d06e      	beq.n	8002e70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d069      	beq.n	8002e6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da4:	4b50      	ldr	r3, [pc, #320]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ad      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc0:	f7fe f944 	bl	800104c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f940 	bl	800104c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e09a      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dda:	4b43      	ldr	r3, [pc, #268]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x784>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e00:	0212      	lsls	r2, r2, #8
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0552      	lsls	r2, r2, #21
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0652      	lsls	r2, r2, #25
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e20:	0912      	lsrs	r2, r2, #4
 8002e22:	0452      	lsls	r2, r2, #17
 8002e24:	430a      	orrs	r2, r1
 8002e26:	4930      	ldr	r1, [pc, #192]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e44:	f7fe f902 	bl	800104c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f8fe 	bl	800104c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e058      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6a:	e050      	b.n	8002f0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e04f      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d148      	bne.n	8002f0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a19      	ldr	r2, [pc, #100]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e88:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e94:	f7fe f8da 	bl	800104c <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f8d6 	bl	800104c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e030      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x734>
 8002eba:	e028      	b.n	8002f0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d023      	beq.n	8002f0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe f8bd 	bl	800104c <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	e00c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe f8b9 	bl	800104c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d905      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e013      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_OscConfig+0x7b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ec      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCC_OscConfig+0x7b0>)
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4905      	ldr	r1, [pc, #20]	@ (8002f18 <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x7b4>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	60cb      	str	r3, [r1, #12]
 8002f08:	e001      	b.n	8002f0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	feeefffc 	.word	0xfeeefffc

08002f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0e7      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	4b75      	ldr	r3, [pc, #468]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d910      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b72      	ldr	r3, [pc, #456]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4970      	ldr	r1, [pc, #448]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b6e      	ldr	r3, [pc, #440]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cf      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b66      	ldr	r3, [pc, #408]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b63      	ldr	r3, [pc, #396]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4960      	ldr	r1, [pc, #384]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04c      	beq.n	8003038 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	4b5a      	ldr	r3, [pc, #360]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d121      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0a6      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbe:	4b54      	ldr	r3, [pc, #336]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e09a      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e08e      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e086      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b46      	ldr	r3, [pc, #280]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4943      	ldr	r1, [pc, #268]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003008:	f7fe f820 	bl	800104c <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe f81c 	bl	800104c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e06e      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b3a      	ldr	r3, [pc, #232]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003050:	429a      	cmp	r2, r3
 8003052:	d208      	bcs.n	8003066 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	492b      	ldr	r1, [pc, #172]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003066:	4b29      	ldr	r3, [pc, #164]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d210      	bcs.n	8003096 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003074:	4b25      	ldr	r3, [pc, #148]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 0207 	bic.w	r2, r3, #7
 800307c:	4923      	ldr	r1, [pc, #140]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003084:	4b21      	ldr	r3, [pc, #132]	@ (800310c <HAL_RCC_ClockConfig+0x1ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e036      	b.n	8003104 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4918      	ldr	r1, [pc, #96]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4910      	ldr	r1, [pc, #64]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d4:	f000 f824 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	490b      	ldr	r1, [pc, #44]	@ (8003114 <HAL_RCC_ClockConfig+0x1f4>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	4a09      	ldr	r2, [pc, #36]	@ (8003118 <HAL_RCC_ClockConfig+0x1f8>)
 80030f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1fc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fe05 	bl	8000d08 <HAL_InitTick>
 80030fe:	4603      	mov	r3, r0
 8003100:	72fb      	strb	r3, [r7, #11]

  return status;
 8003102:	7afb      	ldrb	r3, [r7, #11]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40022000 	.word	0x40022000
 8003110:	40021000 	.word	0x40021000
 8003114:	08008be0 	.word	0x08008be0
 8003118:	20000000 	.word	0x20000000
 800311c:	20000004 	.word	0x20000004

08003120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	@ 0x24
 8003124:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003138:	4b3b      	ldr	r3, [pc, #236]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x34>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d121      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d11e      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003154:	4b34      	ldr	r3, [pc, #208]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003160:	4b31      	ldr	r3, [pc, #196]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e005      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003170:	4b2d      	ldr	r3, [pc, #180]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800317c:	4a2b      	ldr	r2, [pc, #172]	@ (800322c <HAL_RCC_GetSysClockFreq+0x10c>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003184:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d102      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003198:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x110>)
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e004      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a4:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x114>)
 80031a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d134      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d003      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0xac>
 80031c4:	e005      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x110>)
 80031c8:	617b      	str	r3, [r7, #20]
      break;
 80031ca:	e005      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ce:	617b      	str	r3, [r7, #20]
      break;
 80031d0:	e002      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	fb03 f202 	mul.w	r2, r3, r2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	0e5b      	lsrs	r3, r3, #25
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	3301      	adds	r3, #1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	08008bf8 	.word	0x08008bf8
 8003230:	00f42400 	.word	0x00f42400
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b03      	ldr	r3, [pc, #12]	@ (800324c <HAL_RCC_GetHCLKFreq+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003254:	f7ff fff0 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4904      	ldr	r1, [pc, #16]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	08008bf0 	.word	0x08008bf0

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003280:	f7ff ffda 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0adb      	lsrs	r3, r3, #11
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08008bf0 	.word	0x08008bf0

080032a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	220f      	movs	r2, #15
 80032b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <HAL_RCC_GetClockConfig+0x5c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <HAL_RCC_GetClockConfig+0x60>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0207 	and.w	r2, r3, #7
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	40022000 	.word	0x40022000

0800330c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003324:	f7ff f9bc 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 8003328:	6178      	str	r0, [r7, #20]
 800332a:	e014      	b.n	8003356 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b25      	ldr	r3, [pc, #148]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	@ 0x58
 8003338:	4b22      	ldr	r3, [pc, #136]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003344:	f7ff f9ac 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 8003348:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b1e      	ldr	r3, [pc, #120]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335c:	d10b      	bne.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b80      	cmp	r3, #128	@ 0x80
 8003362:	d919      	bls.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2ba0      	cmp	r3, #160	@ 0xa0
 8003368:	d902      	bls.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800336a:	2302      	movs	r3, #2
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e013      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003370:	2301      	movs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	e010      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b80      	cmp	r3, #128	@ 0x80
 800337a:	d902      	bls.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800337c:	2303      	movs	r3, #3
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	e00a      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	d102      	bne.n	800338e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003388:	2302      	movs	r3, #2
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e004      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b70      	cmp	r3, #112	@ 0x70
 8003392:	d101      	bne.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003394:	2301      	movs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 0207 	bic.w	r2, r3, #7
 80033a0:	4909      	ldr	r1, [pc, #36]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033a8:	4b07      	ldr	r3, [pc, #28]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40022000 	.word	0x40022000

080033cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d4:	2300      	movs	r3, #0
 80033d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d8:	2300      	movs	r3, #0
 80033da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d041      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033f0:	d02a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033f6:	d824      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003402:	d81e      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800340c:	d010      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800340e:	e018      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003410:	4b86      	ldr	r3, [pc, #536]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a85      	ldr	r2, [pc, #532]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341c:	e015      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fabb 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3320      	adds	r3, #32
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fba6 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	74fb      	strb	r3, [r7, #19]
      break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003450:	4b76      	ldr	r3, [pc, #472]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345e:	4973      	ldr	r1, [pc, #460]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d041      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003480:	d02a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003482:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003486:	d824      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800348c:	d008      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800348e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003492:	d81e      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349c:	d010      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800349e:	e018      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a0:	4b62      	ldr	r3, [pc, #392]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a61      	ldr	r2, [pc, #388]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ac:	e015      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa73 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034be:	e00c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3320      	adds	r3, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fb5e 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	74fb      	strb	r3, [r7, #19]
      break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e0:	4b52      	ldr	r3, [pc, #328]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ee:	494f      	ldr	r1, [pc, #316]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a0 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350e:	4b47      	ldr	r3, [pc, #284]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b41      	ldr	r3, [pc, #260]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	4a40      	ldr	r2, [pc, #256]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003530:	4b3e      	ldr	r3, [pc, #248]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fd fd7e 	bl	800104c <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd fd7a 	bl	800104c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	74fb      	strb	r3, [r7, #19]
        break;
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003568:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357a:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d019      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b21      	ldr	r3, [pc, #132]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a20      	ldr	r2, [pc, #128]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a19      	ldr	r2, [pc, #100]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fd39 	bl	800104c <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e00b      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fd fd35 	bl	800104c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
            break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ec      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361a:	4904      	ldr	r1, [pc, #16]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003638:	7c7b      	ldrb	r3, [r7, #17]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b9e      	ldr	r3, [pc, #632]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	4a9d      	ldr	r2, [pc, #628]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003656:	4b98      	ldr	r3, [pc, #608]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f023 0203 	bic.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	4994      	ldr	r1, [pc, #592]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003678:	4b8f      	ldr	r3, [pc, #572]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f023 020c 	bic.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003686:	498c      	ldr	r1, [pc, #560]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369a:	4b87      	ldr	r3, [pc, #540]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	4983      	ldr	r1, [pc, #524]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036bc:	4b7e      	ldr	r3, [pc, #504]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	497b      	ldr	r1, [pc, #492]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036de:	4b76      	ldr	r3, [pc, #472]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ec:	4972      	ldr	r1, [pc, #456]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b6d      	ldr	r3, [pc, #436]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	496a      	ldr	r1, [pc, #424]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003722:	4b65      	ldr	r3, [pc, #404]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	4961      	ldr	r1, [pc, #388]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003744:	4b5c      	ldr	r3, [pc, #368]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	4959      	ldr	r1, [pc, #356]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b54      	ldr	r3, [pc, #336]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	4950      	ldr	r1, [pc, #320]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003788:	4b4b      	ldr	r3, [pc, #300]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	4948      	ldr	r1, [pc, #288]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037aa:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	493f      	ldr	r1, [pc, #252]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037da:	4937      	ldr	r1, [pc, #220]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ea:	d106      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b32      	ldr	r3, [pc, #200]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a31      	ldr	r2, [pc, #196]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
 80037f8:	e011      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003802:	d10c      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f8c8 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d028      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800382a:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003830:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003838:	491f      	ldr	r1, [pc, #124]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003848:	d106      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384a:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4a1a      	ldr	r2, [pc, #104]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003854:	60d3      	str	r3, [r2, #12]
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f899 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003896:	4908      	ldr	r1, [pc, #32]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a02      	ldr	r2, [pc, #8]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e014      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f867 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038fa:	4928      	ldr	r1, [pc, #160]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390a:	d10d      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f844 	bl	80039a0 <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3320      	adds	r3, #32
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f925 	bl	8003b88 <RCCEx_PLLSAI2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003958:	4b10      	ldr	r3, [pc, #64]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003966:	490d      	ldr	r1, [pc, #52]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398a:	4904      	ldr	r1, [pc, #16]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003992:	7cbb      	ldrb	r3, [r7, #18]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000

080039a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ae:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ba:	4b72      	ldr	r3, [pc, #456]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d10d      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
       ||
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
       ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d047      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e044      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d018      	beq.n	8003a26 <RCCEx_PLLSAI1_Config+0x86>
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d825      	bhi.n	8003a44 <RCCEx_PLLSAI1_Config+0xa4>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0x62>
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d009      	beq.n	8003a14 <RCCEx_PLLSAI1_Config+0x74>
 8003a00:	e020      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11d      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a12:	e01a      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a14:	4b5b      	ldr	r3, [pc, #364]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a24:	e013      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a26:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a32:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a42:	e006      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e004      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	4944      	ldr	r1, [pc, #272]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d17d      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a7c:	4b41      	ldr	r3, [pc, #260]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a40      	ldr	r2, [pc, #256]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd fae0 	bl	800104c <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a90:	f7fd fadc 	bl	800104c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa4:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ef      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d160      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abc:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6892      	ldr	r2, [r2, #8]
 8003acc:	0211      	lsls	r1, r2, #8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	0912      	lsrs	r2, r2, #4
 8003ad4:	0452      	lsls	r2, r2, #17
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	492a      	ldr	r1, [pc, #168]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
 8003ade:	e027      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d112      	bne.n	8003b0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae6:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003aee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	0211      	lsls	r1, r2, #8
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6912      	ldr	r2, [r2, #16]
 8003afc:	0852      	lsrs	r2, r2, #1
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0552      	lsls	r2, r2, #21
 8003b02:	430a      	orrs	r2, r1
 8003b04:	491f      	ldr	r1, [pc, #124]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
 8003b0a:	e011      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	0211      	lsls	r1, r2, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6952      	ldr	r2, [r2, #20]
 8003b22:	0852      	lsrs	r2, r2, #1
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0652      	lsls	r2, r2, #25
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4916      	ldr	r1, [pc, #88]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fa86 	bl	800104c <HAL_GetTick>
 8003b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b42:	e009      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b44:	f7fd fa82 	bl	800104c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	73fb      	strb	r3, [r7, #15]
          break;
 8003b56:	e005      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b96:	4b6a      	ldr	r3, [pc, #424]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ba2:	4b67      	ldr	r3, [pc, #412]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d10d      	bne.n	8003bce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bba:	4b61      	ldr	r3, [pc, #388]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d047      	beq.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e044      	b.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d018      	beq.n	8003c0e <RCCEx_PLLSAI2_Config+0x86>
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d825      	bhi.n	8003c2c <RCCEx_PLLSAI2_Config+0xa4>
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d002      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x62>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d009      	beq.n	8003bfc <RCCEx_PLLSAI2_Config+0x74>
 8003be8:	e020      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bea:	4b55      	ldr	r3, [pc, #340]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11d      	bne.n	8003c32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfa:	e01a      	b.n	8003c32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bfc:	4b50      	ldr	r3, [pc, #320]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e013      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c1a:	4b49      	ldr	r3, [pc, #292]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c2a:	e006      	b.n	8003c3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e004      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c42:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	430b      	orrs	r3, r1
 8003c58:	4939      	ldr	r1, [pc, #228]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d167      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c64:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd f9ec 	bl	800104c <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c76:	e009      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c78:	f7fd f9e8 	bl	800104c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8a:	e005      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ef      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d14a      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d111      	bne.n	8003cc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca4:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	0912      	lsrs	r2, r2, #4
 8003cbc:	0452      	lsls	r2, r2, #17
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	491f      	ldr	r1, [pc, #124]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	614b      	str	r3, [r1, #20]
 8003cc6:	e011      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
 8003cd8:	0211      	lsls	r1, r2, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6912      	ldr	r2, [r2, #16]
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0652      	lsls	r2, r2, #25
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	4916      	ldr	r1, [pc, #88]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cec:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f9a8 	bl	800104c <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cfe:	e009      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d00:	f7fd f9a4 	bl	800104c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	73fb      	strb	r3, [r7, #15]
          break;
 8003d12:	e005      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d14:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ef      	beq.n	8003d00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4904      	ldr	r1, [pc, #16]	@ (8003d40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e049      	b.n	8003dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f841 	bl	8003df2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 f9e0 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d001      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a23      	ldr	r2, [pc, #140]	@ (8003ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01d      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4a:	d018      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_TIM_Base_Start_IT+0x76>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d115      	bne.n	8003eaa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d015      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0xb4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e96:	d011      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	e008      	b.n	8003ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40013400 	.word	0x40013400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	00010007 	.word	0x00010007

08003ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8e9 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8db 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8ec 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0204 	mvn.w	r2, #4
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8c3 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8b5 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8c6 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0208 	mvn.w	r2, #8
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f89d 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f88f 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8a0 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f877 	bl	800410a <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f869 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f87a 	bl	800411e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0201 	mvn.w	r2, #1
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fd4c 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f913 	bl	80042a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f90b 	bl	80042bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00c      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f834 	bl	8004132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0220 	mvn.w	r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8d3 	bl	8004294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a46      	ldr	r2, [pc, #280]	@ (8004274 <TIM_Base_SetConfig+0x12c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a43      	ldr	r2, [pc, #268]	@ (8004278 <TIM_Base_SetConfig+0x130>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a42      	ldr	r2, [pc, #264]	@ (800427c <TIM_Base_SetConfig+0x134>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a41      	ldr	r2, [pc, #260]	@ (8004280 <TIM_Base_SetConfig+0x138>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a40      	ldr	r2, [pc, #256]	@ (8004284 <TIM_Base_SetConfig+0x13c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <TIM_Base_SetConfig+0x12c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a32      	ldr	r2, [pc, #200]	@ (8004278 <TIM_Base_SetConfig+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a31      	ldr	r2, [pc, #196]	@ (800427c <TIM_Base_SetConfig+0x134>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <TIM_Base_SetConfig+0x138>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004284 <TIM_Base_SetConfig+0x13c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004288 <TIM_Base_SetConfig+0x140>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2d      	ldr	r2, [pc, #180]	@ (800428c <TIM_Base_SetConfig+0x144>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004290 <TIM_Base_SetConfig+0x148>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <TIM_Base_SetConfig+0x12c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0xf8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <TIM_Base_SetConfig+0x13c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0xf8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <TIM_Base_SetConfig+0x140>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0xf8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <TIM_Base_SetConfig+0x144>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0xf8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <TIM_Base_SetConfig+0x148>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d103      	bne.n	8004248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]
  }
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e040      	b.n	8004364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc fca4 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ff58 	bl	80051cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fc9d 	bl	8004c5c <UART_SetConfig>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e01b      	b.n	8004364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800433a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800434a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 ffd7 	bl	8005310 <UART_CheckIdleState>
 8004362:	4603      	mov	r3, r0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	@ 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	2b20      	cmp	r3, #32
 8004382:	d177      	bne.n	8004474 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Transmit+0x24>
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e070      	b.n	8004476 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2221      	movs	r2, #33	@ 0x21
 80043a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a2:	f7fc fe53 	bl	800104c <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c0:	d108      	bne.n	80043d4 <HAL_UART_Transmit+0x68>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e003      	b.n	80043dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043dc:	e02f      	b.n	800443e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	@ 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f001 f839 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e03b      	b.n	8004476 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004410:	b292      	uxth	r2, r2
 8004412:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	3302      	adds	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e007      	b.n	800442c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1c9      	bne.n	80043de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2200      	movs	r2, #0
 8004452:	2140      	movs	r1, #64	@ 0x40
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f001 f803 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e005      	b.n	8004476 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08a      	sub	sp, #40	@ 0x28
 8004482:	af02      	add	r7, sp, #8
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004494:	2b20      	cmp	r3, #32
 8004496:	f040 80b6 	bne.w	8004606 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_Receive+0x28>
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0ae      	b.n	8004608 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2222      	movs	r2, #34	@ 0x22
 80044b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c0:	f7fc fdc4 	bl	800104c <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	88fa      	ldrh	r2, [r7, #6]
 80044d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044de:	d10e      	bne.n	80044fe <HAL_UART_Receive+0x80>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_UART_Receive+0x76>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044f2:	e02d      	b.n	8004550 <HAL_UART_Receive+0xd2>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	22ff      	movs	r2, #255	@ 0xff
 80044f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044fc:	e028      	b.n	8004550 <HAL_UART_Receive+0xd2>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_UART_Receive+0xa4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <HAL_UART_Receive+0x9a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	22ff      	movs	r2, #255	@ 0xff
 8004512:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004516:	e01b      	b.n	8004550 <HAL_UART_Receive+0xd2>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	227f      	movs	r2, #127	@ 0x7f
 800451c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004520:	e016      	b.n	8004550 <HAL_UART_Receive+0xd2>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800452a:	d10d      	bne.n	8004548 <HAL_UART_Receive+0xca>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_UART_Receive+0xc0>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	227f      	movs	r2, #127	@ 0x7f
 8004538:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800453c:	e008      	b.n	8004550 <HAL_UART_Receive+0xd2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	223f      	movs	r2, #63	@ 0x3f
 8004542:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004546:	e003      	b.n	8004550 <HAL_UART_Receive+0xd2>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004556:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004560:	d108      	bne.n	8004574 <HAL_UART_Receive+0xf6>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e003      	b.n	800457c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800457c:	e037      	b.n	80045ee <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2120      	movs	r1, #32
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 ff69 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e033      	b.n	8004608 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10c      	bne.n	80045c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	8a7b      	ldrh	r3, [r7, #18]
 80045b0:	4013      	ands	r3, r2
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	3302      	adds	r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e00d      	b.n	80045dc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	8a7b      	ldrh	r3, [r7, #18]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	4013      	ands	r3, r2
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1c1      	bne.n	800457e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b0ba      	sub	sp, #232	@ 0xe8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800463a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800463e:	4013      	ands	r3, r2
 8004640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d115      	bne.n	8004678 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00f      	beq.n	8004678 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 82ca 	beq.w	8004c02 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
      }
      return;
 8004676:	e2c4      	b.n	8004c02 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8117 	beq.w	80048b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800468e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004692:	4b85      	ldr	r3, [pc, #532]	@ (80048a8 <HAL_UART_IRQHandler+0x298>)
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 810a 	beq.w	80048b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d011      	beq.n	80046cc <HAL_UART_IRQHandler+0xbc>
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <HAL_UART_IRQHandler+0xec>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2202      	movs	r2, #2
 80046ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d011      	beq.n	800472c <HAL_UART_IRQHandler+0x11c>
 8004708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2204      	movs	r2, #4
 800471a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004722:	f043 0202 	orr.w	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d017      	beq.n	8004768 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004748:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004770:	2b00      	cmp	r3, #0
 8004772:	d012      	beq.n	800479a <HAL_UART_IRQHandler+0x18a>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8230 	beq.w	8004c06 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04f      	beq.n	8004892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fea1 	bl	800553a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004802:	2b40      	cmp	r3, #64	@ 0x40
 8004804:	d141      	bne.n	800488a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800481c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800483e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800484a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1d9      	bne.n	8004806 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	4a13      	ldr	r2, [pc, #76]	@ (80048ac <HAL_UART_IRQHandler+0x29c>)
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fce4 	bl	8002234 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d017      	beq.n	80048a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00f      	b.n	80048a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9d4 	bl	8004c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e00b      	b.n	80048a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9d0 	bl	8004c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e007      	b.n	80048a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9cc 	bl	8004c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048a0:	e1b1      	b.n	8004c06 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a2:	bf00      	nop
    return;
 80048a4:	e1af      	b.n	8004c06 <HAL_UART_IRQHandler+0x5f6>
 80048a6:	bf00      	nop
 80048a8:	04000120 	.word	0x04000120
 80048ac:	08005603 	.word	0x08005603

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 816a 	bne.w	8004b8e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8163 	beq.w	8004b8e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 815c 	beq.w	8004b8e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2210      	movs	r2, #16
 80048dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e8:	2b40      	cmp	r3, #64	@ 0x40
 80048ea:	f040 80d4 	bne.w	8004a96 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80ad 	beq.w	8004a5e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800490a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800490e:	429a      	cmp	r2, r3
 8004910:	f080 80a5 	bcs.w	8004a5e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800491a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 8086 	bne.w	8004a3c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800494c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800495a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800495e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1da      	bne.n	8004930 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800498a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800499e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e1      	bne.n	800497a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e3      	bne.n	80049b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a0c:	f023 0310 	bic.w	r3, r3, #16
 8004a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e4      	bne.n	80049fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd fbbe 	bl	80021b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8f4 	bl	8004c44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a5c:	e0d5      	b.n	8004c0a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	f040 80ce 	bne.w	8004c0a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	f040 80c5 	bne.w	8004c0a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8d8 	bl	8004c44 <HAL_UARTEx_RxEventCallback>
      return;
 8004a94:	e0b9      	b.n	8004c0a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80ab 	beq.w	8004c0e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a6 	beq.w	8004c0e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e4      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	623b      	str	r3, [r7, #32]
   return(result);
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e3      	bne.n	8004af8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f023 0310 	bic.w	r3, r3, #16
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	617b      	str	r3, [r7, #20]
   return(result);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e4      	bne.n	8004b44 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f85c 	bl	8004c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b8c:	e03f      	b.n	8004c0e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x5a8>
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fd66 	bl	8005682 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bb6:	e02d      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
    }
    return;
 8004be0:	e017      	b.n	8004c12 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <HAL_UART_IRQHandler+0x604>
 8004bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fd17 	bl	800562e <UART_EndTransmit_IT>
    return;
 8004c00:	e008      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
      return;
 8004c02:	bf00      	nop
 8004c04:	e006      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
    return;
 8004c06:	bf00      	nop
 8004c08:	e004      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
      return;
 8004c0a:	bf00      	nop
 8004c0c:	e002      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
      return;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <HAL_UART_IRQHandler+0x604>
    return;
 8004c12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c14:	37e8      	adds	r7, #232	@ 0xe8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c60:	b08a      	sub	sp, #40	@ 0x28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4ba4      	ldr	r3, [pc, #656]	@ (8004f1c <UART_SetConfig+0x2c0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a99      	ldr	r2, [pc, #612]	@ (8004f20 <UART_SetConfig+0x2c4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a90      	ldr	r2, [pc, #576]	@ (8004f24 <UART_SetConfig+0x2c8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d126      	bne.n	8004d34 <UART_SetConfig+0xd8>
 8004ce6:	4b90      	ldr	r3, [pc, #576]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0xd0>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <UART_SetConfig+0xa0>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d12:	e116      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1a:	e112      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d22:	e10e      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	e10a      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e106      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7c      	ldr	r2, [pc, #496]	@ (8004f2c <UART_SetConfig+0x2d0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d138      	bne.n	8004db0 <UART_SetConfig+0x154>
 8004d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d82d      	bhi.n	8004da8 <UART_SetConfig+0x14c>
 8004d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <UART_SetConfig+0xf8>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004da9 	.word	0x08004da9
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004da9 	.word	0x08004da9
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8e:	e0d8      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d96:	e0d4      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9e:	e0d0      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e0cc      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e0c8      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f30 <UART_SetConfig+0x2d4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d125      	bne.n	8004e06 <UART_SetConfig+0x1aa>
 8004dba:	4b5b      	ldr	r3, [pc, #364]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dc4:	2b30      	cmp	r3, #48	@ 0x30
 8004dc6:	d016      	beq.n	8004df6 <UART_SetConfig+0x19a>
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d818      	bhi.n	8004dfe <UART_SetConfig+0x1a2>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d00a      	beq.n	8004de6 <UART_SetConfig+0x18a>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d814      	bhi.n	8004dfe <UART_SetConfig+0x1a2>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <UART_SetConfig+0x182>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d008      	beq.n	8004dee <UART_SetConfig+0x192>
 8004ddc:	e00f      	b.n	8004dfe <UART_SetConfig+0x1a2>
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de4:	e0ad      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004de6:	2302      	movs	r3, #2
 8004de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dec:	e0a9      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004dee:	2304      	movs	r3, #4
 8004df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df4:	e0a5      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004df6:	2308      	movs	r3, #8
 8004df8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfc:	e0a1      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004dfe:	2310      	movs	r3, #16
 8004e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e04:	e09d      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f34 <UART_SetConfig+0x2d8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d125      	bne.n	8004e5c <UART_SetConfig+0x200>
 8004e10:	4b45      	ldr	r3, [pc, #276]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e1c:	d016      	beq.n	8004e4c <UART_SetConfig+0x1f0>
 8004e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e20:	d818      	bhi.n	8004e54 <UART_SetConfig+0x1f8>
 8004e22:	2b80      	cmp	r3, #128	@ 0x80
 8004e24:	d00a      	beq.n	8004e3c <UART_SetConfig+0x1e0>
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d814      	bhi.n	8004e54 <UART_SetConfig+0x1f8>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x1d8>
 8004e2e:	2b40      	cmp	r3, #64	@ 0x40
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x1e8>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x1f8>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3a:	e082      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e42:	e07e      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4a:	e07a      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e52:	e076      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e072      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a35      	ldr	r2, [pc, #212]	@ (8004f38 <UART_SetConfig+0x2dc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d12a      	bne.n	8004ebc <UART_SetConfig+0x260>
 8004e66:	4b30      	ldr	r3, [pc, #192]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e74:	d01a      	beq.n	8004eac <UART_SetConfig+0x250>
 8004e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e7a:	d81b      	bhi.n	8004eb4 <UART_SetConfig+0x258>
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e80:	d00c      	beq.n	8004e9c <UART_SetConfig+0x240>
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e86:	d815      	bhi.n	8004eb4 <UART_SetConfig+0x258>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <UART_SetConfig+0x238>
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e90:	d008      	beq.n	8004ea4 <UART_SetConfig+0x248>
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x258>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e052      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e04e      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e04a      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	e046      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eba:	e042      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <UART_SetConfig+0x2c4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d13a      	bne.n	8004f3c <UART_SetConfig+0x2e0>
 8004ec6:	4b18      	ldr	r3, [pc, #96]	@ (8004f28 <UART_SetConfig+0x2cc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ed4:	d01a      	beq.n	8004f0c <UART_SetConfig+0x2b0>
 8004ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eda:	d81b      	bhi.n	8004f14 <UART_SetConfig+0x2b8>
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee0:	d00c      	beq.n	8004efc <UART_SetConfig+0x2a0>
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee6:	d815      	bhi.n	8004f14 <UART_SetConfig+0x2b8>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <UART_SetConfig+0x298>
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d008      	beq.n	8004f04 <UART_SetConfig+0x2a8>
 8004ef2:	e00f      	b.n	8004f14 <UART_SetConfig+0x2b8>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e022      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004efc:	2302      	movs	r3, #2
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e01e      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004f04:	2304      	movs	r3, #4
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0a:	e01a      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f12:	e016      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004f14:	2310      	movs	r3, #16
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1a:	e012      	b.n	8004f42 <UART_SetConfig+0x2e6>
 8004f1c:	efff69f3 	.word	0xefff69f3
 8004f20:	40008000 	.word	0x40008000
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	40004800 	.word	0x40004800
 8004f34:	40004c00 	.word	0x40004c00
 8004f38:	40005000 	.word	0x40005000
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a9f      	ldr	r2, [pc, #636]	@ (80051c4 <UART_SetConfig+0x568>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d17a      	bne.n	8005042 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d824      	bhi.n	8004f9e <UART_SetConfig+0x342>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <UART_SetConfig+0x300>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f9f 	.word	0x08004f9f
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f8f 	.word	0x08004f8f
 8004f70:	08004f9f 	.word	0x08004f9f
 8004f74:	08004f9f 	.word	0x08004f9f
 8004f78:	08004f9f 	.word	0x08004f9f
 8004f7c:	08004f97 	.word	0x08004f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7fe f966 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004f84:	61f8      	str	r0, [r7, #28]
        break;
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f88:	4b8f      	ldr	r3, [pc, #572]	@ (80051c8 <UART_SetConfig+0x56c>)
 8004f8a:	61fb      	str	r3, [r7, #28]
        break;
 8004f8c:	e00d      	b.n	8004faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8e:	f7fe f8c7 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8004f92:	61f8      	str	r0, [r7, #28]
        break;
 8004f94:	e009      	b.n	8004faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f9a:	61fb      	str	r3, [r7, #28]
        break;
 8004f9c:	e005      	b.n	8004faa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80fb 	beq.w	80051a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d305      	bcc.n	8004fce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d903      	bls.n	8004fd6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fd4:	e0e8      	b.n	80051a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	461c      	mov	r4, r3
 8004fdc:	4615      	mov	r5, r2
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	022b      	lsls	r3, r5, #8
 8004fe8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fec:	0222      	lsls	r2, r4, #8
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	6849      	ldr	r1, [r1, #4]
 8004ff2:	0849      	lsrs	r1, r1, #1
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	4688      	mov	r8, r1
 8004ff8:	4681      	mov	r9, r0
 8004ffa:	eb12 0a08 	adds.w	sl, r2, r8
 8004ffe:	eb43 0b09 	adc.w	fp, r3, r9
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	f7fb f8dc 	bl	80001d0 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005026:	d308      	bcc.n	800503a <UART_SetConfig+0x3de>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800502e:	d204      	bcs.n	800503a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e0b6      	b.n	80051a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005040:	e0b2      	b.n	80051a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504a:	d15e      	bne.n	800510a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800504c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005050:	2b08      	cmp	r3, #8
 8005052:	d828      	bhi.n	80050a6 <UART_SetConfig+0x44a>
 8005054:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <UART_SetConfig+0x400>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005097 	.word	0x08005097
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
 800507c:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe f8e6 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8005084:	61f8      	str	r0, [r7, #28]
        break;
 8005086:	e014      	b.n	80050b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fe f8f8 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 800508c:	61f8      	str	r0, [r7, #28]
        break;
 800508e:	e010      	b.n	80050b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b4d      	ldr	r3, [pc, #308]	@ (80051c8 <UART_SetConfig+0x56c>)
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e00d      	b.n	80050b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe f843 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 800509a:	61f8      	str	r0, [r7, #28]
        break;
 800509c:	e009      	b.n	80050b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a2:	61fb      	str	r3, [r7, #28]
        break;
 80050a4:	e005      	b.n	80050b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d077      	beq.n	80051a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	005a      	lsls	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	441a      	add	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b0f      	cmp	r3, #15
 80050d2:	d916      	bls.n	8005102 <UART_SetConfig+0x4a6>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050da:	d212      	bcs.n	8005102 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f023 030f 	bic.w	r3, r3, #15
 80050e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	8afb      	ldrh	r3, [r7, #22]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	8afa      	ldrh	r2, [r7, #22]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e052      	b.n	80051a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005108:	e04e      	b.n	80051a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800510a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800510e:	2b08      	cmp	r3, #8
 8005110:	d827      	bhi.n	8005162 <UART_SetConfig+0x506>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <UART_SetConfig+0x4bc>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	08005163 	.word	0x08005163
 8005128:	08005153 	.word	0x08005153
 800512c:	08005163 	.word	0x08005163
 8005130:	08005163 	.word	0x08005163
 8005134:	08005163 	.word	0x08005163
 8005138:	0800515b 	.word	0x0800515b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800513c:	f7fe f888 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8005140:	61f8      	str	r0, [r7, #28]
        break;
 8005142:	e014      	b.n	800516e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005144:	f7fe f89a 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8005148:	61f8      	str	r0, [r7, #28]
        break;
 800514a:	e010      	b.n	800516e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800514c:	4b1e      	ldr	r3, [pc, #120]	@ (80051c8 <UART_SetConfig+0x56c>)
 800514e:	61fb      	str	r3, [r7, #28]
        break;
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005152:	f7fd ffe5 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8005156:	61f8      	str	r0, [r7, #28]
        break;
 8005158:	e009      	b.n	800516e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800515e:	61fb      	str	r3, [r7, #28]
        break;
 8005160:	e005      	b.n	800516e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800516c:	bf00      	nop
    }

    if (pclk != 0U)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d019      	beq.n	80051a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	085a      	lsrs	r2, r3, #1
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	441a      	add	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b0f      	cmp	r3, #15
 800518c:	d909      	bls.n	80051a2 <UART_SetConfig+0x546>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005194:	d205      	bcs.n	80051a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e002      	b.n	80051a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3728      	adds	r7, #40	@ 0x28
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	40008000 	.word	0x40008000
 80051c8:	00f42400 	.word	0x00f42400

080051cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ca:	d10a      	bne.n	80052e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b098      	sub	sp, #96	@ 0x60
 8005314:	af02      	add	r7, sp, #8
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005320:	f7fb fe94 	bl	800104c <HAL_GetTick>
 8005324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d12e      	bne.n	8005392 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533c:	2200      	movs	r2, #0
 800533e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f88c 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d021      	beq.n	8005392 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800535c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005362:	653b      	str	r3, [r7, #80]	@ 0x50
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536c:	647b      	str	r3, [r7, #68]	@ 0x44
 800536e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800537a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e6      	bne.n	800534e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e062      	b.n	8005458 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d149      	bne.n	8005434 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f856 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03c      	beq.n	8005434 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	623b      	str	r3, [r7, #32]
   return(result);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540c:	61fa      	str	r2, [r7, #28]
 800540e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	69b9      	ldr	r1, [r7, #24]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	617b      	str	r3, [r7, #20]
   return(result);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e011      	b.n	8005458 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3758      	adds	r7, #88	@ 0x58
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	e04f      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d04b      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fb fde7 	bl	800104c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e04e      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d037      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b80      	cmp	r3, #128	@ 0x80
 80054a6:	d034      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d031      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d110      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f838 	bl	800553a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2208      	movs	r2, #8
 80054ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e029      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ec:	d111      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f81e 	bl	800553a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0a0      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553a:	b480      	push	{r7}
 800553c:	b095      	sub	sp, #84	@ 0x54
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005560:	643b      	str	r3, [r7, #64]	@ 0x40
 8005562:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	61fb      	str	r3, [r7, #28]
   return(result);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800559a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d118      	bne.n	80055e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055f6:	bf00      	nop
 80055f8:	3754      	adds	r7, #84	@ 0x54
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fb05 	bl	8004c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e6      	bne.n	8005636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fad1 	bl	8004c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567a:	bf00      	nop
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <__NVIC_SetPriority>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db0a      	blt.n	80056c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	490c      	ldr	r1, [pc, #48]	@ (80056e4 <__NVIC_SetPriority+0x4c>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	440b      	add	r3, r1
 80056bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056c0:	e00a      	b.n	80056d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4908      	ldr	r1, [pc, #32]	@ (80056e8 <__NVIC_SetPriority+0x50>)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3b04      	subs	r3, #4
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	440b      	add	r3, r1
 80056d6:	761a      	strb	r2, [r3, #24]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <SysTick_Handler+0x1c>)
 80056f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056f4:	f001 fcc6 	bl	8007084 <xTaskGetSchedulerState>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d001      	beq.n	8005702 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80056fe:	f002 fabb 	bl	8007c78 <xPortSysTickHandler>
  }
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	e000e010 	.word	0xe000e010

0800570c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005710:	2100      	movs	r1, #0
 8005712:	f06f 0004 	mvn.w	r0, #4
 8005716:	f7ff ffbf 	bl	8005698 <__NVIC_SetPriority>
#endif
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	603b      	str	r3, [r7, #0]
  return(result);
 800572c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005732:	f06f 0305 	mvn.w	r3, #5
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e00c      	b.n	8005754 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <osKernelInitialize+0x44>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005742:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <osKernelInitialize+0x44>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005748:	2300      	movs	r3, #0
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	e002      	b.n	8005754 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800574e:	f04f 33ff 	mov.w	r3, #4294967295
 8005752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005754:	687b      	ldr	r3, [r7, #4]
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200001d0 	.word	0x200001d0

08005768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576e:	f3ef 8305 	mrs	r3, IPSR
 8005772:	603b      	str	r3, [r7, #0]
  return(result);
 8005774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800577a:	f06f 0305 	mvn.w	r3, #5
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e010      	b.n	80057a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <osKernelStart+0x48>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d109      	bne.n	800579e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800578a:	f7ff ffbf 	bl	800570c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <osKernelStart+0x48>)
 8005790:	2202      	movs	r2, #2
 8005792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005794:	f001 f828 	bl	80067e8 <vTaskStartScheduler>
      stat = osOK;
 8005798:	2300      	movs	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e002      	b.n	80057a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057a4:	687b      	ldr	r3, [r7, #4]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200001d0 	.word	0x200001d0

080057b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	@ 0x38
 80057b8:	af04      	add	r7, sp, #16
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8305 	mrs	r3, IPSR
 80057c8:	617b      	str	r3, [r7, #20]
  return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d17e      	bne.n	80058ce <osThreadNew+0x11a>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d07b      	beq.n	80058ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057da:	2318      	movs	r3, #24
 80057dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d045      	beq.n	800587a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <osThreadNew+0x48>
        name = attr->name;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <osThreadNew+0x6e>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b38      	cmp	r3, #56	@ 0x38
 8005814:	d805      	bhi.n	8005822 <osThreadNew+0x6e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <osThreadNew+0x72>
        return (NULL);
 8005822:	2300      	movs	r3, #0
 8005824:	e054      	b.n	80058d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <osThreadNew+0xa8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b5b      	cmp	r3, #91	@ 0x5b
 8005844:	d90a      	bls.n	800585c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <osThreadNew+0xa8>
        mem = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e010      	b.n	800587e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10c      	bne.n	800587e <osThreadNew+0xca>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <osThreadNew+0xca>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <osThreadNew+0xca>
          mem = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e001      	b.n	800587e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d110      	bne.n	80058a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800588c:	9202      	str	r2, [sp, #8]
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fdfe 	bl	800649c <xTaskCreateStatic>
 80058a0:	4603      	mov	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	e013      	b.n	80058ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d110      	bne.n	80058ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fe4c 	bl	800655c <xTaskCreate>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <osThreadNew+0x11a>
            hTask = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058ce:	693b      	ldr	r3, [r7, #16]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	@ 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a07      	ldr	r2, [pc, #28]	@ (8005904 <vApplicationGetIdleTaskMemory+0x2c>)
 80058e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4a06      	ldr	r2, [pc, #24]	@ (8005908 <vApplicationGetIdleTaskMemory+0x30>)
 80058ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2280      	movs	r2, #128	@ 0x80
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200001d4 	.word	0x200001d4
 8005908:	20000230 	.word	0x20000230

0800590c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a07      	ldr	r2, [pc, #28]	@ (8005938 <vApplicationGetTimerTaskMemory+0x2c>)
 800591c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a06      	ldr	r2, [pc, #24]	@ (800593c <vApplicationGetTimerTaskMemory+0x30>)
 8005922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800592a:	601a      	str	r2, [r3, #0]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	20000430 	.word	0x20000430
 800593c:	2000048c 	.word	0x2000048c

08005940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f103 0208 	add.w	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f04f 32ff 	mov.w	r2, #4294967295
 8005958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f103 0208 	add.w	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f103 0208 	add.w	r2, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d103      	bne.n	8005a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e00c      	b.n	8005a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3308      	adds	r3, #8
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e002      	b.n	8005a10 <vListInsert+0x2e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d2f6      	bcs.n	8005a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6892      	ldr	r2, [r2, #8]
 8005a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d103      	bne.n	8005a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	1e5a      	subs	r2, r3, #1
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10b      	bne.n	8005ad4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	e7fd      	b.n	8005ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ad4:	f002 f840 	bl	8007b58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b04:	3b01      	subs	r3, #1
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	441a      	add	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22ff      	movs	r2, #255	@ 0xff
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	22ff      	movs	r2, #255	@ 0xff
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d114      	bne.n	8005b54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01a      	beq.n	8005b68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3310      	adds	r3, #16
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 f8e4 	bl	8006d04 <xTaskRemoveFromEventList>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <xQueueGenericReset+0xd0>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	e009      	b.n	8005b68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3310      	adds	r3, #16
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fef1 	bl	8005940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3324      	adds	r3, #36	@ 0x24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff feec 	bl	8005940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b68:	f002 f828 	bl	8007bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b6c:	2301      	movs	r3, #1
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08e      	sub	sp, #56	@ 0x38
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <xQueueGenericCreateStatic+0x56>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <xQueueGenericCreateStatic+0x5a>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueGenericCreateStatic+0x5c>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	623b      	str	r3, [r7, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <xQueueGenericCreateStatic+0x84>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <xQueueGenericCreateStatic+0x88>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <xQueueGenericCreateStatic+0x8a>
 8005c04:	2300      	movs	r3, #0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	61fb      	str	r3, [r7, #28]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c22:	2350      	movs	r3, #80	@ 0x50
 8005c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b50      	cmp	r3, #80	@ 0x50
 8005c2a:	d00b      	beq.n	8005c44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	61bb      	str	r3, [r7, #24]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f805 	bl	8005c76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3730      	adds	r7, #48	@ 0x30
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
 8005c82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	69b8      	ldr	r0, [r7, #24]
 8005ca8:	f7ff fefe 	bl	8005aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08e      	sub	sp, #56	@ 0x38
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <xQueueGenericSend+0x34>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <xQueueGenericSend+0x42>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <xQueueGenericSend+0x46>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <xQueueGenericSend+0x48>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <xQueueGenericSend+0x64>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d103      	bne.n	8005d2e <xQueueGenericSend+0x72>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <xQueueGenericSend+0x76>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueGenericSend+0x78>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xQueueGenericSend+0x94>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	623b      	str	r3, [r7, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d50:	f001 f998 	bl	8007084 <xTaskGetSchedulerState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <xQueueGenericSend+0xa4>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <xQueueGenericSend+0xa8>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <xQueueGenericSend+0xaa>
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <xQueueGenericSend+0xc6>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	61fb      	str	r3, [r7, #28]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d82:	f001 fee9 	bl	8007b58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <xQueueGenericSend+0xdc>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d129      	bne.n	8005dec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d9e:	f000 fa0f 	bl	80061c0 <prvCopyDataToQueue>
 8005da2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	3324      	adds	r3, #36	@ 0x24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 ffa7 	bl	8006d04 <xTaskRemoveFromEventList>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ebc <xQueueGenericSend+0x200>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	e00a      	b.n	8005de4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dd4:	4b39      	ldr	r3, [pc, #228]	@ (8005ebc <xQueueGenericSend+0x200>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005de4:	f001 feea 	bl	8007bbc <vPortExitCritical>
				return pdPASS;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e063      	b.n	8005eb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005df2:	f001 fee3 	bl	8007bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e05c      	b.n	8005eb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 ffe1 	bl	8006dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e0e:	f001 fed5 	bl	8007bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e12:	f000 fd51 	bl	80068b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e16:	f001 fe9f 	bl	8007b58 <vPortEnterCritical>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d103      	bne.n	8005e30 <xQueueGenericSend+0x174>
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSend+0x18a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e46:	f001 feb9 	bl	8007bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e4a:	1d3a      	adds	r2, r7, #4
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 ffd0 	bl	8006df8 <xTaskCheckForTimeOut>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d124      	bne.n	8005ea8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e60:	f000 faa6 	bl	80063b0 <prvIsQueueFull>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d018      	beq.n	8005e9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fef4 	bl	8006c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e7a:	f000 fa31 	bl	80062e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e7e:	f000 fd29 	bl	80068d4 <xTaskResumeAll>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f47f af7c 	bne.w	8005d82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <xQueueGenericSend+0x200>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	e772      	b.n	8005d82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e9e:	f000 fa1f 	bl	80062e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ea2:	f000 fd17 	bl	80068d4 <xTaskResumeAll>
 8005ea6:	e76c      	b.n	8005d82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eaa:	f000 fa19 	bl	80062e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eae:	f000 fd11 	bl	80068d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3738      	adds	r7, #56	@ 0x38
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b090      	sub	sp, #64	@ 0x40
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <xQueueGenericSendFromISR+0x3e>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericSendFromISR+0x42>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericSendFromISR+0x44>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSendFromISR+0x6e>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericSendFromISR+0x72>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericSendFromISR+0x74>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f50:	f001 fee2 	bl	8007d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f54:	f3ef 8211 	mrs	r2, BASEPRI
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61fa      	str	r2, [r7, #28]
 8005f6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d302      	bcc.n	8005f82 <xQueueGenericSendFromISR+0xc2>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d12f      	bne.n	8005fe2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f98:	f000 f912 	bl	80061c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d112      	bne.n	8005fcc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	3324      	adds	r3, #36	@ 0x24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fea6 	bl	8006d04 <xTaskRemoveFromEventList>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00e      	beq.n	8005fdc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e007      	b.n	8005fdc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	b25a      	sxtb	r2, r3
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005fe0:	e001      	b.n	8005fe6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ff0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3740      	adds	r7, #64	@ 0x40
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	@ 0x30
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <xQueueReceive+0x32>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	623b      	str	r3, [r7, #32]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <xQueueReceive+0x40>
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xQueueReceive+0x44>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xQueueReceive+0x46>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <xQueueReceive+0x62>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	61fb      	str	r3, [r7, #28]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800605e:	f001 f811 	bl	8007084 <xTaskGetSchedulerState>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <xQueueReceive+0x72>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <xQueueReceive+0x76>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <xQueueReceive+0x78>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xQueueReceive+0x94>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	61bb      	str	r3, [r7, #24]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006090:	f001 fd62 	bl	8007b58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01f      	beq.n	80060e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a4:	f000 f8f6 	bl	8006294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	1e5a      	subs	r2, r3, #1
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00f      	beq.n	80060d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	3310      	adds	r3, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fe21 	bl	8006d04 <xTaskRemoveFromEventList>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060c8:	4b3c      	ldr	r3, [pc, #240]	@ (80061bc <xQueueReceive+0x1c0>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060d8:	f001 fd70 	bl	8007bbc <vPortExitCritical>
				return pdPASS;
 80060dc:	2301      	movs	r3, #1
 80060de:	e069      	b.n	80061b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060e6:	f001 fd69 	bl	8007bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e062      	b.n	80061b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060f4:	f107 0310 	add.w	r3, r7, #16
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fe67 	bl	8006dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060fe:	2301      	movs	r3, #1
 8006100:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006102:	f001 fd5b 	bl	8007bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006106:	f000 fbd7 	bl	80068b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800610a:	f001 fd25 	bl	8007b58 <vPortEnterCritical>
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006114:	b25b      	sxtb	r3, r3
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d103      	bne.n	8006124 <xQueueReceive+0x128>
 800611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800612a:	b25b      	sxtb	r3, r3
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d103      	bne.n	800613a <xQueueReceive+0x13e>
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800613a:	f001 fd3f 	bl	8007bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800613e:	1d3a      	adds	r2, r7, #4
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fe56 	bl	8006df8 <xTaskCheckForTimeOut>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d123      	bne.n	800619a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006154:	f000 f916 	bl	8006384 <prvIsQueueEmpty>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d017      	beq.n	800618e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800615e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006160:	3324      	adds	r3, #36	@ 0x24
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd7a 	bl	8006c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800616c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800616e:	f000 f8b7 	bl	80062e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006172:	f000 fbaf 	bl	80068d4 <xTaskResumeAll>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d189      	bne.n	8006090 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <xQueueReceive+0x1c0>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	e780      	b.n	8006090 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800618e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006190:	f000 f8a6 	bl	80062e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006194:	f000 fb9e 	bl	80068d4 <xTaskResumeAll>
 8006198:	e77a      	b.n	8006090 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800619a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800619c:	f000 f8a0 	bl	80062e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061a0:	f000 fb98 	bl	80068d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061a6:	f000 f8ed 	bl	8006384 <prvIsQueueEmpty>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f43f af6f 	beq.w	8006090 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3730      	adds	r7, #48	@ 0x30
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d14d      	bne.n	8006282 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 ff68 	bl	80070c0 <xTaskPriorityDisinherit>
 80061f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	e043      	b.n	8006282 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d119      	bne.n	8006234 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6858      	ldr	r0, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006208:	461a      	mov	r2, r3
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	f002 fa27 	bl	800865e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	441a      	add	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d32b      	bcc.n	8006282 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	e026      	b.n	8006282 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68d8      	ldr	r0, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	461a      	mov	r2, r3
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	f002 fa0d 	bl	800865e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	425b      	negs	r3, r3
 800624e:	441a      	add	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d207      	bcs.n	8006270 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	425b      	negs	r3, r3
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d105      	bne.n	8006282 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3b01      	subs	r3, #1
 8006280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800628a:	697b      	ldr	r3, [r7, #20]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d018      	beq.n	80062d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	441a      	add	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d303      	bcc.n	80062c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68d9      	ldr	r1, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	461a      	mov	r2, r3
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f002 f9c3 	bl	800865e <memcpy>
	}
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062e8:	f001 fc36 	bl	8007b58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062f4:	e011      	b.n	800631a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d012      	beq.n	8006324 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3324      	adds	r3, #36	@ 0x24
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fcfe 	bl	8006d04 <xTaskRemoveFromEventList>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800630e:	f000 fdd7 	bl	8006ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	3b01      	subs	r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800631a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800631e:	2b00      	cmp	r3, #0
 8006320:	dce9      	bgt.n	80062f6 <prvUnlockQueue+0x16>
 8006322:	e000      	b.n	8006326 <prvUnlockQueue+0x46>
					break;
 8006324:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	22ff      	movs	r2, #255	@ 0xff
 800632a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800632e:	f001 fc45 	bl	8007bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006332:	f001 fc11 	bl	8007b58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800633c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800633e:	e011      	b.n	8006364 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3310      	adds	r3, #16
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fcd9 	bl	8006d04 <xTaskRemoveFromEventList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006358:	f000 fdb2 	bl	8006ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	3b01      	subs	r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dce9      	bgt.n	8006340 <prvUnlockQueue+0x60>
 800636c:	e000      	b.n	8006370 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800636e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	22ff      	movs	r2, #255	@ 0xff
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006378:	f001 fc20 	bl	8007bbc <vPortExitCritical>
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800638c:	f001 fbe4 	bl	8007b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e001      	b.n	80063a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063a2:	f001 fc0b 	bl	8007bbc <vPortExitCritical>

	return xReturn;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063b8:	f001 fbce 	bl	8007b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d102      	bne.n	80063ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e001      	b.n	80063d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063d2:	f001 fbf3 	bl	8007bbc <vPortExitCritical>

	return xReturn;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e014      	b.n	800641a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006430 <vQueueAddToRegistry+0x50>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063fc:	490c      	ldr	r1, [pc, #48]	@ (8006430 <vQueueAddToRegistry+0x50>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006406:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <vQueueAddToRegistry+0x50>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006412:	e006      	b.n	8006422 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b07      	cmp	r3, #7
 800641e:	d9e7      	bls.n	80063f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	2000088c 	.word	0x2000088c

08006434 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006444:	f001 fb88 	bl	8007b58 <vPortEnterCritical>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800644e:	b25b      	sxtb	r3, r3
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d103      	bne.n	800645e <vQueueWaitForMessageRestricted+0x2a>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006464:	b25b      	sxtb	r3, r3
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d103      	bne.n	8006474 <vQueueWaitForMessageRestricted+0x40>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006474:	f001 fba2 	bl	8007bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	3324      	adds	r3, #36	@ 0x24
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fc0f 	bl	8006cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800648e:	6978      	ldr	r0, [r7, #20]
 8006490:	f7ff ff26 	bl	80062e0 <prvUnlockQueue>
	}
 8006494:	bf00      	nop
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	@ 0x38
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	623b      	str	r3, [r7, #32]
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	61fb      	str	r3, [r7, #28]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064e6:	235c      	movs	r3, #92	@ 0x5c
 80064e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80064ee:	d00b      	beq.n	8006508 <xTaskCreateStatic+0x6c>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61bb      	str	r3, [r7, #24]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006508:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01e      	beq.n	800654e <xTaskCreateStatic+0xb2>
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01b      	beq.n	800654e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800651e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006528:	2300      	movs	r3, #0
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	f107 0314 	add.w	r3, r7, #20
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f850 	bl	80065e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006548:	f000 f8de 	bl	8006708 <prvAddNewTaskToReadyList>
 800654c:	e001      	b.n	8006552 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006552:	697b      	ldr	r3, [r7, #20]
	}
 8006554:	4618      	mov	r0, r3
 8006556:	3728      	adds	r7, #40	@ 0x28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	@ 0x30
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fc13 	bl	8007d9c <pvPortMalloc>
 8006576:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800657e:	205c      	movs	r0, #92	@ 0x5c
 8006580:	f001 fc0c 	bl	8007d9c <pvPortMalloc>
 8006584:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
 8006592:	e005      	b.n	80065a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006594:	6978      	ldr	r0, [r7, #20]
 8006596:	f001 fccf 	bl	8007f38 <vPortFree>
 800659a:	e001      	b.n	80065a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d017      	beq.n	80065d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	2300      	movs	r3, #0
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	9302      	str	r3, [sp, #8]
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f80e 	bl	80065e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065ca:	69f8      	ldr	r0, [r7, #28]
 80065cc:	f000 f89c 	bl	8006708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065d0:	2301      	movs	r3, #1
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e002      	b.n	80065dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065dc:	69bb      	ldr	r3, [r7, #24]
	}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b088      	sub	sp, #32
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	461a      	mov	r2, r3
 80065fe:	21a5      	movs	r1, #165	@ 0xa5
 8006600:	f001 ffb2 	bl	8008568 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800660e:	3b01      	subs	r3, #1
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f023 0307 	bic.w	r3, r3, #7
 800661c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	617b      	str	r3, [r7, #20]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01f      	beq.n	8006686 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	e012      	b.n	8006672 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	7819      	ldrb	r1, [r3, #0]
 8006654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	3334      	adds	r3, #52	@ 0x34
 800665c:	460a      	mov	r2, r1
 800665e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d006      	beq.n	800667a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	3301      	adds	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b0f      	cmp	r3, #15
 8006676:	d9e9      	bls.n	800664c <prvInitialiseNewTask+0x66>
 8006678:	e000      	b.n	800667c <prvInitialiseNewTask+0x96>
			{
				break;
 800667a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006684:	e003      	b.n	800668e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	2b37      	cmp	r3, #55	@ 0x37
 8006692:	d901      	bls.n	8006698 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006694:	2337      	movs	r3, #55	@ 0x37
 8006696:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800669c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff f966 	bl	8005980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	3318      	adds	r3, #24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff f961 	bl	8005980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f001 f908 	bl	80078fc <pxPortInitialiseStack>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fe:	bf00      	nop
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006710:	f001 fa22 	bl	8007b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006714:	4b2d      	ldr	r3, [pc, #180]	@ (80067cc <prvAddNewTaskToReadyList+0xc4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	4a2c      	ldr	r2, [pc, #176]	@ (80067cc <prvAddNewTaskToReadyList+0xc4>)
 800671c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800671e:	4b2c      	ldr	r3, [pc, #176]	@ (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006726:	4a2a      	ldr	r2, [pc, #168]	@ (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800672c:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <prvAddNewTaskToReadyList+0xc4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d110      	bne.n	8006756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006734:	f000 fbe8 	bl	8006f08 <prvInitialiseTaskLists>
 8006738:	e00d      	b.n	8006756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800673a:	4b26      	ldr	r3, [pc, #152]	@ (80067d4 <prvAddNewTaskToReadyList+0xcc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006742:	4b23      	ldr	r3, [pc, #140]	@ (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	429a      	cmp	r2, r3
 800674e:	d802      	bhi.n	8006756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006750:	4a1f      	ldr	r2, [pc, #124]	@ (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006756:	4b20      	ldr	r3, [pc, #128]	@ (80067d8 <prvAddNewTaskToReadyList+0xd0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a1e      	ldr	r2, [pc, #120]	@ (80067d8 <prvAddNewTaskToReadyList+0xd0>)
 800675e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006760:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <prvAddNewTaskToReadyList+0xd0>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676c:	4b1b      	ldr	r3, [pc, #108]	@ (80067dc <prvAddNewTaskToReadyList+0xd4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <prvAddNewTaskToReadyList+0x74>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <prvAddNewTaskToReadyList+0xd4>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <prvAddNewTaskToReadyList+0xd8>)
 800678a:	441a      	add	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7ff f901 	bl	800599a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006798:	f001 fa10 	bl	8007bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800679c:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <prvAddNewTaskToReadyList+0xcc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067a4:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <prvAddNewTaskToReadyList+0xc8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d207      	bcs.n	80067c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <prvAddNewTaskToReadyList+0xdc>)
 80067b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000da0 	.word	0x20000da0
 80067d0:	200008cc 	.word	0x200008cc
 80067d4:	20000dac 	.word	0x20000dac
 80067d8:	20000dbc 	.word	0x20000dbc
 80067dc:	20000da8 	.word	0x20000da8
 80067e0:	200008d0 	.word	0x200008d0
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	@ 0x28
 80067ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067f6:	463a      	mov	r2, r7
 80067f8:	1d39      	adds	r1, r7, #4
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff f86a 	bl	80058d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	460a      	mov	r2, r1
 8006816:	4922      	ldr	r1, [pc, #136]	@ (80068a0 <vTaskStartScheduler+0xb8>)
 8006818:	4822      	ldr	r0, [pc, #136]	@ (80068a4 <vTaskStartScheduler+0xbc>)
 800681a:	f7ff fe3f 	bl	800649c <xTaskCreateStatic>
 800681e:	4603      	mov	r3, r0
 8006820:	4a21      	ldr	r2, [pc, #132]	@ (80068a8 <vTaskStartScheduler+0xc0>)
 8006822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006824:	4b20      	ldr	r3, [pc, #128]	@ (80068a8 <vTaskStartScheduler+0xc0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e001      	b.n	8006836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800683c:	f000 fd04 	bl	8007248 <xTimerCreateTimerTask>
 8006840:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d116      	bne.n	8006876 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	613b      	str	r3, [r7, #16]
}
 800685a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800685c:	4b13      	ldr	r3, [pc, #76]	@ (80068ac <vTaskStartScheduler+0xc4>)
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006864:	4b12      	ldr	r3, [pc, #72]	@ (80068b0 <vTaskStartScheduler+0xc8>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800686a:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <vTaskStartScheduler+0xcc>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006870:	f001 f8ce 	bl	8007a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006874:	e00f      	b.n	8006896 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d10b      	bne.n	8006896 <vTaskStartScheduler+0xae>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	60fb      	str	r3, [r7, #12]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <vTaskStartScheduler+0xaa>
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	08008b80 	.word	0x08008b80
 80068a4:	08006ed9 	.word	0x08006ed9
 80068a8:	20000dc4 	.word	0x20000dc4
 80068ac:	20000dc0 	.word	0x20000dc0
 80068b0:	20000dac 	.word	0x20000dac
 80068b4:	20000da4 	.word	0x20000da4

080068b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068bc:	4b04      	ldr	r3, [pc, #16]	@ (80068d0 <vTaskSuspendAll+0x18>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a03      	ldr	r2, [pc, #12]	@ (80068d0 <vTaskSuspendAll+0x18>)
 80068c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	20000dc8 	.word	0x20000dc8

080068d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068e2:	4b42      	ldr	r3, [pc, #264]	@ (80069ec <xTaskResumeAll+0x118>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <xTaskResumeAll+0x2e>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006902:	f001 f929 	bl	8007b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006906:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <xTaskResumeAll+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a37      	ldr	r2, [pc, #220]	@ (80069ec <xTaskResumeAll+0x118>)
 800690e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006910:	4b36      	ldr	r3, [pc, #216]	@ (80069ec <xTaskResumeAll+0x118>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d162      	bne.n	80069de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006918:	4b35      	ldr	r3, [pc, #212]	@ (80069f0 <xTaskResumeAll+0x11c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d05e      	beq.n	80069de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006920:	e02f      	b.n	8006982 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <xTaskResumeAll+0x120>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3318      	adds	r3, #24
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff f890 	bl	8005a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff f88b 	bl	8005a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	4b2d      	ldr	r3, [pc, #180]	@ (80069f8 <xTaskResumeAll+0x124>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d903      	bls.n	8006952 <xTaskResumeAll+0x7e>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	4a2a      	ldr	r2, [pc, #168]	@ (80069f8 <xTaskResumeAll+0x124>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4a27      	ldr	r2, [pc, #156]	@ (80069fc <xTaskResumeAll+0x128>)
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7ff f816 	bl	800599a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006972:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <xTaskResumeAll+0x12c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800697c:	4b21      	ldr	r3, [pc, #132]	@ (8006a04 <xTaskResumeAll+0x130>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006982:	4b1c      	ldr	r3, [pc, #112]	@ (80069f4 <xTaskResumeAll+0x120>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1cb      	bne.n	8006922 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006990:	f000 fb58 	bl	8007044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006994:	4b1c      	ldr	r3, [pc, #112]	@ (8006a08 <xTaskResumeAll+0x134>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d010      	beq.n	80069c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069a0:	f000 f846 	bl	8006a30 <xTaskIncrementTick>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80069aa:	4b16      	ldr	r3, [pc, #88]	@ (8006a04 <xTaskResumeAll+0x130>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f1      	bne.n	80069a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80069bc:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <xTaskResumeAll+0x134>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <xTaskResumeAll+0x130>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ca:	2301      	movs	r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069ce:	4b0f      	ldr	r3, [pc, #60]	@ (8006a0c <xTaskResumeAll+0x138>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069de:	f001 f8ed 	bl	8007bbc <vPortExitCritical>

	return xAlreadyYielded;
 80069e2:	68bb      	ldr	r3, [r7, #8]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000dc8 	.word	0x20000dc8
 80069f0:	20000da0 	.word	0x20000da0
 80069f4:	20000d60 	.word	0x20000d60
 80069f8:	20000da8 	.word	0x20000da8
 80069fc:	200008d0 	.word	0x200008d0
 8006a00:	200008cc 	.word	0x200008cc
 8006a04:	20000db4 	.word	0x20000db4
 8006a08:	20000db0 	.word	0x20000db0
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a16:	4b05      	ldr	r3, [pc, #20]	@ (8006a2c <xTaskGetTickCount+0x1c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a1c:	687b      	ldr	r3, [r7, #4]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20000da4 	.word	0x20000da4

08006a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b78 <xTaskIncrementTick+0x148>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 8090 	bne.w	8006b64 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a44:	4b4d      	ldr	r3, [pc, #308]	@ (8006b7c <xTaskIncrementTick+0x14c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006b7c <xTaskIncrementTick+0x14c>)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d121      	bne.n	8006a9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a58:	4b49      	ldr	r3, [pc, #292]	@ (8006b80 <xTaskIncrementTick+0x150>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	603b      	str	r3, [r7, #0]
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <xTaskIncrementTick+0x46>
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <xTaskIncrementTick+0x150>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	4b40      	ldr	r3, [pc, #256]	@ (8006b84 <xTaskIncrementTick+0x154>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a3e      	ldr	r2, [pc, #248]	@ (8006b80 <xTaskIncrementTick+0x150>)
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4a3e      	ldr	r2, [pc, #248]	@ (8006b84 <xTaskIncrementTick+0x154>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <xTaskIncrementTick+0x158>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a3c      	ldr	r2, [pc, #240]	@ (8006b88 <xTaskIncrementTick+0x158>)
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	f000 fad4 	bl	8007044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b8c <xTaskIncrementTick+0x15c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d349      	bcc.n	8006b3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa6:	4b36      	ldr	r3, [pc, #216]	@ (8006b80 <xTaskIncrementTick+0x150>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	4b36      	ldr	r3, [pc, #216]	@ (8006b8c <xTaskIncrementTick+0x15c>)
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	601a      	str	r2, [r3, #0]
					break;
 8006ab8:	e03f      	b.n	8006b3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aba:	4b31      	ldr	r3, [pc, #196]	@ (8006b80 <xTaskIncrementTick+0x150>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d203      	bcs.n	8006ada <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8006b8c <xTaskIncrementTick+0x15c>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ad8:	e02f      	b.n	8006b3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3304      	adds	r3, #4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe ffb8 	bl	8005a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3318      	adds	r3, #24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe ffaf 	bl	8005a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	4b25      	ldr	r3, [pc, #148]	@ (8006b90 <xTaskIncrementTick+0x160>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <xTaskIncrementTick+0xda>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	4a22      	ldr	r2, [pc, #136]	@ (8006b90 <xTaskIncrementTick+0x160>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a1f      	ldr	r2, [pc, #124]	@ (8006b94 <xTaskIncrementTick+0x164>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fe ff3a 	bl	800599a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b98 <xTaskIncrementTick+0x168>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3b8      	bcc.n	8006aa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b38:	e7b5      	b.n	8006aa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b3a:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <xTaskIncrementTick+0x168>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b40:	4914      	ldr	r1, [pc, #80]	@ (8006b94 <xTaskIncrementTick+0x164>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d901      	bls.n	8006b56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <xTaskIncrementTick+0x16c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e004      	b.n	8006b6e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <xTaskIncrementTick+0x170>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba0 <xTaskIncrementTick+0x170>)
 8006b6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000dc8 	.word	0x20000dc8
 8006b7c:	20000da4 	.word	0x20000da4
 8006b80:	20000d58 	.word	0x20000d58
 8006b84:	20000d5c 	.word	0x20000d5c
 8006b88:	20000db8 	.word	0x20000db8
 8006b8c:	20000dc0 	.word	0x20000dc0
 8006b90:	20000da8 	.word	0x20000da8
 8006b94:	200008d0 	.word	0x200008d0
 8006b98:	200008cc 	.word	0x200008cc
 8006b9c:	20000db4 	.word	0x20000db4
 8006ba0:	20000db0 	.word	0x20000db0

08006ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006baa:	4b28      	ldr	r3, [pc, #160]	@ (8006c4c <vTaskSwitchContext+0xa8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bb2:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <vTaskSwitchContext+0xac>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb8:	e042      	b.n	8006c40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006bba:	4b25      	ldr	r3, [pc, #148]	@ (8006c50 <vTaskSwitchContext+0xac>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc0:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <vTaskSwitchContext+0xb0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e011      	b.n	8006bec <vTaskSwitchContext+0x48>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vTaskSwitchContext+0x3e>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	491a      	ldr	r1, [pc, #104]	@ (8006c58 <vTaskSwitchContext+0xb4>)
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0e3      	beq.n	8006bc8 <vTaskSwitchContext+0x24>
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4a13      	ldr	r2, [pc, #76]	@ (8006c58 <vTaskSwitchContext+0xb4>)
 8006c0c:	4413      	add	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	3308      	adds	r3, #8
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d104      	bne.n	8006c30 <vTaskSwitchContext+0x8c>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	4a09      	ldr	r2, [pc, #36]	@ (8006c5c <vTaskSwitchContext+0xb8>)
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	4a06      	ldr	r2, [pc, #24]	@ (8006c54 <vTaskSwitchContext+0xb0>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6013      	str	r3, [r2, #0]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000dc8 	.word	0x20000dc8
 8006c50:	20000db4 	.word	0x20000db4
 8006c54:	20000da8 	.word	0x20000da8
 8006c58:	200008d0 	.word	0x200008d0
 8006c5c:	200008cc 	.word	0x200008cc

08006c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c88:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <vTaskPlaceOnEventList+0x48>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fe fea6 	bl	80059e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c96:	2101      	movs	r1, #1
 8006c98:	6838      	ldr	r0, [r7, #0]
 8006c9a:	f000 fa81 	bl	80071a0 <prvAddCurrentTaskToDelayedList>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200008cc 	.word	0x200008cc

08006cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3318      	adds	r3, #24
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7fe fe5b 	bl	800599a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f000 fa54 	bl	80071a0 <prvAddCurrentTaskToDelayedList>
	}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200008cc 	.word	0x200008cc

08006d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60fb      	str	r3, [r7, #12]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3318      	adds	r3, #24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe fe8c 	bl	8005a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <xTaskRemoveFromEventList+0xb0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11d      	bne.n	8006d80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fe83 	bl	8005a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <xTaskRemoveFromEventList+0xb4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d903      	bls.n	8006d62 <xTaskRemoveFromEventList+0x5e>
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <xTaskRemoveFromEventList+0xb4>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4a13      	ldr	r2, [pc, #76]	@ (8006dbc <xTaskRemoveFromEventList+0xb8>)
 8006d70:	441a      	add	r2, r3
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fe fe0e 	bl	800599a <vListInsertEnd>
 8006d7e:	e005      	b.n	8006d8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3318      	adds	r3, #24
 8006d84:	4619      	mov	r1, r3
 8006d86:	480e      	ldr	r0, [pc, #56]	@ (8006dc0 <xTaskRemoveFromEventList+0xbc>)
 8006d88:	f7fe fe07 	bl	800599a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d90:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <xTaskRemoveFromEventList+0xc0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d905      	bls.n	8006da6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <xTaskRemoveFromEventList+0xc4>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e001      	b.n	8006daa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006daa:	697b      	ldr	r3, [r7, #20]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000dc8 	.word	0x20000dc8
 8006db8:	20000da8 	.word	0x20000da8
 8006dbc:	200008d0 	.word	0x200008d0
 8006dc0:	20000d60 	.word	0x20000d60
 8006dc4:	200008cc 	.word	0x200008cc
 8006dc8:	20000db4 	.word	0x20000db4

08006dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <vTaskInternalSetTimeOutState+0x24>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ddc:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <vTaskInternalSetTimeOutState+0x28>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	605a      	str	r2, [r3, #4]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000db8 	.word	0x20000db8
 8006df4:	20000da4 	.word	0x20000da4

08006df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	613b      	str	r3, [r7, #16]
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60fb      	str	r3, [r7, #12]
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e3e:	f000 fe8b 	bl	8007b58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e42:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <xTaskCheckForTimeOut+0xc0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d102      	bne.n	8006e62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e023      	b.n	8006eaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b15      	ldr	r3, [pc, #84]	@ (8006ebc <xTaskCheckForTimeOut+0xc4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d007      	beq.n	8006e7e <xTaskCheckForTimeOut+0x86>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e015      	b.n	8006eaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d20b      	bcs.n	8006ea0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff99 	bl	8006dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	e004      	b.n	8006eaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eaa:	f000 fe87 	bl	8007bbc <vPortExitCritical>

	return xReturn;
 8006eae:	69fb      	ldr	r3, [r7, #28]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000da4 	.word	0x20000da4
 8006ebc:	20000db8 	.word	0x20000db8

08006ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ec4:	4b03      	ldr	r3, [pc, #12]	@ (8006ed4 <vTaskMissedYield+0x14>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20000db4 	.word	0x20000db4

08006ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ee0:	f000 f852 	bl	8006f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ee4:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <prvIdleTask+0x28>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d9f9      	bls.n	8006ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <prvIdleTask+0x2c>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006efc:	e7f0      	b.n	8006ee0 <prvIdleTask+0x8>
 8006efe:	bf00      	nop
 8006f00:	200008d0 	.word	0x200008d0
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	e00c      	b.n	8006f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4a12      	ldr	r2, [pc, #72]	@ (8006f68 <prvInitialiseTaskLists+0x60>)
 8006f20:	4413      	add	r3, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fd0c 	bl	8005940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b37      	cmp	r3, #55	@ 0x37
 8006f32:	d9ef      	bls.n	8006f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f34:	480d      	ldr	r0, [pc, #52]	@ (8006f6c <prvInitialiseTaskLists+0x64>)
 8006f36:	f7fe fd03 	bl	8005940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f3a:	480d      	ldr	r0, [pc, #52]	@ (8006f70 <prvInitialiseTaskLists+0x68>)
 8006f3c:	f7fe fd00 	bl	8005940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f40:	480c      	ldr	r0, [pc, #48]	@ (8006f74 <prvInitialiseTaskLists+0x6c>)
 8006f42:	f7fe fcfd 	bl	8005940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f46:	480c      	ldr	r0, [pc, #48]	@ (8006f78 <prvInitialiseTaskLists+0x70>)
 8006f48:	f7fe fcfa 	bl	8005940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f4c:	480b      	ldr	r0, [pc, #44]	@ (8006f7c <prvInitialiseTaskLists+0x74>)
 8006f4e:	f7fe fcf7 	bl	8005940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f52:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <prvInitialiseTaskLists+0x78>)
 8006f54:	4a05      	ldr	r2, [pc, #20]	@ (8006f6c <prvInitialiseTaskLists+0x64>)
 8006f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <prvInitialiseTaskLists+0x7c>)
 8006f5a:	4a05      	ldr	r2, [pc, #20]	@ (8006f70 <prvInitialiseTaskLists+0x68>)
 8006f5c:	601a      	str	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200008d0 	.word	0x200008d0
 8006f6c:	20000d30 	.word	0x20000d30
 8006f70:	20000d44 	.word	0x20000d44
 8006f74:	20000d60 	.word	0x20000d60
 8006f78:	20000d74 	.word	0x20000d74
 8006f7c:	20000d8c 	.word	0x20000d8c
 8006f80:	20000d58 	.word	0x20000d58
 8006f84:	20000d5c 	.word	0x20000d5c

08006f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f8e:	e019      	b.n	8006fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f90:	f000 fde2 	bl	8007b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	4b10      	ldr	r3, [pc, #64]	@ (8006fd8 <prvCheckTasksWaitingTermination+0x50>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fd57 	bl	8005a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <prvCheckTasksWaitingTermination+0x54>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	4a0b      	ldr	r2, [pc, #44]	@ (8006fdc <prvCheckTasksWaitingTermination+0x54>)
 8006fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fba:	f000 fdff 	bl	8007bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f810 	bl	8006fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e1      	bne.n	8006f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000d74 	.word	0x20000d74
 8006fdc:	20000da0 	.word	0x20000da0
 8006fe0:	20000d88 	.word	0x20000d88

08006fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d108      	bne.n	8007008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ff9c 	bl	8007f38 <vPortFree>
				vPortFree( pxTCB );
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 ff99 	bl	8007f38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007006:	e019      	b.n	800703c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800700e:	2b01      	cmp	r3, #1
 8007010:	d103      	bne.n	800701a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ff90 	bl	8007f38 <vPortFree>
	}
 8007018:	e010      	b.n	800703c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007020:	2b02      	cmp	r3, #2
 8007022:	d00b      	beq.n	800703c <prvDeleteTCB+0x58>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <prvDeleteTCB+0x54>
	}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704a:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <prvResetNextTaskUnblockTime+0x38>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007054:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <prvResetNextTaskUnblockTime+0x3c>)
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800705c:	e008      	b.n	8007070 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <prvResetNextTaskUnblockTime+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a04      	ldr	r2, [pc, #16]	@ (8007080 <prvResetNextTaskUnblockTime+0x3c>)
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000d58 	.word	0x20000d58
 8007080:	20000dc0 	.word	0x20000dc0

08007084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800708a:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <xTaskGetSchedulerState+0x34>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007092:	2301      	movs	r3, #1
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e008      	b.n	80070aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007098:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <xTaskGetSchedulerState+0x38>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070a0:	2302      	movs	r3, #2
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e001      	b.n	80070aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070aa:	687b      	ldr	r3, [r7, #4]
	}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20000dac 	.word	0x20000dac
 80070bc:	20000dc8 	.word	0x20000dc8

080070c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d058      	beq.n	8007188 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007194 <xTaskPriorityDisinherit+0xd4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d00b      	beq.n	80070f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60bb      	str	r3, [r7, #8]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712a:	429a      	cmp	r2, r3
 800712c:	d02c      	beq.n	8007188 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007132:	2b00      	cmp	r3, #0
 8007134:	d128      	bne.n	8007188 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fc8a 	bl	8005a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007158:	4b0f      	ldr	r3, [pc, #60]	@ (8007198 <xTaskPriorityDisinherit+0xd8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d903      	bls.n	8007168 <xTaskPriorityDisinherit+0xa8>
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	4a0c      	ldr	r2, [pc, #48]	@ (8007198 <xTaskPriorityDisinherit+0xd8>)
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4a09      	ldr	r2, [pc, #36]	@ (800719c <xTaskPriorityDisinherit+0xdc>)
 8007176:	441a      	add	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f7fe fc0b 	bl	800599a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007188:	697b      	ldr	r3, [r7, #20]
	}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200008cc 	.word	0x200008cc
 8007198:	20000da8 	.word	0x20000da8
 800719c:	200008d0 	.word	0x200008d0

080071a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071aa:	4b21      	ldr	r3, [pc, #132]	@ (8007230 <prvAddCurrentTaskToDelayedList+0x90>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b0:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fc4c 	bl	8005a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d10a      	bne.n	80071da <prvAddCurrentTaskToDelayedList+0x3a>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <prvAddCurrentTaskToDelayedList+0x94>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4819      	ldr	r0, [pc, #100]	@ (8007238 <prvAddCurrentTaskToDelayedList+0x98>)
 80071d4:	f7fe fbe1 	bl	800599a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071d8:	e026      	b.n	8007228 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d209      	bcs.n	8007206 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f2:	4b12      	ldr	r3, [pc, #72]	@ (800723c <prvAddCurrentTaskToDelayedList+0x9c>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007234 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7fe fbef 	bl	80059e2 <vListInsert>
}
 8007204:	e010      	b.n	8007228 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007206:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <prvAddCurrentTaskToDelayedList+0x94>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fe fbe5 	bl	80059e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007218:	4b0a      	ldr	r3, [pc, #40]	@ (8007244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	d202      	bcs.n	8007228 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007222:	4a08      	ldr	r2, [pc, #32]	@ (8007244 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000da4 	.word	0x20000da4
 8007234:	200008cc 	.word	0x200008cc
 8007238:	20000d8c 	.word	0x20000d8c
 800723c:	20000d5c 	.word	0x20000d5c
 8007240:	20000d58 	.word	0x20000d58
 8007244:	20000dc0 	.word	0x20000dc0

08007248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	@ 0x28
 800724c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007252:	f000 fb13 	bl	800787c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007256:	4b1d      	ldr	r3, [pc, #116]	@ (80072cc <xTimerCreateTimerTask+0x84>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d021      	beq.n	80072a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007266:	1d3a      	adds	r2, r7, #4
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	f107 030c 	add.w	r3, r7, #12
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fb4b 	bl	800590c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	2302      	movs	r3, #2
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	460a      	mov	r2, r1
 8007288:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <xTimerCreateTimerTask+0x88>)
 800728a:	4812      	ldr	r0, [pc, #72]	@ (80072d4 <xTimerCreateTimerTask+0x8c>)
 800728c:	f7ff f906 	bl	800649c <xTaskCreateStatic>
 8007290:	4603      	mov	r3, r0
 8007292:	4a11      	ldr	r2, [pc, #68]	@ (80072d8 <xTimerCreateTimerTask+0x90>)
 8007294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007296:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <xTimerCreateTimerTask+0x90>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800729e:	2301      	movs	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	613b      	str	r3, [r7, #16]
}
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072c0:	697b      	ldr	r3, [r7, #20]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000dfc 	.word	0x20000dfc
 80072d0:	08008b88 	.word	0x08008b88
 80072d4:	08007415 	.word	0x08007415
 80072d8:	20000e00 	.word	0x20000e00

080072dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	@ 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <xTimerGenericCommand+0x30>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	623b      	str	r3, [r7, #32]
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	e7fd      	b.n	8007308 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800730c:	4b19      	ldr	r3, [pc, #100]	@ (8007374 <xTimerGenericCommand+0x98>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d02a      	beq.n	800736a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b05      	cmp	r3, #5
 8007324:	dc18      	bgt.n	8007358 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007326:	f7ff fead 	bl	8007084 <xTaskGetSchedulerState>
 800732a:	4603      	mov	r3, r0
 800732c:	2b02      	cmp	r3, #2
 800732e:	d109      	bne.n	8007344 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007330:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <xTimerGenericCommand+0x98>)
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	f107 0110 	add.w	r1, r7, #16
 8007338:	2300      	movs	r3, #0
 800733a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733c:	f7fe fcbe 	bl	8005cbc <xQueueGenericSend>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24
 8007342:	e012      	b.n	800736a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007344:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <xTimerGenericCommand+0x98>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	f107 0110 	add.w	r1, r7, #16
 800734c:	2300      	movs	r3, #0
 800734e:	2200      	movs	r2, #0
 8007350:	f7fe fcb4 	bl	8005cbc <xQueueGenericSend>
 8007354:	6278      	str	r0, [r7, #36]	@ 0x24
 8007356:	e008      	b.n	800736a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007358:	4b06      	ldr	r3, [pc, #24]	@ (8007374 <xTimerGenericCommand+0x98>)
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	f107 0110 	add.w	r1, r7, #16
 8007360:	2300      	movs	r3, #0
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	f7fe fdac 	bl	8005ec0 <xQueueGenericSendFromISR>
 8007368:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800736c:	4618      	mov	r0, r3
 800736e:	3728      	adds	r7, #40	@ 0x28
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000dfc 	.word	0x20000dfc

08007378 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af02      	add	r7, sp, #8
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b23      	ldr	r3, [pc, #140]	@ (8007410 <prvProcessExpiredTimer+0x98>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	3304      	adds	r3, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fb5f 	bl	8005a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d023      	beq.n	80073ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	18d1      	adds	r1, r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	6978      	ldr	r0, [r7, #20]
 80073b2:	f000 f8d5 	bl	8007560 <prvInsertTimerInActiveList>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d020      	beq.n	80073fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073bc:	2300      	movs	r3, #0
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	2100      	movs	r1, #0
 80073c6:	6978      	ldr	r0, [r7, #20]
 80073c8:	f7ff ff88 	bl	80072dc <xTimerGenericCommand>
 80073cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	4798      	blx	r3
}
 8007406:	bf00      	nop
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000df4 	.word	0x20000df4

08007414 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f859 	bl	80074d8 <prvGetNextExpireTime>
 8007426:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4619      	mov	r1, r3
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f805 	bl	800743c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007432:	f000 f8d7 	bl	80075e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007436:	bf00      	nop
 8007438:	e7f0      	b.n	800741c <prvTimerTask+0x8>
	...

0800743c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007446:	f7ff fa37 	bl	80068b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f866 	bl	8007520 <prvSampleTimeNow>
 8007454:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d130      	bne.n	80074be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <prvProcessTimerOrBlockTask+0x3c>
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	429a      	cmp	r2, r3
 8007468:	d806      	bhi.n	8007478 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800746a:	f7ff fa33 	bl	80068d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff81 	bl	8007378 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007476:	e024      	b.n	80074c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d008      	beq.n	8007490 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800747e:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <prvProcessTimerOrBlockTask+0x90>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <prvProcessTimerOrBlockTask+0x50>
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <prvProcessTimerOrBlockTask+0x52>
 800748c:	2300      	movs	r3, #0
 800748e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007490:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <prvProcessTimerOrBlockTask+0x94>)
 8007492:	6818      	ldr	r0, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4619      	mov	r1, r3
 800749e:	f7fe ffc9 	bl	8006434 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074a2:	f7ff fa17 	bl	80068d4 <xTaskResumeAll>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <prvProcessTimerOrBlockTask+0x98>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	f3bf 8f6f 	isb	sy
}
 80074bc:	e001      	b.n	80074c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074be:	f7ff fa09 	bl	80068d4 <xTaskResumeAll>
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000df8 	.word	0x20000df8
 80074d0:	20000dfc 	.word	0x20000dfc
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074e0:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <prvGetNextExpireTime+0x44>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <prvGetNextExpireTime+0x16>
 80074ea:	2201      	movs	r2, #1
 80074ec:	e000      	b.n	80074f0 <prvGetNextExpireTime+0x18>
 80074ee:	2200      	movs	r2, #0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074fc:	4b07      	ldr	r3, [pc, #28]	@ (800751c <prvGetNextExpireTime+0x44>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e001      	b.n	800750c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000df4 	.word	0x20000df4

08007520 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007528:	f7ff fa72 	bl	8006a10 <xTaskGetTickCount>
 800752c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <prvSampleTimeNow+0x3c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	429a      	cmp	r2, r3
 8007536:	d205      	bcs.n	8007544 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007538:	f000 f93a 	bl	80077b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e002      	b.n	800754a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800754a:	4a04      	ldr	r2, [pc, #16]	@ (800755c <prvSampleTimeNow+0x3c>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007550:	68fb      	ldr	r3, [r7, #12]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000e04 	.word	0x20000e04

08007560 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d812      	bhi.n	80075ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	429a      	cmp	r2, r3
 8007592:	d302      	bcc.n	800759a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e01b      	b.n	80075d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <prvInsertTimerInActiveList+0x7c>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fe fa1c 	bl	80059e2 <vListInsert>
 80075aa:	e012      	b.n	80075d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d206      	bcs.n	80075c2 <prvInsertTimerInActiveList+0x62>
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d302      	bcc.n	80075c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e007      	b.n	80075d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075c2:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <prvInsertTimerInActiveList+0x80>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f7fe fa08 	bl	80059e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075d2:	697b      	ldr	r3, [r7, #20]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20000df8 	.word	0x20000df8
 80075e0:	20000df4 	.word	0x20000df4

080075e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08e      	sub	sp, #56	@ 0x38
 80075e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ea:	e0ce      	b.n	800778a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da19      	bge.n	8007626 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	3304      	adds	r3, #4
 80075f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	61fb      	str	r3, [r7, #28]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800761c:	6850      	ldr	r0, [r2, #4]
 800761e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007620:	6892      	ldr	r2, [r2, #8]
 8007622:	4611      	mov	r1, r2
 8007624:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f2c0 80ae 	blt.w	800778a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fa08 	bl	8005a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007644:	463b      	mov	r3, r7
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff6a 	bl	8007520 <prvSampleTimeNow>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b09      	cmp	r3, #9
 8007652:	f200 8097 	bhi.w	8007784 <prvProcessReceivedCommands+0x1a0>
 8007656:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <prvProcessReceivedCommands+0x78>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007685 	.word	0x08007685
 8007660:	08007685 	.word	0x08007685
 8007664:	08007685 	.word	0x08007685
 8007668:	080076fb 	.word	0x080076fb
 800766c:	0800770f 	.word	0x0800770f
 8007670:	0800775b 	.word	0x0800775b
 8007674:	08007685 	.word	0x08007685
 8007678:	08007685 	.word	0x08007685
 800767c:	080076fb 	.word	0x080076fb
 8007680:	0800770f 	.word	0x0800770f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	b2da      	uxtb	r2, r3
 8007690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	18d1      	adds	r1, r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076a4:	f7ff ff5c 	bl	8007560 <prvInsertTimerInActiveList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d06c      	beq.n	8007788 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d061      	beq.n	8007788 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	441a      	add	r2, r3
 80076cc:	2300      	movs	r3, #0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	2100      	movs	r1, #0
 80076d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d6:	f7ff fe01 	bl	80072dc <xTimerGenericCommand>
 80076da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d152      	bne.n	8007788 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	61bb      	str	r3, [r7, #24]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	b2da      	uxtb	r2, r3
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800770c:	e03d      	b.n	800778a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	617b      	str	r3, [r7, #20]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	18d1      	adds	r1, r2, r3
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007754:	f7ff ff04 	bl	8007560 <prvInsertTimerInActiveList>
					break;
 8007758:	e017      	b.n	800778a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800776a:	f000 fbe5 	bl	8007f38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800776e:	e00c      	b.n	800778a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007782:	e002      	b.n	800778a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007784:	bf00      	nop
 8007786:	e000      	b.n	800778a <prvProcessReceivedCommands+0x1a6>
					break;
 8007788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800778a:	4b08      	ldr	r3, [pc, #32]	@ (80077ac <prvProcessReceivedCommands+0x1c8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	1d39      	adds	r1, r7, #4
 8007790:	2200      	movs	r2, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fc32 	bl	8005ffc <xQueueReceive>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	f47f af26 	bne.w	80075ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	3730      	adds	r7, #48	@ 0x30
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000dfc 	.word	0x20000dfc

080077b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077b6:	e049      	b.n	800784c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe f93f 	bl	8005a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02f      	beq.n	800784c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4413      	add	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d90e      	bls.n	800781c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800780a:	4b1a      	ldr	r3, [pc, #104]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f7fe f8e4 	bl	80059e2 <vListInsert>
 800781a:	e017      	b.n	800784c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800781c:	2300      	movs	r3, #0
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2300      	movs	r3, #0
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	2100      	movs	r1, #0
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff fd58 	bl	80072dc <xTimerGenericCommand>
 800782c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10b      	bne.n	800784c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	603b      	str	r3, [r7, #0]
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800784c:	4b09      	ldr	r3, [pc, #36]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1b0      	bne.n	80077b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <prvSwitchTimerLists+0xc8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a04      	ldr	r2, [pc, #16]	@ (8007874 <prvSwitchTimerLists+0xc4>)
 8007862:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007864:	4a04      	ldr	r2, [pc, #16]	@ (8007878 <prvSwitchTimerLists+0xc8>)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6013      	str	r3, [r2, #0]
}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000df4 	.word	0x20000df4
 8007878:	20000df8 	.word	0x20000df8

0800787c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007882:	f000 f969 	bl	8007b58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007886:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <prvCheckForValidListAndQueue+0x60>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d120      	bne.n	80078d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800788e:	4814      	ldr	r0, [pc, #80]	@ (80078e0 <prvCheckForValidListAndQueue+0x64>)
 8007890:	f7fe f856 	bl	8005940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007894:	4813      	ldr	r0, [pc, #76]	@ (80078e4 <prvCheckForValidListAndQueue+0x68>)
 8007896:	f7fe f853 	bl	8005940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800789a:	4b13      	ldr	r3, [pc, #76]	@ (80078e8 <prvCheckForValidListAndQueue+0x6c>)
 800789c:	4a10      	ldr	r2, [pc, #64]	@ (80078e0 <prvCheckForValidListAndQueue+0x64>)
 800789e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078a0:	4b12      	ldr	r3, [pc, #72]	@ (80078ec <prvCheckForValidListAndQueue+0x70>)
 80078a2:	4a10      	ldr	r2, [pc, #64]	@ (80078e4 <prvCheckForValidListAndQueue+0x68>)
 80078a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <prvCheckForValidListAndQueue+0x74>)
 80078ac:	4a11      	ldr	r2, [pc, #68]	@ (80078f4 <prvCheckForValidListAndQueue+0x78>)
 80078ae:	2110      	movs	r1, #16
 80078b0:	200a      	movs	r0, #10
 80078b2:	f7fe f963 	bl	8005b7c <xQueueGenericCreateStatic>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <prvCheckForValidListAndQueue+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	490b      	ldr	r1, [pc, #44]	@ (80078f8 <prvCheckForValidListAndQueue+0x7c>)
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fd88 	bl	80063e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f000 f974 	bl	8007bbc <vPortExitCritical>
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000dfc 	.word	0x20000dfc
 80078e0:	20000dcc 	.word	0x20000dcc
 80078e4:	20000de0 	.word	0x20000de0
 80078e8:	20000df4 	.word	0x20000df4
 80078ec:	20000df8 	.word	0x20000df8
 80078f0:	20000ea8 	.word	0x20000ea8
 80078f4:	20000e08 	.word	0x20000e08
 80078f8:	08008b90 	.word	0x08008b90

080078fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3b04      	subs	r3, #4
 800790c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b04      	subs	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0201 	bic.w	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b04      	subs	r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <pxPortInitialiseStack+0x64>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b14      	subs	r3, #20
 8007936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3b04      	subs	r3, #4
 8007942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f06f 0202 	mvn.w	r2, #2
 800794a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3b20      	subs	r3, #32
 8007950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007952:	68fb      	ldr	r3, [r7, #12]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	08007965 	.word	0x08007965

08007964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800796e:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <prvTaskExitError+0x58>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d00b      	beq.n	8007990 <prvTaskExitError+0x2c>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	60fb      	str	r3, [r7, #12]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <prvTaskExitError+0x28>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60bb      	str	r3, [r7, #8]
}
 80079a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079a4:	bf00      	nop
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0fc      	beq.n	80079a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000000c 	.word	0x2000000c

080079c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079c0:	4b07      	ldr	r3, [pc, #28]	@ (80079e0 <pxCurrentTCBConst2>)
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f380 8809 	msr	PSP, r0
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8811 	msr	BASEPRI, r0
 80079da:	4770      	bx	lr
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst2>:
 80079e0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079e8:	4808      	ldr	r0, [pc, #32]	@ (8007a0c <prvPortStartFirstTask+0x24>)
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f380 8808 	msr	MSP, r0
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8814 	msr	CONTROL, r0
 80079fa:	b662      	cpsie	i
 80079fc:	b661      	cpsie	f
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	df00      	svc	0
 8007a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a0a:	bf00      	nop
 8007a0c:	e000ed08 	.word	0xe000ed08

08007a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a16:	4b47      	ldr	r3, [pc, #284]	@ (8007b34 <xPortStartScheduler+0x124>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a47      	ldr	r2, [pc, #284]	@ (8007b38 <xPortStartScheduler+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10b      	bne.n	8007a38 <xPortStartScheduler+0x28>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	e7fd      	b.n	8007a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a38:	4b3e      	ldr	r3, [pc, #248]	@ (8007b34 <xPortStartScheduler+0x124>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b3c <xPortStartScheduler+0x12c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10b      	bne.n	8007a5a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60fb      	str	r3, [r7, #12]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a5a:	4b39      	ldr	r3, [pc, #228]	@ (8007b40 <xPortStartScheduler+0x130>)
 8007a5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	22ff      	movs	r2, #255	@ 0xff
 8007a6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b31      	ldr	r3, [pc, #196]	@ (8007b44 <xPortStartScheduler+0x134>)
 8007a80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a82:	4b31      	ldr	r3, [pc, #196]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007a84:	2207      	movs	r2, #7
 8007a86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a88:	e009      	b.n	8007a9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4a2d      	ldr	r2, [pc, #180]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007a92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa6:	2b80      	cmp	r3, #128	@ 0x80
 8007aa8:	d0ef      	beq.n	8007a8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aaa:	4b27      	ldr	r3, [pc, #156]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1c3 0307 	rsb	r3, r3, #7
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d00b      	beq.n	8007ace <xPortStartScheduler+0xbe>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60bb      	str	r3, [r7, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ace:	4b1e      	ldr	r3, [pc, #120]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ae0:	4a19      	ldr	r2, [pc, #100]	@ (8007b48 <xPortStartScheduler+0x138>)
 8007ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aec:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <xPortStartScheduler+0x13c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a16      	ldr	r2, [pc, #88]	@ (8007b4c <xPortStartScheduler+0x13c>)
 8007af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007af8:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <xPortStartScheduler+0x13c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a13      	ldr	r2, [pc, #76]	@ (8007b4c <xPortStartScheduler+0x13c>)
 8007afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b04:	f000 f8da 	bl	8007cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b08:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <xPortStartScheduler+0x140>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b0e:	f000 f8f9 	bl	8007d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b12:	4b10      	ldr	r3, [pc, #64]	@ (8007b54 <xPortStartScheduler+0x144>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a0f      	ldr	r2, [pc, #60]	@ (8007b54 <xPortStartScheduler+0x144>)
 8007b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b1e:	f7ff ff63 	bl	80079e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b22:	f7ff f83f 	bl	8006ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8007b26:	f7ff ff1d 	bl	8007964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	e000ed00 	.word	0xe000ed00
 8007b38:	410fc271 	.word	0x410fc271
 8007b3c:	410fc270 	.word	0x410fc270
 8007b40:	e000e400 	.word	0xe000e400
 8007b44:	20000ef8 	.word	0x20000ef8
 8007b48:	20000efc 	.word	0x20000efc
 8007b4c:	e000ed20 	.word	0xe000ed20
 8007b50:	2000000c 	.word	0x2000000c
 8007b54:	e000ef34 	.word	0xe000ef34

08007b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b72:	4b10      	ldr	r3, [pc, #64]	@ (8007bb4 <vPortEnterCritical+0x5c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	4a0e      	ldr	r2, [pc, #56]	@ (8007bb4 <vPortEnterCritical+0x5c>)
 8007b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <vPortEnterCritical+0x5c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d110      	bne.n	8007ba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <vPortEnterCritical+0x60>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	603b      	str	r3, [r7, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vPortEnterCritical+0x4a>
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bc2:	4b12      	ldr	r3, [pc, #72]	@ (8007c0c <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <vPortExitCritical+0x26>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	607b      	str	r3, [r7, #4]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007be2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <vPortExitCritical+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	4a08      	ldr	r2, [pc, #32]	@ (8007c0c <vPortExitCritical+0x50>)
 8007bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bec:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <vPortExitCritical+0x50>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <vPortExitCritical+0x44>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	2000000c 	.word	0x2000000c

08007c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c10:	f3ef 8009 	mrs	r0, PSP
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <pxCurrentTCBConst>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f01e 0f10 	tst.w	lr, #16
 8007c20:	bf08      	it	eq
 8007c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c34:	f380 8811 	msr	BASEPRI, r0
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f7fe ffb0 	bl	8006ba4 <vTaskSwitchContext>
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f380 8811 	msr	BASEPRI, r0
 8007c4c:	bc09      	pop	{r0, r3}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	f01e 0f10 	tst.w	lr, #16
 8007c5a:	bf08      	it	eq
 8007c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c60:	f380 8809 	msr	PSP, r0
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst>:
 8007c70:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c92:	f7fe fecd 	bl	8006a30 <xTaskIncrementTick>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <xPortSysTickHandler+0x40>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <vPortSetupTimerInterrupt+0x38>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf8 <vPortSetupTimerInterrupt+0x3c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cfc <vPortSetupTimerInterrupt+0x40>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <vPortSetupTimerInterrupt+0x44>)
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cde:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000e010 	.word	0xe000e010
 8007cf4:	e000e018 	.word	0xe000e018
 8007cf8:	20000000 	.word	0x20000000
 8007cfc:	10624dd3 	.word	0x10624dd3
 8007d00:	e000e014 	.word	0xe000e014

08007d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d14 <vPortEnableVFP+0x10>
 8007d08:	6801      	ldr	r1, [r0, #0]
 8007d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d0e:	6001      	str	r1, [r0, #0]
 8007d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d12:	bf00      	nop
 8007d14:	e000ed88 	.word	0xe000ed88

08007d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d915      	bls.n	8007d56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d2a:	4a18      	ldr	r2, [pc, #96]	@ (8007d8c <vPortValidateInterruptPriority+0x74>)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d34:	4b16      	ldr	r3, [pc, #88]	@ (8007d90 <vPortValidateInterruptPriority+0x78>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	7afa      	ldrb	r2, [r7, #11]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d20b      	bcs.n	8007d56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d56:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <vPortValidateInterruptPriority+0x7c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d98 <vPortValidateInterruptPriority+0x80>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d90b      	bls.n	8007d7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	603b      	str	r3, [r7, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	e7fd      	b.n	8007d7a <vPortValidateInterruptPriority+0x62>
	}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	e000e3f0 	.word	0xe000e3f0
 8007d90:	20000ef8 	.word	0x20000ef8
 8007d94:	e000ed0c 	.word	0xe000ed0c
 8007d98:	20000efc 	.word	0x20000efc

08007d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007da8:	f7fe fd86 	bl	80068b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dac:	4b5c      	ldr	r3, [pc, #368]	@ (8007f20 <pvPortMalloc+0x184>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007db4:	f000 f924 	bl	8008000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007db8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f24 <pvPortMalloc+0x188>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f040 8095 	bne.w	8007ef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01e      	beq.n	8007e0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007dcc:	2208      	movs	r2, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d015      	beq.n	8007e0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	3308      	adds	r3, #8
 8007de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <pvPortMalloc+0x6e>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	617b      	str	r3, [r7, #20]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d06f      	beq.n	8007ef0 <pvPortMalloc+0x154>
 8007e10:	4b45      	ldr	r3, [pc, #276]	@ (8007f28 <pvPortMalloc+0x18c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d86a      	bhi.n	8007ef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e1a:	4b44      	ldr	r3, [pc, #272]	@ (8007f2c <pvPortMalloc+0x190>)
 8007e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e1e:	4b43      	ldr	r3, [pc, #268]	@ (8007f2c <pvPortMalloc+0x190>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e24:	e004      	b.n	8007e30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d903      	bls.n	8007e42 <pvPortMalloc+0xa6>
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f1      	bne.n	8007e26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e42:	4b37      	ldr	r3, [pc, #220]	@ (8007f20 <pvPortMalloc+0x184>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d051      	beq.n	8007ef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2208      	movs	r2, #8
 8007e52:	4413      	add	r3, r2
 8007e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	1ad2      	subs	r2, r2, r3
 8007e66:	2308      	movs	r3, #8
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d920      	bls.n	8007eb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <pvPortMalloc+0xfc>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	613b      	str	r3, [r7, #16]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eaa:	69b8      	ldr	r0, [r7, #24]
 8007eac:	f000 f90a 	bl	80080c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f28 <pvPortMalloc+0x18c>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	4a1b      	ldr	r2, [pc, #108]	@ (8007f28 <pvPortMalloc+0x18c>)
 8007ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8007f28 <pvPortMalloc+0x18c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f30 <pvPortMalloc+0x194>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d203      	bcs.n	8007ed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007eca:	4b17      	ldr	r3, [pc, #92]	@ (8007f28 <pvPortMalloc+0x18c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a18      	ldr	r2, [pc, #96]	@ (8007f30 <pvPortMalloc+0x194>)
 8007ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	4b13      	ldr	r3, [pc, #76]	@ (8007f24 <pvPortMalloc+0x188>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ee6:	4b13      	ldr	r3, [pc, #76]	@ (8007f34 <pvPortMalloc+0x198>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a11      	ldr	r2, [pc, #68]	@ (8007f34 <pvPortMalloc+0x198>)
 8007eee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ef0:	f7fe fcf0 	bl	80068d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <pvPortMalloc+0x17a>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60fb      	str	r3, [r7, #12]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <pvPortMalloc+0x176>
	return pvReturn;
 8007f16:	69fb      	ldr	r3, [r7, #28]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3728      	adds	r7, #40	@ 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20001ac0 	.word	0x20001ac0
 8007f24:	20001ad4 	.word	0x20001ad4
 8007f28:	20001ac4 	.word	0x20001ac4
 8007f2c:	20001ab8 	.word	0x20001ab8
 8007f30:	20001ac8 	.word	0x20001ac8
 8007f34:	20001acc 	.word	0x20001acc

08007f38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d04f      	beq.n	8007fea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f4a:	2308      	movs	r3, #8
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4413      	add	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b25      	ldr	r3, [pc, #148]	@ (8007ff4 <vPortFree+0xbc>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <vPortFree+0x46>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <vPortFree+0x66>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	4b14      	ldr	r3, [pc, #80]	@ (8007ff4 <vPortFree+0xbc>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01e      	beq.n	8007fea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11a      	bne.n	8007fea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff4 <vPortFree+0xbc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc4:	f7fe fc78 	bl	80068b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <vPortFree+0xc0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	4a09      	ldr	r2, [pc, #36]	@ (8007ff8 <vPortFree+0xc0>)
 8007fd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f000 f874 	bl	80080c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <vPortFree+0xc4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	4a06      	ldr	r2, [pc, #24]	@ (8007ffc <vPortFree+0xc4>)
 8007fe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fe6:	f7fe fc75 	bl	80068d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fea:	bf00      	nop
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001ad4 	.word	0x20001ad4
 8007ff8:	20001ac4 	.word	0x20001ac4
 8007ffc:	20001ad0 	.word	0x20001ad0

08008000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008006:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800800a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800800c:	4b27      	ldr	r3, [pc, #156]	@ (80080ac <prvHeapInit+0xac>)
 800800e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00c      	beq.n	8008034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3307      	adds	r3, #7
 800801e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0307 	bic.w	r3, r3, #7
 8008026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	4a1f      	ldr	r2, [pc, #124]	@ (80080ac <prvHeapInit+0xac>)
 8008030:	4413      	add	r3, r2
 8008032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008038:	4a1d      	ldr	r2, [pc, #116]	@ (80080b0 <prvHeapInit+0xb0>)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800803e:	4b1c      	ldr	r3, [pc, #112]	@ (80080b0 <prvHeapInit+0xb0>)
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	4413      	add	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800804c:	2208      	movs	r2, #8
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a15      	ldr	r2, [pc, #84]	@ (80080b4 <prvHeapInit+0xb4>)
 8008060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008062:	4b14      	ldr	r3, [pc, #80]	@ (80080b4 <prvHeapInit+0xb4>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2200      	movs	r2, #0
 8008068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <prvHeapInit+0xb4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008080:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <prvHeapInit+0xb4>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	4a0a      	ldr	r2, [pc, #40]	@ (80080b8 <prvHeapInit+0xb8>)
 800808e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	4a09      	ldr	r2, [pc, #36]	@ (80080bc <prvHeapInit+0xbc>)
 8008096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008098:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <prvHeapInit+0xc0>)
 800809a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800809e:	601a      	str	r2, [r3, #0]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000f00 	.word	0x20000f00
 80080b0:	20001ab8 	.word	0x20001ab8
 80080b4:	20001ac0 	.word	0x20001ac0
 80080b8:	20001ac8 	.word	0x20001ac8
 80080bc:	20001ac4 	.word	0x20001ac4
 80080c0:	20001ad4 	.word	0x20001ad4

080080c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080cc:	4b28      	ldr	r3, [pc, #160]	@ (8008170 <prvInsertBlockIntoFreeList+0xac>)
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e002      	b.n	80080d8 <prvInsertBlockIntoFreeList+0x14>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d8f7      	bhi.n	80080d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d108      	bne.n	8008106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	441a      	add	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d118      	bne.n	800814c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b15      	ldr	r3, [pc, #84]	@ (8008174 <prvInsertBlockIntoFreeList+0xb0>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d00d      	beq.n	8008142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	441a      	add	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e008      	b.n	8008154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008142:	4b0c      	ldr	r3, [pc, #48]	@ (8008174 <prvInsertBlockIntoFreeList+0xb0>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e003      	b.n	8008154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	d002      	beq.n	8008162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20001ab8 	.word	0x20001ab8
 8008174:	20001ac0 	.word	0x20001ac0

08008178 <std>:
 8008178:	2300      	movs	r3, #0
 800817a:	b510      	push	{r4, lr}
 800817c:	4604      	mov	r4, r0
 800817e:	e9c0 3300 	strd	r3, r3, [r0]
 8008182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008186:	6083      	str	r3, [r0, #8]
 8008188:	8181      	strh	r1, [r0, #12]
 800818a:	6643      	str	r3, [r0, #100]	@ 0x64
 800818c:	81c2      	strh	r2, [r0, #14]
 800818e:	6183      	str	r3, [r0, #24]
 8008190:	4619      	mov	r1, r3
 8008192:	2208      	movs	r2, #8
 8008194:	305c      	adds	r0, #92	@ 0x5c
 8008196:	f000 f9e7 	bl	8008568 <memset>
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x58>)
 800819c:	6263      	str	r3, [r4, #36]	@ 0x24
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x5c>)
 80081a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <std+0x60>)
 80081a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <std+0x64>)
 80081a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80081aa:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <std+0x68>)
 80081ac:	6224      	str	r4, [r4, #32]
 80081ae:	429c      	cmp	r4, r3
 80081b0:	d006      	beq.n	80081c0 <std+0x48>
 80081b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081b6:	4294      	cmp	r4, r2
 80081b8:	d002      	beq.n	80081c0 <std+0x48>
 80081ba:	33d0      	adds	r3, #208	@ 0xd0
 80081bc:	429c      	cmp	r4, r3
 80081be:	d105      	bne.n	80081cc <std+0x54>
 80081c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c8:	f000 ba46 	b.w	8008658 <__retarget_lock_init_recursive>
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	bf00      	nop
 80081d0:	080083b9 	.word	0x080083b9
 80081d4:	080083db 	.word	0x080083db
 80081d8:	08008413 	.word	0x08008413
 80081dc:	08008437 	.word	0x08008437
 80081e0:	20001ad8 	.word	0x20001ad8

080081e4 <stdio_exit_handler>:
 80081e4:	4a02      	ldr	r2, [pc, #8]	@ (80081f0 <stdio_exit_handler+0xc>)
 80081e6:	4903      	ldr	r1, [pc, #12]	@ (80081f4 <stdio_exit_handler+0x10>)
 80081e8:	4803      	ldr	r0, [pc, #12]	@ (80081f8 <stdio_exit_handler+0x14>)
 80081ea:	f000 b869 	b.w	80082c0 <_fwalk_sglue>
 80081ee:	bf00      	nop
 80081f0:	20000010 	.word	0x20000010
 80081f4:	08008975 	.word	0x08008975
 80081f8:	20000020 	.word	0x20000020

080081fc <cleanup_stdio>:
 80081fc:	6841      	ldr	r1, [r0, #4]
 80081fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <cleanup_stdio+0x34>)
 8008200:	4299      	cmp	r1, r3
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	d001      	beq.n	800820c <cleanup_stdio+0x10>
 8008208:	f000 fbb4 	bl	8008974 <_fflush_r>
 800820c:	68a1      	ldr	r1, [r4, #8]
 800820e:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <cleanup_stdio+0x38>)
 8008210:	4299      	cmp	r1, r3
 8008212:	d002      	beq.n	800821a <cleanup_stdio+0x1e>
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fbad 	bl	8008974 <_fflush_r>
 800821a:	68e1      	ldr	r1, [r4, #12]
 800821c:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <cleanup_stdio+0x3c>)
 800821e:	4299      	cmp	r1, r3
 8008220:	d004      	beq.n	800822c <cleanup_stdio+0x30>
 8008222:	4620      	mov	r0, r4
 8008224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008228:	f000 bba4 	b.w	8008974 <_fflush_r>
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	20001ad8 	.word	0x20001ad8
 8008234:	20001b40 	.word	0x20001b40
 8008238:	20001ba8 	.word	0x20001ba8

0800823c <global_stdio_init.part.0>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4b0b      	ldr	r3, [pc, #44]	@ (800826c <global_stdio_init.part.0+0x30>)
 8008240:	4c0b      	ldr	r4, [pc, #44]	@ (8008270 <global_stdio_init.part.0+0x34>)
 8008242:	4a0c      	ldr	r2, [pc, #48]	@ (8008274 <global_stdio_init.part.0+0x38>)
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	4620      	mov	r0, r4
 8008248:	2200      	movs	r2, #0
 800824a:	2104      	movs	r1, #4
 800824c:	f7ff ff94 	bl	8008178 <std>
 8008250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008254:	2201      	movs	r2, #1
 8008256:	2109      	movs	r1, #9
 8008258:	f7ff ff8e 	bl	8008178 <std>
 800825c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008260:	2202      	movs	r2, #2
 8008262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008266:	2112      	movs	r1, #18
 8008268:	f7ff bf86 	b.w	8008178 <std>
 800826c:	20001c10 	.word	0x20001c10
 8008270:	20001ad8 	.word	0x20001ad8
 8008274:	080081e5 	.word	0x080081e5

08008278 <__sfp_lock_acquire>:
 8008278:	4801      	ldr	r0, [pc, #4]	@ (8008280 <__sfp_lock_acquire+0x8>)
 800827a:	f000 b9ee 	b.w	800865a <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	20001c19 	.word	0x20001c19

08008284 <__sfp_lock_release>:
 8008284:	4801      	ldr	r0, [pc, #4]	@ (800828c <__sfp_lock_release+0x8>)
 8008286:	f000 b9e9 	b.w	800865c <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	20001c19 	.word	0x20001c19

08008290 <__sinit>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	f7ff fff0 	bl	8008278 <__sfp_lock_acquire>
 8008298:	6a23      	ldr	r3, [r4, #32]
 800829a:	b11b      	cbz	r3, 80082a4 <__sinit+0x14>
 800829c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a0:	f7ff bff0 	b.w	8008284 <__sfp_lock_release>
 80082a4:	4b04      	ldr	r3, [pc, #16]	@ (80082b8 <__sinit+0x28>)
 80082a6:	6223      	str	r3, [r4, #32]
 80082a8:	4b04      	ldr	r3, [pc, #16]	@ (80082bc <__sinit+0x2c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f5      	bne.n	800829c <__sinit+0xc>
 80082b0:	f7ff ffc4 	bl	800823c <global_stdio_init.part.0>
 80082b4:	e7f2      	b.n	800829c <__sinit+0xc>
 80082b6:	bf00      	nop
 80082b8:	080081fd 	.word	0x080081fd
 80082bc:	20001c10 	.word	0x20001c10

080082c0 <_fwalk_sglue>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	4607      	mov	r7, r0
 80082c6:	4688      	mov	r8, r1
 80082c8:	4614      	mov	r4, r2
 80082ca:	2600      	movs	r6, #0
 80082cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082d0:	f1b9 0901 	subs.w	r9, r9, #1
 80082d4:	d505      	bpl.n	80082e2 <_fwalk_sglue+0x22>
 80082d6:	6824      	ldr	r4, [r4, #0]
 80082d8:	2c00      	cmp	r4, #0
 80082da:	d1f7      	bne.n	80082cc <_fwalk_sglue+0xc>
 80082dc:	4630      	mov	r0, r6
 80082de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d907      	bls.n	80082f8 <_fwalk_sglue+0x38>
 80082e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ec:	3301      	adds	r3, #1
 80082ee:	d003      	beq.n	80082f8 <_fwalk_sglue+0x38>
 80082f0:	4629      	mov	r1, r5
 80082f2:	4638      	mov	r0, r7
 80082f4:	47c0      	blx	r8
 80082f6:	4306      	orrs	r6, r0
 80082f8:	3568      	adds	r5, #104	@ 0x68
 80082fa:	e7e9      	b.n	80082d0 <_fwalk_sglue+0x10>

080082fc <_puts_r>:
 80082fc:	6a03      	ldr	r3, [r0, #32]
 80082fe:	b570      	push	{r4, r5, r6, lr}
 8008300:	6884      	ldr	r4, [r0, #8]
 8008302:	4605      	mov	r5, r0
 8008304:	460e      	mov	r6, r1
 8008306:	b90b      	cbnz	r3, 800830c <_puts_r+0x10>
 8008308:	f7ff ffc2 	bl	8008290 <__sinit>
 800830c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800830e:	07db      	lsls	r3, r3, #31
 8008310:	d405      	bmi.n	800831e <_puts_r+0x22>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	0598      	lsls	r0, r3, #22
 8008316:	d402      	bmi.n	800831e <_puts_r+0x22>
 8008318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800831a:	f000 f99e 	bl	800865a <__retarget_lock_acquire_recursive>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d502      	bpl.n	800832a <_puts_r+0x2e>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d135      	bne.n	8008396 <_puts_r+0x9a>
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f8c5 	bl	80084bc <__swsetup_r>
 8008332:	b380      	cbz	r0, 8008396 <_puts_r+0x9a>
 8008334:	f04f 35ff 	mov.w	r5, #4294967295
 8008338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800833a:	07da      	lsls	r2, r3, #31
 800833c:	d405      	bmi.n	800834a <_puts_r+0x4e>
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	059b      	lsls	r3, r3, #22
 8008342:	d402      	bmi.n	800834a <_puts_r+0x4e>
 8008344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008346:	f000 f989 	bl	800865c <__retarget_lock_release_recursive>
 800834a:	4628      	mov	r0, r5
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	2b00      	cmp	r3, #0
 8008350:	da04      	bge.n	800835c <_puts_r+0x60>
 8008352:	69a2      	ldr	r2, [r4, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	dc17      	bgt.n	8008388 <_puts_r+0x8c>
 8008358:	290a      	cmp	r1, #10
 800835a:	d015      	beq.n	8008388 <_puts_r+0x8c>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	7019      	strb	r1, [r3, #0]
 8008364:	68a3      	ldr	r3, [r4, #8]
 8008366:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800836a:	3b01      	subs	r3, #1
 800836c:	60a3      	str	r3, [r4, #8]
 800836e:	2900      	cmp	r1, #0
 8008370:	d1ed      	bne.n	800834e <_puts_r+0x52>
 8008372:	2b00      	cmp	r3, #0
 8008374:	da11      	bge.n	800839a <_puts_r+0x9e>
 8008376:	4622      	mov	r2, r4
 8008378:	210a      	movs	r1, #10
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f85f 	bl	800843e <__swbuf_r>
 8008380:	3001      	adds	r0, #1
 8008382:	d0d7      	beq.n	8008334 <_puts_r+0x38>
 8008384:	250a      	movs	r5, #10
 8008386:	e7d7      	b.n	8008338 <_puts_r+0x3c>
 8008388:	4622      	mov	r2, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f857 	bl	800843e <__swbuf_r>
 8008390:	3001      	adds	r0, #1
 8008392:	d1e7      	bne.n	8008364 <_puts_r+0x68>
 8008394:	e7ce      	b.n	8008334 <_puts_r+0x38>
 8008396:	3e01      	subs	r6, #1
 8008398:	e7e4      	b.n	8008364 <_puts_r+0x68>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	6022      	str	r2, [r4, #0]
 80083a0:	220a      	movs	r2, #10
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e7ee      	b.n	8008384 <_puts_r+0x88>
	...

080083a8 <puts>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	@ (80083b4 <puts+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f7ff bfa5 	b.w	80082fc <_puts_r>
 80083b2:	bf00      	nop
 80083b4:	2000001c 	.word	0x2000001c

080083b8 <__sread>:
 80083b8:	b510      	push	{r4, lr}
 80083ba:	460c      	mov	r4, r1
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	f000 f8fc 	bl	80085bc <_read_r>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	bfab      	itete	ge
 80083c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083ca:	89a3      	ldrhlt	r3, [r4, #12]
 80083cc:	181b      	addge	r3, r3, r0
 80083ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083d2:	bfac      	ite	ge
 80083d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083d6:	81a3      	strhlt	r3, [r4, #12]
 80083d8:	bd10      	pop	{r4, pc}

080083da <__swrite>:
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	461f      	mov	r7, r3
 80083e0:	898b      	ldrh	r3, [r1, #12]
 80083e2:	05db      	lsls	r3, r3, #23
 80083e4:	4605      	mov	r5, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	4616      	mov	r6, r2
 80083ea:	d505      	bpl.n	80083f8 <__swrite+0x1e>
 80083ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f0:	2302      	movs	r3, #2
 80083f2:	2200      	movs	r2, #0
 80083f4:	f000 f8d0 	bl	8008598 <_lseek_r>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	4632      	mov	r2, r6
 8008406:	463b      	mov	r3, r7
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	f000 b8e7 	b.w	80085e0 <_write_r>

08008412 <__sseek>:
 8008412:	b510      	push	{r4, lr}
 8008414:	460c      	mov	r4, r1
 8008416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841a:	f000 f8bd 	bl	8008598 <_lseek_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	bf15      	itete	ne
 8008424:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800842a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800842e:	81a3      	strheq	r3, [r4, #12]
 8008430:	bf18      	it	ne
 8008432:	81a3      	strhne	r3, [r4, #12]
 8008434:	bd10      	pop	{r4, pc}

08008436 <__sclose>:
 8008436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843a:	f000 b89d 	b.w	8008578 <_close_r>

0800843e <__swbuf_r>:
 800843e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008440:	460e      	mov	r6, r1
 8008442:	4614      	mov	r4, r2
 8008444:	4605      	mov	r5, r0
 8008446:	b118      	cbz	r0, 8008450 <__swbuf_r+0x12>
 8008448:	6a03      	ldr	r3, [r0, #32]
 800844a:	b90b      	cbnz	r3, 8008450 <__swbuf_r+0x12>
 800844c:	f7ff ff20 	bl	8008290 <__sinit>
 8008450:	69a3      	ldr	r3, [r4, #24]
 8008452:	60a3      	str	r3, [r4, #8]
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	071a      	lsls	r2, r3, #28
 8008458:	d501      	bpl.n	800845e <__swbuf_r+0x20>
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	b943      	cbnz	r3, 8008470 <__swbuf_r+0x32>
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f000 f82b 	bl	80084bc <__swsetup_r>
 8008466:	b118      	cbz	r0, 8008470 <__swbuf_r+0x32>
 8008468:	f04f 37ff 	mov.w	r7, #4294967295
 800846c:	4638      	mov	r0, r7
 800846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	6922      	ldr	r2, [r4, #16]
 8008474:	1a98      	subs	r0, r3, r2
 8008476:	6963      	ldr	r3, [r4, #20]
 8008478:	b2f6      	uxtb	r6, r6
 800847a:	4283      	cmp	r3, r0
 800847c:	4637      	mov	r7, r6
 800847e:	dc05      	bgt.n	800848c <__swbuf_r+0x4e>
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fa76 	bl	8008974 <_fflush_r>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1ed      	bne.n	8008468 <__swbuf_r+0x2a>
 800848c:	68a3      	ldr	r3, [r4, #8]
 800848e:	3b01      	subs	r3, #1
 8008490:	60a3      	str	r3, [r4, #8]
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	701e      	strb	r6, [r3, #0]
 800849a:	6962      	ldr	r2, [r4, #20]
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	429a      	cmp	r2, r3
 80084a0:	d004      	beq.n	80084ac <__swbuf_r+0x6e>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	07db      	lsls	r3, r3, #31
 80084a6:	d5e1      	bpl.n	800846c <__swbuf_r+0x2e>
 80084a8:	2e0a      	cmp	r6, #10
 80084aa:	d1df      	bne.n	800846c <__swbuf_r+0x2e>
 80084ac:	4621      	mov	r1, r4
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fa60 	bl	8008974 <_fflush_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d0d9      	beq.n	800846c <__swbuf_r+0x2e>
 80084b8:	e7d6      	b.n	8008468 <__swbuf_r+0x2a>
	...

080084bc <__swsetup_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4b29      	ldr	r3, [pc, #164]	@ (8008564 <__swsetup_r+0xa8>)
 80084c0:	4605      	mov	r5, r0
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	460c      	mov	r4, r1
 80084c6:	b118      	cbz	r0, 80084d0 <__swsetup_r+0x14>
 80084c8:	6a03      	ldr	r3, [r0, #32]
 80084ca:	b90b      	cbnz	r3, 80084d0 <__swsetup_r+0x14>
 80084cc:	f7ff fee0 	bl	8008290 <__sinit>
 80084d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d4:	0719      	lsls	r1, r3, #28
 80084d6:	d422      	bmi.n	800851e <__swsetup_r+0x62>
 80084d8:	06da      	lsls	r2, r3, #27
 80084da:	d407      	bmi.n	80084ec <__swsetup_r+0x30>
 80084dc:	2209      	movs	r2, #9
 80084de:	602a      	str	r2, [r5, #0]
 80084e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ea:	e033      	b.n	8008554 <__swsetup_r+0x98>
 80084ec:	0758      	lsls	r0, r3, #29
 80084ee:	d512      	bpl.n	8008516 <__swsetup_r+0x5a>
 80084f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084f2:	b141      	cbz	r1, 8008506 <__swsetup_r+0x4a>
 80084f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084f8:	4299      	cmp	r1, r3
 80084fa:	d002      	beq.n	8008502 <__swsetup_r+0x46>
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 f8bd 	bl	800867c <_free_r>
 8008502:	2300      	movs	r3, #0
 8008504:	6363      	str	r3, [r4, #52]	@ 0x34
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	2300      	movs	r3, #0
 8008510:	6063      	str	r3, [r4, #4]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	f043 0308 	orr.w	r3, r3, #8
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	b94b      	cbnz	r3, 8008536 <__swsetup_r+0x7a>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852c:	d003      	beq.n	8008536 <__swsetup_r+0x7a>
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 fa6d 	bl	8008a10 <__smakebuf_r>
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	f013 0201 	ands.w	r2, r3, #1
 800853e:	d00a      	beq.n	8008556 <__swsetup_r+0x9a>
 8008540:	2200      	movs	r2, #0
 8008542:	60a2      	str	r2, [r4, #8]
 8008544:	6962      	ldr	r2, [r4, #20]
 8008546:	4252      	negs	r2, r2
 8008548:	61a2      	str	r2, [r4, #24]
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	b942      	cbnz	r2, 8008560 <__swsetup_r+0xa4>
 800854e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008552:	d1c5      	bne.n	80084e0 <__swsetup_r+0x24>
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	0799      	lsls	r1, r3, #30
 8008558:	bf58      	it	pl
 800855a:	6962      	ldrpl	r2, [r4, #20]
 800855c:	60a2      	str	r2, [r4, #8]
 800855e:	e7f4      	b.n	800854a <__swsetup_r+0x8e>
 8008560:	2000      	movs	r0, #0
 8008562:	e7f7      	b.n	8008554 <__swsetup_r+0x98>
 8008564:	2000001c 	.word	0x2000001c

08008568 <memset>:
 8008568:	4402      	add	r2, r0
 800856a:	4603      	mov	r3, r0
 800856c:	4293      	cmp	r3, r2
 800856e:	d100      	bne.n	8008572 <memset+0xa>
 8008570:	4770      	bx	lr
 8008572:	f803 1b01 	strb.w	r1, [r3], #1
 8008576:	e7f9      	b.n	800856c <memset+0x4>

08008578 <_close_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4d06      	ldr	r5, [pc, #24]	@ (8008594 <_close_r+0x1c>)
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	602b      	str	r3, [r5, #0]
 8008584:	f7f8 fc87 	bl	8000e96 <_close>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_close_r+0x1a>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_close_r+0x1a>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20001c14 	.word	0x20001c14

08008598 <_lseek_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d07      	ldr	r5, [pc, #28]	@ (80085b8 <_lseek_r+0x20>)
 800859c:	4604      	mov	r4, r0
 800859e:	4608      	mov	r0, r1
 80085a0:	4611      	mov	r1, r2
 80085a2:	2200      	movs	r2, #0
 80085a4:	602a      	str	r2, [r5, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	f7f8 fc9c 	bl	8000ee4 <_lseek>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_lseek_r+0x1e>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_lseek_r+0x1e>
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20001c14 	.word	0x20001c14

080085bc <_read_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d07      	ldr	r5, [pc, #28]	@ (80085dc <_read_r+0x20>)
 80085c0:	4604      	mov	r4, r0
 80085c2:	4608      	mov	r0, r1
 80085c4:	4611      	mov	r1, r2
 80085c6:	2200      	movs	r2, #0
 80085c8:	602a      	str	r2, [r5, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f7f8 fc46 	bl	8000e5c <_read>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_read_r+0x1e>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_read_r+0x1e>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	20001c14 	.word	0x20001c14

080085e0 <_write_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d07      	ldr	r5, [pc, #28]	@ (8008600 <_write_r+0x20>)
 80085e4:	4604      	mov	r4, r0
 80085e6:	4608      	mov	r0, r1
 80085e8:	4611      	mov	r1, r2
 80085ea:	2200      	movs	r2, #0
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f7f8 f9f6 	bl	80009e0 <_write>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_write_r+0x1e>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_write_r+0x1e>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20001c14 	.word	0x20001c14

08008604 <__errno>:
 8008604:	4b01      	ldr	r3, [pc, #4]	@ (800860c <__errno+0x8>)
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	2000001c 	.word	0x2000001c

08008610 <__libc_init_array>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	4d0d      	ldr	r5, [pc, #52]	@ (8008648 <__libc_init_array+0x38>)
 8008614:	4c0d      	ldr	r4, [pc, #52]	@ (800864c <__libc_init_array+0x3c>)
 8008616:	1b64      	subs	r4, r4, r5
 8008618:	10a4      	asrs	r4, r4, #2
 800861a:	2600      	movs	r6, #0
 800861c:	42a6      	cmp	r6, r4
 800861e:	d109      	bne.n	8008634 <__libc_init_array+0x24>
 8008620:	4d0b      	ldr	r5, [pc, #44]	@ (8008650 <__libc_init_array+0x40>)
 8008622:	4c0c      	ldr	r4, [pc, #48]	@ (8008654 <__libc_init_array+0x44>)
 8008624:	f000 fa62 	bl	8008aec <_init>
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	2600      	movs	r6, #0
 800862e:	42a6      	cmp	r6, r4
 8008630:	d105      	bne.n	800863e <__libc_init_array+0x2e>
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	f855 3b04 	ldr.w	r3, [r5], #4
 8008638:	4798      	blx	r3
 800863a:	3601      	adds	r6, #1
 800863c:	e7ee      	b.n	800861c <__libc_init_array+0xc>
 800863e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008642:	4798      	blx	r3
 8008644:	3601      	adds	r6, #1
 8008646:	e7f2      	b.n	800862e <__libc_init_array+0x1e>
 8008648:	08008c30 	.word	0x08008c30
 800864c:	08008c30 	.word	0x08008c30
 8008650:	08008c30 	.word	0x08008c30
 8008654:	08008c34 	.word	0x08008c34

08008658 <__retarget_lock_init_recursive>:
 8008658:	4770      	bx	lr

0800865a <__retarget_lock_acquire_recursive>:
 800865a:	4770      	bx	lr

0800865c <__retarget_lock_release_recursive>:
 800865c:	4770      	bx	lr

0800865e <memcpy>:
 800865e:	440a      	add	r2, r1
 8008660:	4291      	cmp	r1, r2
 8008662:	f100 33ff 	add.w	r3, r0, #4294967295
 8008666:	d100      	bne.n	800866a <memcpy+0xc>
 8008668:	4770      	bx	lr
 800866a:	b510      	push	{r4, lr}
 800866c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008674:	4291      	cmp	r1, r2
 8008676:	d1f9      	bne.n	800866c <memcpy+0xe>
 8008678:	bd10      	pop	{r4, pc}
	...

0800867c <_free_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4605      	mov	r5, r0
 8008680:	2900      	cmp	r1, #0
 8008682:	d041      	beq.n	8008708 <_free_r+0x8c>
 8008684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008688:	1f0c      	subs	r4, r1, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	bfb8      	it	lt
 800868e:	18e4      	addlt	r4, r4, r3
 8008690:	f000 f8e0 	bl	8008854 <__malloc_lock>
 8008694:	4a1d      	ldr	r2, [pc, #116]	@ (800870c <_free_r+0x90>)
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	b933      	cbnz	r3, 80086a8 <_free_r+0x2c>
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	6014      	str	r4, [r2, #0]
 800869e:	4628      	mov	r0, r5
 80086a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a4:	f000 b8dc 	b.w	8008860 <__malloc_unlock>
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d908      	bls.n	80086be <_free_r+0x42>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	1821      	adds	r1, r4, r0
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf01      	itttt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	1809      	addeq	r1, r1, r0
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	e7ed      	b.n	800869a <_free_r+0x1e>
 80086be:	461a      	mov	r2, r3
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b10b      	cbz	r3, 80086c8 <_free_r+0x4c>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d9fa      	bls.n	80086be <_free_r+0x42>
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	1850      	adds	r0, r2, r1
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d10b      	bne.n	80086e8 <_free_r+0x6c>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	4401      	add	r1, r0
 80086d4:	1850      	adds	r0, r2, r1
 80086d6:	4283      	cmp	r3, r0
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	d1e0      	bne.n	800869e <_free_r+0x22>
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	6053      	str	r3, [r2, #4]
 80086e2:	4408      	add	r0, r1
 80086e4:	6010      	str	r0, [r2, #0]
 80086e6:	e7da      	b.n	800869e <_free_r+0x22>
 80086e8:	d902      	bls.n	80086f0 <_free_r+0x74>
 80086ea:	230c      	movs	r3, #12
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	e7d6      	b.n	800869e <_free_r+0x22>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	1821      	adds	r1, r4, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf04      	itt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	bf04      	itt	eq
 8008700:	1809      	addeq	r1, r1, r0
 8008702:	6021      	streq	r1, [r4, #0]
 8008704:	6054      	str	r4, [r2, #4]
 8008706:	e7ca      	b.n	800869e <_free_r+0x22>
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	20001c20 	.word	0x20001c20

08008710 <sbrk_aligned>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4e0f      	ldr	r6, [pc, #60]	@ (8008750 <sbrk_aligned+0x40>)
 8008714:	460c      	mov	r4, r1
 8008716:	6831      	ldr	r1, [r6, #0]
 8008718:	4605      	mov	r5, r0
 800871a:	b911      	cbnz	r1, 8008722 <sbrk_aligned+0x12>
 800871c:	f000 f9d6 	bl	8008acc <_sbrk_r>
 8008720:	6030      	str	r0, [r6, #0]
 8008722:	4621      	mov	r1, r4
 8008724:	4628      	mov	r0, r5
 8008726:	f000 f9d1 	bl	8008acc <_sbrk_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	d103      	bne.n	8008736 <sbrk_aligned+0x26>
 800872e:	f04f 34ff 	mov.w	r4, #4294967295
 8008732:	4620      	mov	r0, r4
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	1cc4      	adds	r4, r0, #3
 8008738:	f024 0403 	bic.w	r4, r4, #3
 800873c:	42a0      	cmp	r0, r4
 800873e:	d0f8      	beq.n	8008732 <sbrk_aligned+0x22>
 8008740:	1a21      	subs	r1, r4, r0
 8008742:	4628      	mov	r0, r5
 8008744:	f000 f9c2 	bl	8008acc <_sbrk_r>
 8008748:	3001      	adds	r0, #1
 800874a:	d1f2      	bne.n	8008732 <sbrk_aligned+0x22>
 800874c:	e7ef      	b.n	800872e <sbrk_aligned+0x1e>
 800874e:	bf00      	nop
 8008750:	20001c1c 	.word	0x20001c1c

08008754 <_malloc_r>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	1ccd      	adds	r5, r1, #3
 800875a:	f025 0503 	bic.w	r5, r5, #3
 800875e:	3508      	adds	r5, #8
 8008760:	2d0c      	cmp	r5, #12
 8008762:	bf38      	it	cc
 8008764:	250c      	movcc	r5, #12
 8008766:	2d00      	cmp	r5, #0
 8008768:	4606      	mov	r6, r0
 800876a:	db01      	blt.n	8008770 <_malloc_r+0x1c>
 800876c:	42a9      	cmp	r1, r5
 800876e:	d904      	bls.n	800877a <_malloc_r+0x26>
 8008770:	230c      	movs	r3, #12
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	2000      	movs	r0, #0
 8008776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800877a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008850 <_malloc_r+0xfc>
 800877e:	f000 f869 	bl	8008854 <__malloc_lock>
 8008782:	f8d8 3000 	ldr.w	r3, [r8]
 8008786:	461c      	mov	r4, r3
 8008788:	bb44      	cbnz	r4, 80087dc <_malloc_r+0x88>
 800878a:	4629      	mov	r1, r5
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff ffbf 	bl	8008710 <sbrk_aligned>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	4604      	mov	r4, r0
 8008796:	d158      	bne.n	800884a <_malloc_r+0xf6>
 8008798:	f8d8 4000 	ldr.w	r4, [r8]
 800879c:	4627      	mov	r7, r4
 800879e:	2f00      	cmp	r7, #0
 80087a0:	d143      	bne.n	800882a <_malloc_r+0xd6>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	d04b      	beq.n	800883e <_malloc_r+0xea>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4639      	mov	r1, r7
 80087aa:	4630      	mov	r0, r6
 80087ac:	eb04 0903 	add.w	r9, r4, r3
 80087b0:	f000 f98c 	bl	8008acc <_sbrk_r>
 80087b4:	4581      	cmp	r9, r0
 80087b6:	d142      	bne.n	800883e <_malloc_r+0xea>
 80087b8:	6821      	ldr	r1, [r4, #0]
 80087ba:	1a6d      	subs	r5, r5, r1
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ffa6 	bl	8008710 <sbrk_aligned>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d03a      	beq.n	800883e <_malloc_r+0xea>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	442b      	add	r3, r5
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	f8d8 3000 	ldr.w	r3, [r8]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	bb62      	cbnz	r2, 8008830 <_malloc_r+0xdc>
 80087d6:	f8c8 7000 	str.w	r7, [r8]
 80087da:	e00f      	b.n	80087fc <_malloc_r+0xa8>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	1b52      	subs	r2, r2, r5
 80087e0:	d420      	bmi.n	8008824 <_malloc_r+0xd0>
 80087e2:	2a0b      	cmp	r2, #11
 80087e4:	d917      	bls.n	8008816 <_malloc_r+0xc2>
 80087e6:	1961      	adds	r1, r4, r5
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	6025      	str	r5, [r4, #0]
 80087ec:	bf18      	it	ne
 80087ee:	6059      	strne	r1, [r3, #4]
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	bf08      	it	eq
 80087f4:	f8c8 1000 	streq.w	r1, [r8]
 80087f8:	5162      	str	r2, [r4, r5]
 80087fa:	604b      	str	r3, [r1, #4]
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 f82f 	bl	8008860 <__malloc_unlock>
 8008802:	f104 000b 	add.w	r0, r4, #11
 8008806:	1d23      	adds	r3, r4, #4
 8008808:	f020 0007 	bic.w	r0, r0, #7
 800880c:	1ac2      	subs	r2, r0, r3
 800880e:	bf1c      	itt	ne
 8008810:	1a1b      	subne	r3, r3, r0
 8008812:	50a3      	strne	r3, [r4, r2]
 8008814:	e7af      	b.n	8008776 <_malloc_r+0x22>
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	42a3      	cmp	r3, r4
 800881a:	bf0c      	ite	eq
 800881c:	f8c8 2000 	streq.w	r2, [r8]
 8008820:	605a      	strne	r2, [r3, #4]
 8008822:	e7eb      	b.n	80087fc <_malloc_r+0xa8>
 8008824:	4623      	mov	r3, r4
 8008826:	6864      	ldr	r4, [r4, #4]
 8008828:	e7ae      	b.n	8008788 <_malloc_r+0x34>
 800882a:	463c      	mov	r4, r7
 800882c:	687f      	ldr	r7, [r7, #4]
 800882e:	e7b6      	b.n	800879e <_malloc_r+0x4a>
 8008830:	461a      	mov	r2, r3
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	d1fb      	bne.n	8008830 <_malloc_r+0xdc>
 8008838:	2300      	movs	r3, #0
 800883a:	6053      	str	r3, [r2, #4]
 800883c:	e7de      	b.n	80087fc <_malloc_r+0xa8>
 800883e:	230c      	movs	r3, #12
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	4630      	mov	r0, r6
 8008844:	f000 f80c 	bl	8008860 <__malloc_unlock>
 8008848:	e794      	b.n	8008774 <_malloc_r+0x20>
 800884a:	6005      	str	r5, [r0, #0]
 800884c:	e7d6      	b.n	80087fc <_malloc_r+0xa8>
 800884e:	bf00      	nop
 8008850:	20001c20 	.word	0x20001c20

08008854 <__malloc_lock>:
 8008854:	4801      	ldr	r0, [pc, #4]	@ (800885c <__malloc_lock+0x8>)
 8008856:	f7ff bf00 	b.w	800865a <__retarget_lock_acquire_recursive>
 800885a:	bf00      	nop
 800885c:	20001c18 	.word	0x20001c18

08008860 <__malloc_unlock>:
 8008860:	4801      	ldr	r0, [pc, #4]	@ (8008868 <__malloc_unlock+0x8>)
 8008862:	f7ff befb 	b.w	800865c <__retarget_lock_release_recursive>
 8008866:	bf00      	nop
 8008868:	20001c18 	.word	0x20001c18

0800886c <__sflush_r>:
 800886c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	0716      	lsls	r6, r2, #28
 8008876:	4605      	mov	r5, r0
 8008878:	460c      	mov	r4, r1
 800887a:	d454      	bmi.n	8008926 <__sflush_r+0xba>
 800887c:	684b      	ldr	r3, [r1, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dc02      	bgt.n	8008888 <__sflush_r+0x1c>
 8008882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd48      	ble.n	800891a <__sflush_r+0xae>
 8008888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800888a:	2e00      	cmp	r6, #0
 800888c:	d045      	beq.n	800891a <__sflush_r+0xae>
 800888e:	2300      	movs	r3, #0
 8008890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008894:	682f      	ldr	r7, [r5, #0]
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	d030      	beq.n	80088fe <__sflush_r+0x92>
 800889c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	0759      	lsls	r1, r3, #29
 80088a2:	d505      	bpl.n	80088b0 <__sflush_r+0x44>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088aa:	b10b      	cbz	r3, 80088b0 <__sflush_r+0x44>
 80088ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ae:	1ad2      	subs	r2, r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b4:	6a21      	ldr	r1, [r4, #32]
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b0      	blx	r6
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	d106      	bne.n	80088ce <__sflush_r+0x62>
 80088c0:	6829      	ldr	r1, [r5, #0]
 80088c2:	291d      	cmp	r1, #29
 80088c4:	d82b      	bhi.n	800891e <__sflush_r+0xb2>
 80088c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008970 <__sflush_r+0x104>)
 80088c8:	410a      	asrs	r2, r1
 80088ca:	07d6      	lsls	r6, r2, #31
 80088cc:	d427      	bmi.n	800891e <__sflush_r+0xb2>
 80088ce:	2200      	movs	r2, #0
 80088d0:	6062      	str	r2, [r4, #4]
 80088d2:	04d9      	lsls	r1, r3, #19
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	d504      	bpl.n	80088e4 <__sflush_r+0x78>
 80088da:	1c42      	adds	r2, r0, #1
 80088dc:	d101      	bne.n	80088e2 <__sflush_r+0x76>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	b903      	cbnz	r3, 80088e4 <__sflush_r+0x78>
 80088e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80088e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e6:	602f      	str	r7, [r5, #0]
 80088e8:	b1b9      	cbz	r1, 800891a <__sflush_r+0xae>
 80088ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d002      	beq.n	80088f8 <__sflush_r+0x8c>
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7ff fec2 	bl	800867c <_free_r>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088fc:	e00d      	b.n	800891a <__sflush_r+0xae>
 80088fe:	2301      	movs	r3, #1
 8008900:	4628      	mov	r0, r5
 8008902:	47b0      	blx	r6
 8008904:	4602      	mov	r2, r0
 8008906:	1c50      	adds	r0, r2, #1
 8008908:	d1c9      	bne.n	800889e <__sflush_r+0x32>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0c6      	beq.n	800889e <__sflush_r+0x32>
 8008910:	2b1d      	cmp	r3, #29
 8008912:	d001      	beq.n	8008918 <__sflush_r+0xac>
 8008914:	2b16      	cmp	r3, #22
 8008916:	d11e      	bne.n	8008956 <__sflush_r+0xea>
 8008918:	602f      	str	r7, [r5, #0]
 800891a:	2000      	movs	r0, #0
 800891c:	e022      	b.n	8008964 <__sflush_r+0xf8>
 800891e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008922:	b21b      	sxth	r3, r3
 8008924:	e01b      	b.n	800895e <__sflush_r+0xf2>
 8008926:	690f      	ldr	r7, [r1, #16]
 8008928:	2f00      	cmp	r7, #0
 800892a:	d0f6      	beq.n	800891a <__sflush_r+0xae>
 800892c:	0793      	lsls	r3, r2, #30
 800892e:	680e      	ldr	r6, [r1, #0]
 8008930:	bf08      	it	eq
 8008932:	694b      	ldreq	r3, [r1, #20]
 8008934:	600f      	str	r7, [r1, #0]
 8008936:	bf18      	it	ne
 8008938:	2300      	movne	r3, #0
 800893a:	eba6 0807 	sub.w	r8, r6, r7
 800893e:	608b      	str	r3, [r1, #8]
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	dde9      	ble.n	800891a <__sflush_r+0xae>
 8008946:	6a21      	ldr	r1, [r4, #32]
 8008948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800894a:	4643      	mov	r3, r8
 800894c:	463a      	mov	r2, r7
 800894e:	4628      	mov	r0, r5
 8008950:	47b0      	blx	r6
 8008952:	2800      	cmp	r0, #0
 8008954:	dc08      	bgt.n	8008968 <__sflush_r+0xfc>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	4407      	add	r7, r0
 800896a:	eba8 0800 	sub.w	r8, r8, r0
 800896e:	e7e7      	b.n	8008940 <__sflush_r+0xd4>
 8008970:	dfbffffe 	.word	0xdfbffffe

08008974 <_fflush_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	690b      	ldr	r3, [r1, #16]
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b913      	cbnz	r3, 8008984 <_fflush_r+0x10>
 800897e:	2500      	movs	r5, #0
 8008980:	4628      	mov	r0, r5
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	b118      	cbz	r0, 800898e <_fflush_r+0x1a>
 8008986:	6a03      	ldr	r3, [r0, #32]
 8008988:	b90b      	cbnz	r3, 800898e <_fflush_r+0x1a>
 800898a:	f7ff fc81 	bl	8008290 <__sinit>
 800898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f3      	beq.n	800897e <_fflush_r+0xa>
 8008996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d404      	bmi.n	80089a6 <_fflush_r+0x32>
 800899c:	0599      	lsls	r1, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_fflush_r+0x32>
 80089a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a2:	f7ff fe5a 	bl	800865a <__retarget_lock_acquire_recursive>
 80089a6:	4628      	mov	r0, r5
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7ff ff5f 	bl	800886c <__sflush_r>
 80089ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089b0:	07da      	lsls	r2, r3, #31
 80089b2:	4605      	mov	r5, r0
 80089b4:	d4e4      	bmi.n	8008980 <_fflush_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	d4e1      	bmi.n	8008980 <_fflush_r+0xc>
 80089bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089be:	f7ff fe4d 	bl	800865c <__retarget_lock_release_recursive>
 80089c2:	e7dd      	b.n	8008980 <_fflush_r+0xc>

080089c4 <__swhatbuf_r>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	460c      	mov	r4, r1
 80089c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	b096      	sub	sp, #88	@ 0x58
 80089d0:	4615      	mov	r5, r2
 80089d2:	461e      	mov	r6, r3
 80089d4:	da0d      	bge.n	80089f2 <__swhatbuf_r+0x2e>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089dc:	f04f 0100 	mov.w	r1, #0
 80089e0:	bf14      	ite	ne
 80089e2:	2340      	movne	r3, #64	@ 0x40
 80089e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e8:	2000      	movs	r0, #0
 80089ea:	6031      	str	r1, [r6, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	b016      	add	sp, #88	@ 0x58
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	466a      	mov	r2, sp
 80089f4:	f000 f848 	bl	8008a88 <_fstat_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dbec      	blt.n	80089d6 <__swhatbuf_r+0x12>
 80089fc:	9901      	ldr	r1, [sp, #4]
 80089fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a06:	4259      	negs	r1, r3
 8008a08:	4159      	adcs	r1, r3
 8008a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0e:	e7eb      	b.n	80089e8 <__swhatbuf_r+0x24>

08008a10 <__smakebuf_r>:
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a14:	079d      	lsls	r5, r3, #30
 8008a16:	4606      	mov	r6, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	d507      	bpl.n	8008a2c <__smakebuf_r+0x1c>
 8008a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	2301      	movs	r3, #1
 8008a26:	6163      	str	r3, [r4, #20]
 8008a28:	b003      	add	sp, #12
 8008a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2c:	ab01      	add	r3, sp, #4
 8008a2e:	466a      	mov	r2, sp
 8008a30:	f7ff ffc8 	bl	80089c4 <__swhatbuf_r>
 8008a34:	9f00      	ldr	r7, [sp, #0]
 8008a36:	4605      	mov	r5, r0
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7ff fe8a 	bl	8008754 <_malloc_r>
 8008a40:	b948      	cbnz	r0, 8008a56 <__smakebuf_r+0x46>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	059a      	lsls	r2, r3, #22
 8008a48:	d4ee      	bmi.n	8008a28 <__smakebuf_r+0x18>
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	f043 0302 	orr.w	r3, r3, #2
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	e7e2      	b.n	8008a1c <__smakebuf_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	6020      	str	r0, [r4, #0]
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a66:	b15b      	cbz	r3, 8008a80 <__smakebuf_r+0x70>
 8008a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f81d 	bl	8008aac <_isatty_r>
 8008a72:	b128      	cbz	r0, 8008a80 <__smakebuf_r+0x70>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	431d      	orrs	r5, r3
 8008a84:	81a5      	strh	r5, [r4, #12]
 8008a86:	e7cf      	b.n	8008a28 <__smakebuf_r+0x18>

08008a88 <_fstat_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d07      	ldr	r5, [pc, #28]	@ (8008aa8 <_fstat_r+0x20>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	f7f8 fa0a 	bl	8000eae <_fstat>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d102      	bne.n	8008aa4 <_fstat_r+0x1c>
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	b103      	cbz	r3, 8008aa4 <_fstat_r+0x1c>
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20001c14 	.word	0x20001c14

08008aac <_isatty_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d06      	ldr	r5, [pc, #24]	@ (8008ac8 <_isatty_r+0x1c>)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	f7f8 fa09 	bl	8000ece <_isatty>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_isatty_r+0x1a>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_isatty_r+0x1a>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20001c14 	.word	0x20001c14

08008acc <_sbrk_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d06      	ldr	r5, [pc, #24]	@ (8008ae8 <_sbrk_r+0x1c>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f8 fa12 	bl	8000f00 <_sbrk>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_sbrk_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_sbrk_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20001c14 	.word	0x20001c14

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
