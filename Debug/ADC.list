
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004ab0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  08004ac0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004ac0  0000611c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010231  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c8  00000000  00000000  00016271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00018540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a79  00000000  00000000  000192d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dfc  00000000  00000000  00019d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be3  00000000  00000000  00040b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f73a2  00000000  00000000  00051728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  00148b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a40 	.word	0x08004a40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004a40 	.word	0x08004a40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb1a 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f84c 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f942 	bl	800074c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004c8:	f000 f89a 	bl	8000600 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f90e 	bl	80006ec <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d8:	f001 fea2 	bl	8002220 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 80004dc:	20c8      	movs	r0, #200	@ 0xc8
 80004de:	f000 fb85 	bl	8000bec <HAL_Delay>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ea:	f001 fe99 	bl	8002220 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 80004ee:	20c8      	movs	r0, #200	@ 0xc8
 80004f0:	f000 fb7c 	bl	8000bec <HAL_Delay>

	    HAL_Delay(tempo);
 80004f4:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <main+0x9c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb77 	bl	8000bec <HAL_Delay>

	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2120      	movs	r1, #32
 8000502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000506:	f001 fe8b 	bl	8002220 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 800050a:	20c8      	movs	r0, #200	@ 0xc8
 800050c:	f000 fb6e 	bl	8000bec <HAL_Delay>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f001 fe82 	bl	8002220 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 800051c:	20c8      	movs	r0, #200	@ 0xc8
 800051e:	f000 fb65 	bl	8000bec <HAL_Delay>

		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0) {
 8000522:	e007      	b.n	8000534 <main+0x7c>

			HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000524:	2180      	movs	r1, #128	@ 0x80
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 fe91 	bl	8002250 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800052e:	20c8      	movs	r0, #200	@ 0xc8
 8000530:	f000 fb5c 	bl	8000bec <HAL_Delay>
		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0) {
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	4807      	ldr	r0, [pc, #28]	@ (8000558 <main+0xa0>)
 800053a:	f001 fe59 	bl	80021f0 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1ef      	bne.n	8000524 <main+0x6c>
		}
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f001 fe68 	bl	8002220 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000550:	e7be      	b.n	80004d0 <main+0x18>
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	48000800 	.word	0x48000800

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	@ 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fa3b 	bl	80049e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000582:	f001 fe8d 	bl	80022a0 <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 f944 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fec4 	bl	800234c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 f925 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fa8c 	bl	8002b04 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 f911 	bl	8000818 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	@ 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000622:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000624:	4a2f      	ldr	r2, [pc, #188]	@ (80006e4 <MX_ADC1_Init+0xe4>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000634:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000642:	2204      	movs	r2, #4
 8000644:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000654:	2201      	movs	r2, #1
 8000656:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000682:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 8000684:	f000 fc62 	bl	8000f4c <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800068e:	f000 f8c3 	bl	8000818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 800069e:	f001 f9bd 	bl	8001a1c <HAL_ADCEx_MultiModeConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006a8:	f000 f8b6 	bl	8000818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b8:	237f      	movs	r3, #127	@ 0x7f
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006bc:	2304      	movs	r3, #4
 80006be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_ADC1_Init+0xe0>)
 80006ca:	f000 fd8f 	bl	80011ec <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006d4:	f000 f8a0 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	50040000 	.word	0x50040000
 80006e8:	04300002 	.word	0x04300002

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f003 f8c8 	bl	80038c4 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f86d 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000090 	.word	0x20000090
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a2a      	ldr	r2, [pc, #168]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21a0      	movs	r1, #160	@ 0xa0
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f001 fd29 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <MX_GPIO_Init+0xc8>)
 80007e6:	f001 fb59 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin;
 80007ea:	23a0      	movs	r3, #160	@ 0xa0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f001 fb4a 	bl	8001e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000800 	.word	0x48000800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	@ 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ac      	sub	sp, #176	@ 0xb0
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2288      	movs	r2, #136	@ 0x88
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 f8aa 	bl	80049e6 <memset>
  if(hadc->Instance==ADC1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a27      	ldr	r2, [pc, #156]	@ (8000934 <HAL_ADC_MspInit+0xc8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d146      	bne.n	800092a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800089c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008b6:	2307      	movs	r3, #7
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fb3d 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008d8:	f7ff ff9e 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 80008e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_ADC_MspInit+0xcc>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090c:	2301      	movs	r3, #1
 800090e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000912:	230b      	movs	r3, #11
 8000914:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <HAL_ADC_MspInit+0xd0>)
 8000926:	f001 fab9 	bl	8001e9c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800092a:	bf00      	nop
 800092c:	37b0      	adds	r7, #176	@ 0xb0
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	50040000 	.word	0x50040000
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ac      	sub	sp, #176	@ 0xb0
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2288      	movs	r2, #136	@ 0x88
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f840 	bl	80049e6 <memset>
  if(huart->Instance==USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <HAL_UART_MspInit+0xc0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d143      	bne.n	80009f8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fae5 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000988:	f7ff ff46 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000990:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000996:	6593      	str	r3, [r2, #88]	@ 0x58
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <HAL_UART_MspInit+0xc4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009bc:	230c      	movs	r3, #12
 80009be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d4:	2307      	movs	r3, #7
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f001 fa5a 	bl	8001e9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2026      	movs	r0, #38	@ 0x26
 80009ee:	f001 f9a0 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f2:	2026      	movs	r0, #38	@ 0x26
 80009f4:	f001 f9b9 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f8:	bf00      	nop
 80009fa:	37b0      	adds	r7, #176	@ 0xb0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8a5 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <USART2_IRQHandler+0x10>)
 8000a6e:	f002 ff77 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000090 	.word	0x20000090

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 ff93 	bl	80049f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad2:	f7ff fcf1 	bl	80004b8 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae4:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8000ae8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aec:	2000011c 	.word	0x2000011c

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <HAL_Init+0x3c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <HAL_Init+0x3c>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f001 f906 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f80f 	bl	8000b34 <HAL_InitTick>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	e001      	b.n	8000b26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b22:	f7ff fe7f 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d023      	beq.n	8000b90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_InitTick+0x70>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f911 	bl	8001d86 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10f      	bne.n	8000b8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d809      	bhi.n	8000b84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b78:	f001 f8db 	bl	8001d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_InitTick+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e004      	b.n	8000b94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e001      	b.n	8000b94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	20000118 	.word	0x20000118

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000118 	.word	0x20000118

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000000c 	.word	0x2000000c

08000c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3360      	adds	r3, #96	@ 0x60
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <LL_ADC_SetOffset+0x44>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	03fff000 	.word	0x03fff000

08000ce4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3360      	adds	r3, #96	@ 0x60
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3360      	adds	r3, #96	@ 0x60
 8000d20:	461a      	mov	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3330      	adds	r3, #48	@ 0x30
 8000d56:	461a      	mov	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	4413      	add	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	211f      	movs	r1, #31
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	401a      	ands	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0e9b      	lsrs	r3, r3, #26
 8000d7e:	f003 011f 	and.w	r1, r3, #31
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b087      	sub	sp, #28
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3314      	adds	r3, #20
 8000dae:	461a      	mov	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	0e5b      	lsrs	r3, r3, #25
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	0d1b      	lsrs	r3, r3, #20
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	2107      	movs	r1, #7
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	0d1b      	lsrs	r3, r3, #20
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0318 	and.w	r3, r3, #24
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	0007ffff 	.word	0x0007ffff

08000e3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6093      	str	r3, [r2, #8]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e74:	d101      	bne.n	8000e7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ec4:	d101      	bne.n	8000eca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <LL_ADC_IsEnabled+0x18>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <LL_ADC_IsEnabled+0x1a>
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d101      	bne.n	8000f16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e130      	b.n	80011c8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fc79 	bl	800086c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff67 	bl	8000e60 <LL_ADC_IsDeepPowerDownEnabled>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff4d 	bl	8000e3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff82 	bl	8000eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d115      	bne.n	8000fde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff66 	bl	8000e88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fbc:	4b84      	ldr	r3, [pc, #528]	@ (80011d0 <HAL_ADC_Init+0x284>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	4a84      	ldr	r2, [pc, #528]	@ (80011d4 <HAL_ADC_Init+0x288>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	3301      	adds	r3, #1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff64 	bl	8000eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff75 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 8001014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80c9 	bne.w	80011b6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80c5 	bne.w	80011b6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001030:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff49 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d115      	bne.n	8001078 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800104c:	4862      	ldr	r0, [pc, #392]	@ (80011d8 <HAL_ADC_Init+0x28c>)
 800104e:	f7ff ff43 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001052:	4604      	mov	r4, r0
 8001054:	4861      	ldr	r0, [pc, #388]	@ (80011dc <HAL_ADC_Init+0x290>)
 8001056:	f7ff ff3f 	bl	8000ed8 <LL_ADC_IsEnabled>
 800105a:	4603      	mov	r3, r0
 800105c:	431c      	orrs	r4, r3
 800105e:	4860      	ldr	r0, [pc, #384]	@ (80011e0 <HAL_ADC_Init+0x294>)
 8001060:	f7ff ff3a 	bl	8000ed8 <LL_ADC_IsEnabled>
 8001064:	4603      	mov	r3, r0
 8001066:	4323      	orrs	r3, r4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4619      	mov	r1, r3
 8001072:	485c      	ldr	r0, [pc, #368]	@ (80011e4 <HAL_ADC_Init+0x298>)
 8001074:	f7ff fdde 	bl	8000c34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7e5b      	ldrb	r3, [r3, #25]
 800107c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001082:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001088:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800108e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001096:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d106      	bne.n	80010b4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	3b01      	subs	r3, #1
 80010ac:	045b      	lsls	r3, r3, #17
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d009      	beq.n	80010d0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b44      	ldr	r3, [pc, #272]	@ (80011e8 <HAL_ADC_Init+0x29c>)
 80010d8:	4013      	ands	r3, r2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff1b 	bl	8000f24 <LL_ADC_INJ_IsConversionOngoing>
 80010ee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d13d      	bne.n	8001172 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13a      	bne.n	8001172 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001100:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001108:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001118:	f023 0302 	bic.w	r3, r3, #2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	69b9      	ldr	r1, [r7, #24]
 8001122:	430b      	orrs	r3, r1
 8001124:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800112c:	2b01      	cmp	r3, #1
 800112e:	d118      	bne.n	8001162 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001146:	4311      	orrs	r1, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800114c:	4311      	orrs	r1, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001152:	430a      	orrs	r2, r1
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	e007      	b.n	8001172 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d10c      	bne.n	8001194 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	f023 010f 	bic.w	r1, r3, #15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	631a      	str	r2, [r3, #48]	@ 0x30
 8001192:	e007      	b.n	80011a4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 020f 	bic.w	r2, r2, #15
 80011a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a8:	f023 0303 	bic.w	r3, r3, #3
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80011b4:	e007      	b.n	80011c6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ba:	f043 0210 	orr.w	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3724      	adds	r7, #36	@ 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	20000004 	.word	0x20000004
 80011d4:	053e2d63 	.word	0x053e2d63
 80011d8:	50040000 	.word	0x50040000
 80011dc:	50040100 	.word	0x50040100
 80011e0:	50040200 	.word	0x50040200
 80011e4:	50040300 	.word	0x50040300
 80011e8:	fff0c007 	.word	0xfff0c007

080011ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b6      	sub	sp, #216	@ 0xd8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_ADC_ConfigChannel+0x22>
 800120a:	2302      	movs	r3, #2
 800120c:	e3c9      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x7b6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe6f 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 83aa 	bne.w	800197c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d824      	bhi.n	8001282 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	3b02      	subs	r3, #2
 800123e:	2b03      	cmp	r3, #3
 8001240:	d81b      	bhi.n	800127a <HAL_ADC_ConfigChannel+0x8e>
 8001242:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <HAL_ADC_ConfigChannel+0x5c>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	08001261 	.word	0x08001261
 8001250:	08001269 	.word	0x08001269
 8001254:	08001271 	.word	0x08001271
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001258:	230c      	movs	r3, #12
 800125a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800125e:	e010      	b.n	8001282 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001260:	2312      	movs	r3, #18
 8001262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001266:	e00c      	b.n	8001282 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001268:	2318      	movs	r3, #24
 800126a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800126e:	e008      	b.n	8001282 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001278:	e003      	b.n	8001282 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800127a:	2306      	movs	r3, #6
 800127c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001280:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001290:	f7ff fd59 	bl	8000d46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe30 	bl	8000efe <LL_ADC_REG_IsConversionOngoing>
 800129e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe3c 	bl	8000f24 <LL_ADC_INJ_IsConversionOngoing>
 80012ac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 81a4 	bne.w	8001602 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 819f 	bne.w	8001602 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6819      	ldr	r1, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	461a      	mov	r2, r3
 80012d2:	f7ff fd64 	bl	8000d9e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d00a      	beq.n	800130e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6919      	ldr	r1, [r3, #16]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001308:	f7ff fcc8 	bl	8000c9c <LL_ADC_SetOffset>
 800130c:	e179      	b.n	8001602 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fce5 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10a      	bne.n	800133a <HAL_ADC_ConfigChannel+0x14e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcda 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	0e9b      	lsrs	r3, r3, #26
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	e01e      	b.n	8001378 <HAL_ADC_ConfigChannel+0x18c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fccf 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800135c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001368:	2320      	movs	r3, #32
 800136a:	e004      	b.n	8001376 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800136c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1a4>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0e9b      	lsrs	r3, r3, #26
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	e018      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x1d6>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80013a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80013ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80013b4:	2320      	movs	r3, #32
 80013b6:	e004      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80013b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d106      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc9e 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc82 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x214>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc77 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	0e9b      	lsrs	r3, r3, #26
 80013fa:	f003 021f 	and.w	r2, r3, #31
 80013fe:	e01e      	b.n	800143e <HAL_ADC_ConfigChannel+0x252>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc6c 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800141e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800142e:	2320      	movs	r3, #32
 8001430:	e004      	b.n	800143c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x26a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	e018      	b.n	8001488 <HAL_ADC_ConfigChannel+0x29c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800146a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800146e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800147a:	2320      	movs	r3, #32
 800147c:	e004      	b.n	8001488 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800147e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001488:	429a      	cmp	r2, r3
 800148a:	d106      	bne.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc3b 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2102      	movs	r1, #2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc1f 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x2da>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc14 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	0e9b      	lsrs	r3, r3, #26
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	e01e      	b.n	8001504 <HAL_ADC_ConfigChannel+0x318>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc09 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80014ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80014f4:	2320      	movs	r3, #32
 80014f6:	e004      	b.n	8001502 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80014f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_ADC_ConfigChannel+0x330>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	e014      	b.n	8001546 <HAL_ADC_ConfigChannel+0x35a>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800152a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800152c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001530:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001538:	2320      	movs	r3, #32
 800153a:	e004      	b.n	8001546 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800153c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001546:	429a      	cmp	r2, r3
 8001548:	d106      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fbdc 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2103      	movs	r1, #3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbc0 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10a      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x398>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2103      	movs	r1, #3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fbb5 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	0e9b      	lsrs	r3, r3, #26
 800157e:	f003 021f 	and.w	r2, r3, #31
 8001582:	e017      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x3c8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2103      	movs	r1, #3
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fbaa 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800159c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800159e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80015a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80015a6:	2320      	movs	r3, #32
 80015a8:	e003      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80015aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x3e0>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0e9b      	lsrs	r3, r3, #26
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	e011      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x404>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80015da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80015de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80015e4:	2320      	movs	r3, #32
 80015e6:	e003      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80015e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d106      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	2103      	movs	r1, #3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fb87 	bl	8000d10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc66 	bl	8000ed8 <LL_ADC_IsEnabled>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8140 	bne.w	8001894 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	461a      	mov	r2, r3
 8001622:	f7ff fbe7 	bl	8000df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	4a8f      	ldr	r2, [pc, #572]	@ (8001868 <HAL_ADC_ConfigChannel+0x67c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 8131 	bne.w	8001894 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10b      	bne.n	800165a <HAL_ADC_ConfigChannel+0x46e>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0e9b      	lsrs	r3, r3, #26
 8001648:	3301      	adds	r3, #1
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2b09      	cmp	r3, #9
 8001650:	bf94      	ite	ls
 8001652:	2301      	movls	r3, #1
 8001654:	2300      	movhi	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	e019      	b.n	800168e <HAL_ADC_ConfigChannel+0x4a2>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800166a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800166c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001672:	2320      	movs	r3, #32
 8001674:	e003      	b.n	800167e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2b09      	cmp	r3, #9
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800168e:	2b00      	cmp	r3, #0
 8001690:	d079      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x4c2>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0e9b      	lsrs	r3, r3, #26
 80016a4:	3301      	adds	r3, #1
 80016a6:	069b      	lsls	r3, r3, #26
 80016a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ac:	e015      	b.n	80016da <HAL_ADC_ConfigChannel+0x4ee>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80016bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80016c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80016c6:	2320      	movs	r3, #32
 80016c8:	e003      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80016ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	069b      	lsls	r3, r3, #26
 80016d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x50e>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	3301      	adds	r3, #1
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	e017      	b.n	800172a <HAL_ADC_ConfigChannel+0x53e>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800170c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e003      	b.n	800171e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	ea42 0103 	orr.w	r1, r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x564>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0e9b      	lsrs	r3, r3, #26
 8001740:	3301      	adds	r3, #1
 8001742:	f003 021f 	and.w	r2, r3, #31
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	051b      	lsls	r3, r3, #20
 800174e:	e018      	b.n	8001782 <HAL_ADC_ConfigChannel+0x596>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001760:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e003      	b.n	8001774 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800176c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001782:	430b      	orrs	r3, r1
 8001784:	e081      	b.n	800188a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x5b6>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0e9b      	lsrs	r3, r3, #26
 8001798:	3301      	adds	r3, #1
 800179a:	069b      	lsls	r3, r3, #26
 800179c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017a0:	e015      	b.n	80017ce <HAL_ADC_ConfigChannel+0x5e2>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80017b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e003      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80017be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	069b      	lsls	r3, r3, #26
 80017ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x602>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0e9b      	lsrs	r3, r3, #26
 80017e0:	3301      	adds	r3, #1
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	e017      	b.n	800181e <HAL_ADC_ConfigChannel+0x632>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	61bb      	str	r3, [r7, #24]
  return result;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001806:	2320      	movs	r3, #32
 8001808:	e003      	b.n	8001812 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	ea42 0103 	orr.w	r1, r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_ADC_ConfigChannel+0x65e>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0e9b      	lsrs	r3, r3, #26
 8001834:	3301      	adds	r3, #1
 8001836:	f003 021f 	and.w	r2, r3, #31
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	3b1e      	subs	r3, #30
 8001842:	051b      	lsls	r3, r3, #20
 8001844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001848:	e01e      	b.n	8001888 <HAL_ADC_ConfigChannel+0x69c>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	60fb      	str	r3, [r7, #12]
  return result;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d104      	bne.n	800186c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001862:	2320      	movs	r3, #32
 8001864:	e006      	b.n	8001874 <HAL_ADC_ConfigChannel+0x688>
 8001866:	bf00      	nop
 8001868:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3301      	adds	r3, #1
 8001876:	f003 021f 	and.w	r2, r3, #31
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	051b      	lsls	r3, r3, #20
 8001884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001888:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff fa85 	bl	8000d9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <HAL_ADC_ConfigChannel+0x7c0>)
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d07a      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018a0:	4843      	ldr	r0, [pc, #268]	@ (80019b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80018a2:	f7ff f9ed 	bl	8000c80 <LL_ADC_GetCommonPathInternalCh>
 80018a6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a41      	ldr	r2, [pc, #260]	@ (80019b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d12c      	bne.n	800190e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d126      	bne.n	800190e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3c      	ldr	r2, [pc, #240]	@ (80019b8 <HAL_ADC_ConfigChannel+0x7cc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d004      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x6e8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a3b      	ldr	r2, [pc, #236]	@ (80019bc <HAL_ADC_ConfigChannel+0x7d0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d15d      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018dc:	4619      	mov	r1, r3
 80018de:	4834      	ldr	r0, [pc, #208]	@ (80019b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80018e0:	f7ff f9bb 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <HAL_ADC_ConfigChannel+0x7d4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	4a36      	ldr	r2, [pc, #216]	@ (80019c4 <HAL_ADC_ConfigChannel+0x7d8>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018fe:	e002      	b.n	8001906 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3b01      	subs	r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800190c:	e040      	b.n	8001990 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d118      	bne.n	800194a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800191c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d112      	bne.n	800194a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <HAL_ADC_ConfigChannel+0x7cc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d004      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x74c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_ADC_ConfigChannel+0x7d0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d12d      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800193c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001940:	4619      	mov	r1, r3
 8001942:	481b      	ldr	r0, [pc, #108]	@ (80019b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001944:	f7ff f989 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001948:	e024      	b.n	8001994 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1f      	ldr	r2, [pc, #124]	@ (80019cc <HAL_ADC_ConfigChannel+0x7e0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d120      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11a      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d115      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800196a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800196e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001972:	4619      	mov	r1, r3
 8001974:	480e      	ldr	r0, [pc, #56]	@ (80019b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001976:	f7ff f970 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
 800197a:	e00c      	b.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800198e:	e002      	b.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001994:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800199e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	37d8      	adds	r7, #216	@ 0xd8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	80080000 	.word	0x80080000
 80019b0:	50040300 	.word	0x50040300
 80019b4:	c7520000 	.word	0xc7520000
 80019b8:	50040000 	.word	0x50040000
 80019bc:	50040200 	.word	0x50040200
 80019c0:	20000004 	.word	0x20000004
 80019c4:	053e2d63 	.word	0x053e2d63
 80019c8:	cb840000 	.word	0xcb840000
 80019cc:	80000001 	.word	0x80000001

080019d0 <LL_ADC_IsEnabled>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <LL_ADC_IsEnabled+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_ADC_IsEnabled+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b09f      	sub	sp, #124	@ 0x7c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e093      	b.n	8001b62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001a42:	2300      	movs	r3, #0
 8001a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001a46:	2300      	movs	r3, #0
 8001a48:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a47      	ldr	r2, [pc, #284]	@ (8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001a54:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	e001      	b.n	8001a5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10b      	bne.n	8001a7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e072      	b.n	8001b62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ffb9 	bl	80019f6 <LL_ADC_REG_IsConversionOngoing>
 8001a84:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffb3 	bl	80019f6 <LL_ADC_REG_IsConversionOngoing>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d154      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d151      	bne.n	8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a9c:	4b35      	ldr	r3, [pc, #212]	@ (8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02c      	beq.n	8001b02 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aba:	035b      	lsls	r3, r3, #13
 8001abc:	430b      	orrs	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ac2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ac4:	4829      	ldr	r0, [pc, #164]	@ (8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ac6:	f7ff ff83 	bl	80019d0 <LL_ADC_IsEnabled>
 8001aca:	4604      	mov	r4, r0
 8001acc:	4828      	ldr	r0, [pc, #160]	@ (8001b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ace:	f7ff ff7f 	bl	80019d0 <LL_ADC_IsEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	431c      	orrs	r4, r3
 8001ad6:	4828      	ldr	r0, [pc, #160]	@ (8001b78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ad8:	f7ff ff7a 	bl	80019d0 <LL_ADC_IsEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d137      	bne.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001aec:	f023 030f 	bic.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6892      	ldr	r2, [r2, #8]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001afe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b00:	e028      	b.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b0e:	4817      	ldr	r0, [pc, #92]	@ (8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b10:	f7ff ff5e 	bl	80019d0 <LL_ADC_IsEnabled>
 8001b14:	4604      	mov	r4, r0
 8001b16:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b18:	f7ff ff5a 	bl	80019d0 <LL_ADC_IsEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	4815      	ldr	r0, [pc, #84]	@ (8001b78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b22:	f7ff ff55 	bl	80019d0 <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4323      	orrs	r3, r4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d112      	bne.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b36:	f023 030f 	bic.w	r3, r3, #15
 8001b3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b3e:	e009      	b.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001b52:	e000      	b.n	8001b56 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	377c      	adds	r7, #124	@ 0x7c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	50040000 	.word	0x50040000
 8001b70:	50040100 	.word	0x50040100
 8001b74:	50040300 	.word	0x50040300
 8001b78:	50040200 	.word	0x50040200

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d008      	beq.n	8001dc8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e022      	b.n	8001e0e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020e 	bic.w	r2, r2, #14
 8001dd6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f003 021c 	and.w	r2, r3, #28
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d005      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e029      	b.n	8001e92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020e 	bic.w	r2, r2, #14
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f003 021c 	and.w	r2, r3, #28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    }
  }
  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e17f      	b.n	80021ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8171 	beq.w	80021a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d005      	beq.n	8001edc <HAL_GPIO_Init+0x40>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 0201 	and.w	r2, r3, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d118      	bne.n	8001f7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	6939      	ldr	r1, [r7, #16]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80ac 	beq.w	80021a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	4b5f      	ldr	r3, [pc, #380]	@ (80021cc <HAL_GPIO_Init+0x330>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	4a5e      	ldr	r2, [pc, #376]	@ (80021cc <HAL_GPIO_Init+0x330>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6613      	str	r3, [r2, #96]	@ 0x60
 800205a:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HAL_GPIO_Init+0x330>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002066:	4a5a      	ldr	r2, [pc, #360]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x242>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	@ (80021d4 <HAL_GPIO_Init+0x338>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x23e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4e      	ldr	r2, [pc, #312]	@ (80021d8 <HAL_GPIO_Init+0x33c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x23a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	@ (80021dc <HAL_GPIO_Init+0x340>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x236>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	@ (80021e0 <HAL_GPIO_Init+0x344>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x232>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4b      	ldr	r2, [pc, #300]	@ (80021e4 <HAL_GPIO_Init+0x348>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	@ (80021e8 <HAL_GPIO_Init+0x34c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x22a>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x244>
 80020de:	2300      	movs	r3, #0
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f0:	4937      	ldr	r1, [pc, #220]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_GPIO_Init+0x350>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002122:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <HAL_GPIO_Init+0x350>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_GPIO_Init+0x350>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800214c:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <HAL_GPIO_Init+0x350>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_GPIO_Init+0x350>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002176:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_GPIO_Init+0x350>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_GPIO_Init+0x350>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a0:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <HAL_GPIO_Init+0x350>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f ae78 	bne.w	8001eac <HAL_GPIO_Init+0x10>
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	48000400 	.word	0x48000400
 80021d8:	48000800 	.word	0x48000800
 80021dc:	48000c00 	.word	0x48000c00
 80021e0:	48001000 	.word	0x48001000
 80021e4:	48001400 	.word	0x48001400
 80021e8:	48001800 	.word	0x48001800
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e001      	b.n	8002212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800223c:	e002      	b.n	8002244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43d9      	mvns	r1, r3
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	400b      	ands	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <HAL_PWREx_GetVoltageRange+0x18>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40007000 	.word	0x40007000

080022a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ae:	d130      	bne.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022bc:	d038      	beq.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2232      	movs	r2, #50	@ 0x32
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e4:	e002      	b.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f8:	d102      	bne.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f2      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230c:	d110      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e00f      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800231a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231e:	d007      	beq.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002328:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800232e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000
 8002344:	20000004 	.word	0x20000004
 8002348:	431bde83 	.word	0x431bde83

0800234c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e3ca      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b97      	ldr	r3, [pc, #604]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b94      	ldr	r3, [pc, #592]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80e4 	beq.w	8002548 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_RCC_OscConfig+0x4a>
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	f040 808b 	bne.w	80024a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 8087 	bne.w	80024a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002396:	4b89      	ldr	r3, [pc, #548]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x62>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e3a2      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_RCC_OscConfig+0x7c>
 80023be:	4b7f      	ldr	r3, [pc, #508]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c6:	e005      	b.n	80023d4 <HAL_RCC_OscConfig+0x88>
 80023c8:	4b7c      	ldr	r3, [pc, #496]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d223      	bcs.n	8002420 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fd55 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e383      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ec:	4b73      	ldr	r3, [pc, #460]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a72      	ldr	r2, [pc, #456]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b70      	ldr	r3, [pc, #448]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	496d      	ldr	r1, [pc, #436]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240a:	4b6c      	ldr	r3, [pc, #432]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	4968      	ldr	r1, [pc, #416]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
 800241e:	e025      	b.n	800246c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b66      	ldr	r3, [pc, #408]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a65      	ldr	r2, [pc, #404]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b63      	ldr	r3, [pc, #396]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4960      	ldr	r1, [pc, #384]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243e:	4b5f      	ldr	r3, [pc, #380]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	495b      	ldr	r1, [pc, #364]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fd15 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e343      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800246c:	f000 fc4a 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	4950      	ldr	r1, [pc, #320]	@ (80025c0 <HAL_RCC_OscConfig+0x274>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	4a4e      	ldr	r2, [pc, #312]	@ (80025c4 <HAL_RCC_OscConfig+0x278>)
 800248a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800248c:	4b4e      	ldr	r3, [pc, #312]	@ (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fb4f 	bl	8000b34 <HAL_InitTick>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d052      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	e327      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d032      	beq.n	8002512 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a42      	ldr	r2, [pc, #264]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fb8c 	bl	8000bd4 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c0:	f7fe fb88 	bl	8000bd4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e310      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a36      	ldr	r2, [pc, #216]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4931      	ldr	r1, [pc, #196]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	492c      	ldr	r1, [pc, #176]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e01a      	b.n	8002548 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002512:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800251e:	f7fe fb59 	bl	8000bd4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002526:	f7fe fb55 	bl	8000bd4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e2dd      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x1da>
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d074      	beq.n	800263e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x21a>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d10e      	bne.n	800257e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d10b      	bne.n	800257e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d064      	beq.n	800263c <HAL_RCC_OscConfig+0x2f0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d160      	bne.n	800263c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e2ba      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x24a>
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x298>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259e:	d115      	bne.n	80025cc <HAL_RCC_OscConfig+0x280>
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80025a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a02      	ldr	r2, [pc, #8]	@ (80025bc <HAL_RCC_OscConfig+0x270>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e014      	b.n	80025e4 <HAL_RCC_OscConfig+0x298>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004a58 	.word	0x08004a58
 80025c4:	20000004 	.word	0x20000004
 80025c8:	20000008 	.word	0x20000008
 80025cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe faf2 	bl	8000bd4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe faee 	bl	8000bd4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e276      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002606:	4b92      	ldr	r3, [pc, #584]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2a8>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fade 	bl	8000bd4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fada 	bl	8000bd4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e262      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262e:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x2d0>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d060      	beq.n	800270c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d005      	beq.n	800265c <HAL_RCC_OscConfig+0x310>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d119      	bne.n	800268a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d116      	bne.n	800268a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265c:	4b7c      	ldr	r3, [pc, #496]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x328>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e23f      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b76      	ldr	r3, [pc, #472]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4973      	ldr	r1, [pc, #460]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	e040      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d023      	beq.n	80026da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002692:	4b6f      	ldr	r3, [pc, #444]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fa99 	bl	8000bd4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fa95 	bl	8000bd4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e21d      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b8:	4b65      	ldr	r3, [pc, #404]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b62      	ldr	r3, [pc, #392]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	495f      	ldr	r1, [pc, #380]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
 80026d8:	e018      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b5d      	ldr	r3, [pc, #372]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5c      	ldr	r2, [pc, #368]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fa75 	bl	8000bd4 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe fa71 	bl	8000bd4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1f9      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002700:	4b53      	ldr	r3, [pc, #332]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d03c      	beq.n	8002792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01c      	beq.n	800275a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002720:	4b4b      	ldr	r3, [pc, #300]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002726:	4a4a      	ldr	r2, [pc, #296]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fa50 	bl	8000bd4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fa4c 	bl	8000bd4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1d4      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274a:	4b41      	ldr	r3, [pc, #260]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800274c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ef      	beq.n	8002738 <HAL_RCC_OscConfig+0x3ec>
 8002758:	e01b      	b.n	8002792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b3d      	ldr	r3, [pc, #244]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002760:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fa33 	bl	8000bd4 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002772:	f7fe fa2f 	bl	8000bd4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1b7      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002784:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ef      	bne.n	8002772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80a6 	beq.w	80028ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	4a26      	ldr	r2, [pc, #152]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80027bc:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_RCC_OscConfig+0x508>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d118      	bne.n	800280a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_RCC_OscConfig+0x508>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_RCC_OscConfig+0x508>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e4:	f7fe f9f6 	bl	8000bd4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ec:	f7fe f9f2 	bl	8000bd4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e17a      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x508>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d8>
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002822:	e029      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d115      	bne.n	8002858 <HAL_RCC_OscConfig+0x50c>
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a07      	ldr	r2, [pc, #28]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a03      	ldr	r2, [pc, #12]	@ (8002850 <HAL_RCC_OscConfig+0x504>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	4b9c      	ldr	r3, [pc, #624]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	4a9b      	ldr	r2, [pc, #620]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002868:	4b98      	ldr	r3, [pc, #608]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a97      	ldr	r2, [pc, #604]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe f9a8 	bl	8000bd4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe f9a4 	bl	8000bd4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e12a      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ed      	beq.n	8002888 <HAL_RCC_OscConfig+0x53c>
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe f991 	bl	8000bd4 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe f98d 	bl	8000bd4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e113      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ed      	bne.n	80028b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b7a      	ldr	r3, [pc, #488]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	4a79      	ldr	r2, [pc, #484]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80fe 	beq.w	8002af2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f040 80d0 	bne.w	8002aa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002900:	4b72      	ldr	r3, [pc, #456]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	429a      	cmp	r2, r3
 8002912:	d130      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	3b01      	subs	r3, #1
 8002920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d127      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002930:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11f      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002940:	2a07      	cmp	r2, #7
 8002942:	bf14      	ite	ne
 8002944:	2201      	movne	r2, #1
 8002946:	2200      	moveq	r2, #0
 8002948:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294a:	4293      	cmp	r3, r2
 800294c:	d113      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d109      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	3b01      	subs	r3, #1
 8002970:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d06e      	beq.n	8002a54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d069      	beq.n	8002a50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002988:	4b50      	ldr	r3, [pc, #320]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0ad      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002998:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a4b      	ldr	r2, [pc, #300]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 800299e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a4:	f7fe f916 	bl	8000bd4 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f912 	bl	8000bd4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e09a      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029be:	4b43      	ldr	r3, [pc, #268]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ca:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	4b40      	ldr	r3, [pc, #256]	@ (8002ad0 <HAL_RCC_OscConfig+0x784>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029da:	3a01      	subs	r2, #1
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	4311      	orrs	r1, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029e4:	0212      	lsls	r2, r2, #8
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029ec:	0852      	lsrs	r2, r2, #1
 80029ee:	3a01      	subs	r2, #1
 80029f0:	0552      	lsls	r2, r2, #21
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029f8:	0852      	lsrs	r2, r2, #1
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0652      	lsls	r2, r2, #25
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a04:	0912      	lsrs	r2, r2, #4
 8002a06:	0452      	lsls	r2, r2, #17
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	4930      	ldr	r1, [pc, #192]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a10:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a28:	f7fe f8d4 	bl	8000bd4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe f8d0 	bl	8000bd4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e058      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a42:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4e:	e050      	b.n	8002af2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04f      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a54:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d148      	bne.n	8002af2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a16      	ldr	r2, [pc, #88]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a78:	f7fe f8ac 	bl	8000bd4 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f8a8 	bl	8000bd4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e030      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a92:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x734>
 8002a9e:	e028      	b.n	8002af2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d023      	beq.n	8002aee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <HAL_RCC_OscConfig+0x780>)
 8002aac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe f88f 	bl	8000bd4 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	e00c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe f88b 	bl	8000bd4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d905      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <HAL_RCC_OscConfig+0x7b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ec      	bne.n	8002aba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_OscConfig+0x7b0>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4905      	ldr	r1, [pc, #20]	@ (8002afc <HAL_RCC_OscConfig+0x7b0>)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCC_OscConfig+0x7b4>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
 8002aec:	e001      	b.n	8002af2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	feeefffc 	.word	0xfeeefffc

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0e7      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b75      	ldr	r3, [pc, #468]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b72      	ldr	r3, [pc, #456]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	4970      	ldr	r1, [pc, #448]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b6e      	ldr	r3, [pc, #440]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0cf      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d908      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4960      	ldr	r1, [pc, #384]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04c      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d121      	bne.n	8002bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0a6      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba2:	4b54      	ldr	r3, [pc, #336]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d115      	bne.n	8002bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09a      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bba:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e08e      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bca:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e086      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4943      	ldr	r1, [pc, #268]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fd fff2 	bl	8000bd4 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fd ffee 	bl	8000bd4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e06e      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d208      	bcs.n	8002c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	492b      	ldr	r1, [pc, #172]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4a:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d210      	bcs.n	8002c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 0207 	bic.w	r2, r3, #7
 8002c60:	4923      	ldr	r1, [pc, #140]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c68:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e036      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4918      	ldr	r1, [pc, #96]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4910      	ldr	r1, [pc, #64]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb8:	f000 f824 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	490b      	ldr	r1, [pc, #44]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd4:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <HAL_RCC_ClockConfig+0x1f8>)
 8002cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x1fc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd ff29 	bl	8000b34 <HAL_InitTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08004a58 	.word	0x08004a58
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	20000008 	.word	0x20000008

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d12:	4b3e      	ldr	r3, [pc, #248]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d121      	bne.n	8002d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d11e      	bne.n	8002d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d38:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d44:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d54:	4b2d      	ldr	r3, [pc, #180]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d60:	4a2b      	ldr	r2, [pc, #172]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d102      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e004      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d88:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d134      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d92:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0xa6>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d003      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0xac>
 8002da8:	e005      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dac:	617b      	str	r3, [r7, #20]
      break;
 8002dae:	e005      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002db2:	617b      	str	r3, [r7, #20]
      break;
 8002db4:	e002      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	617b      	str	r3, [r7, #20]
      break;
 8002dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	fb03 f202 	mul.w	r2, r3, r2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	0e5b      	lsrs	r3, r3, #25
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	3301      	adds	r3, #1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	@ 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08004a70 	.word	0x08004a70
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	007a1200 	.word	0x007a1200

08002e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4904      	ldr	r1, [pc, #16]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08004a68 	.word	0x08004a68

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e64:	f7ff ffda 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0adb      	lsrs	r3, r3, #11
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4904      	ldr	r1, [pc, #16]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08004a68 	.word	0x08004a68

08002e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e98:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ea4:	f7ff f9ee 	bl	8002284 <HAL_PWREx_GetVoltageRange>
 8002ea8:	6178      	str	r0, [r7, #20]
 8002eaa:	e014      	b.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b25      	ldr	r3, [pc, #148]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb0:	4a24      	ldr	r2, [pc, #144]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb8:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ec4:	f7ff f9de 	bl	8002284 <HAL_PWREx_GetVoltageRange>
 8002ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002edc:	d10b      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b80      	cmp	r3, #128	@ 0x80
 8002ee2:	d919      	bls.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ee8:	d902      	bls.n	8002ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eea:	2302      	movs	r3, #2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e013      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e010      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b80      	cmp	r3, #128	@ 0x80
 8002efa:	d902      	bls.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002efc:	2303      	movs	r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e00a      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d102      	bne.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f08:	2302      	movs	r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e004      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b70      	cmp	r3, #112	@ 0x70
 8002f12:	d101      	bne.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f14:	2301      	movs	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 0207 	bic.w	r2, r3, #7
 8002f20:	4909      	ldr	r1, [pc, #36]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f28:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022000 	.word	0x40022000

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d041      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f70:	d02a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f76:	d824      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f7c:	d008      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f82:	d81e      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f8e:	e018      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f90:	4b86      	ldr	r3, [pc, #536]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a85      	ldr	r2, [pc, #532]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f9c:	e015      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fabb 	bl	8003520 <RCCEx_PLLSAI1_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fae:	e00c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fba6 	bl	8003708 <RCCEx_PLLSAI2_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc0:	e003      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd0:	4b76      	ldr	r3, [pc, #472]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fde:	4973      	ldr	r1, [pc, #460]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fe6:	e001      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d041      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ffc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003000:	d02a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003006:	d824      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800300e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003012:	d81e      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800301c:	d010      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800301e:	e018      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003020:	4b62      	ldr	r3, [pc, #392]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a61      	ldr	r2, [pc, #388]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800302c:	e015      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa73 	bl	8003520 <RCCEx_PLLSAI1_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800303e:	e00c      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3320      	adds	r3, #32
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fb5e 	bl	8003708 <RCCEx_PLLSAI2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003050:	e003      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	74fb      	strb	r3, [r7, #19]
      break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003060:	4b52      	ldr	r3, [pc, #328]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800306e:	494f      	ldr	r1, [pc, #316]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a0 	beq.w	80031ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800308e:	4b47      	ldr	r3, [pc, #284]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b41      	ldr	r3, [pc, #260]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	4a40      	ldr	r2, [pc, #256]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b0:	4b3e      	ldr	r3, [pc, #248]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3a      	ldr	r2, [pc, #232]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030cc:	f7fd fd82 	bl	8000bd4 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fd fd7e 	bl	8000bd4 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	74fb      	strb	r3, [r7, #19]
        break;
 80030e6:	e005      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e8:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d15c      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fa:	4b2c      	ldr	r3, [pc, #176]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003104:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01f      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d019      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003118:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a20      	ldr	r2, [pc, #128]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fd fd3d 	bl	8000bd4 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	e00b      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fd fd39 	bl	8000bd4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d902      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	74fb      	strb	r3, [r7, #19]
            break;
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003176:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ec      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319a:	4904      	ldr	r1, [pc, #16]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031a2:	e009      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	74bb      	strb	r3, [r7, #18]
 80031a8:	e006      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b8:	7c7b      	ldrb	r3, [r7, #17]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b9e      	ldr	r3, [pc, #632]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d6:	4b98      	ldr	r3, [pc, #608]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031dc:	f023 0203 	bic.w	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	4994      	ldr	r1, [pc, #592]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f023 020c 	bic.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	498c      	ldr	r1, [pc, #560]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321a:	4b87      	ldr	r3, [pc, #540]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003220:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	4983      	ldr	r1, [pc, #524]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800323c:	4b7e      	ldr	r3, [pc, #504]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324a:	497b      	ldr	r1, [pc, #492]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800325e:	4b76      	ldr	r3, [pc, #472]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	4972      	ldr	r1, [pc, #456]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003280:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	496a      	ldr	r1, [pc, #424]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a2:	4b65      	ldr	r3, [pc, #404]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	4961      	ldr	r1, [pc, #388]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	4959      	ldr	r1, [pc, #356]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e6:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f4:	4950      	ldr	r1, [pc, #320]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003308:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	4948      	ldr	r1, [pc, #288]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800332a:	4b43      	ldr	r3, [pc, #268]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	493f      	ldr	r1, [pc, #252]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d028      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334c:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335a:	4937      	ldr	r1, [pc, #220]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800336a:	d106      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e011      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003382:	d10c      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	2101      	movs	r1, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f8c8 	bl	8003520 <RCCEx_PLLSAI1_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d028      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033aa:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	491f      	ldr	r1, [pc, #124]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033d4:	60d3      	str	r3, [r2, #12]
 80033d6:	e011      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f899 	bl	8003520 <RCCEx_PLLSAI1_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003426:	d109      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003432:	60d3      	str	r3, [r2, #12]
 8003434:	e014      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f867 	bl	8003520 <RCCEx_PLLSAI1_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800346c:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003472:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800347a:	4928      	ldr	r1, [pc, #160]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800348a:	d10d      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f844 	bl	8003520 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	74bb      	strb	r3, [r7, #18]
 80034a6:	e011      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3320      	adds	r3, #32
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f925 	bl	8003708 <RCCEx_PLLSAI2_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034d8:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e6:	490d      	ldr	r1, [pc, #52]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350a:	4904      	ldr	r1, [pc, #16]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003512:	7cbb      	ldrb	r3, [r7, #18]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000

08003520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352e:	4b75      	ldr	r3, [pc, #468]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800353a:	4b72      	ldr	r3, [pc, #456]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0203 	and.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d10d      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
       ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003552:	4b6c      	ldr	r3, [pc, #432]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
       ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d047      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e044      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d018      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x86>
 8003574:	2b03      	cmp	r3, #3
 8003576:	d825      	bhi.n	80035c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003578:	2b01      	cmp	r3, #1
 800357a:	d002      	beq.n	8003582 <RCCEx_PLLSAI1_Config+0x62>
 800357c:	2b02      	cmp	r3, #2
 800357e:	d009      	beq.n	8003594 <RCCEx_PLLSAI1_Config+0x74>
 8003580:	e020      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003582:	4b60      	ldr	r3, [pc, #384]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e01a      	b.n	80035ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003594:	4b5b      	ldr	r3, [pc, #364]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e013      	b.n	80035ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a6:	4b57      	ldr	r3, [pc, #348]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b2:	4b54      	ldr	r3, [pc, #336]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c2:	e006      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e004      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035da:	4b4a      	ldr	r3, [pc, #296]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	430b      	orrs	r3, r1
 80035f0:	4944      	ldr	r1, [pc, #272]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d17d      	bne.n	80036f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035fc:	4b41      	ldr	r3, [pc, #260]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a40      	ldr	r2, [pc, #256]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fae4 	bl	8000bd4 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fd fae0 	bl	8000bd4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
        break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003624:	4b37      	ldr	r3, [pc, #220]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d160      	bne.n	80036f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d111      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363c:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0912      	lsrs	r2, r2, #4
 8003654:	0452      	lsls	r2, r2, #17
 8003656:	430a      	orrs	r2, r1
 8003658:	492a      	ldr	r1, [pc, #168]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]
 800365e:	e027      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d112      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003666:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800366e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6892      	ldr	r2, [r2, #8]
 8003676:	0211      	lsls	r1, r2, #8
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6912      	ldr	r2, [r2, #16]
 800367c:	0852      	lsrs	r2, r2, #1
 800367e:	3a01      	subs	r2, #1
 8003680:	0552      	lsls	r2, r2, #21
 8003682:	430a      	orrs	r2, r1
 8003684:	491f      	ldr	r1, [pc, #124]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	610b      	str	r3, [r1, #16]
 800368a:	e011      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368c:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003694:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	0211      	lsls	r1, r2, #8
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6952      	ldr	r2, [r2, #20]
 80036a2:	0852      	lsrs	r2, r2, #1
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0652      	lsls	r2, r2, #25
 80036a8:	430a      	orrs	r2, r1
 80036aa:	4916      	ldr	r1, [pc, #88]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036b0:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd fa8a 	bl	8000bd4 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c4:	f7fd fa86 	bl	8000bd4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
          break;
 80036d6:	e005      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ef      	beq.n	80036c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	4904      	ldr	r1, [pc, #16]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000

08003708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003716:	4b6a      	ldr	r3, [pc, #424]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003722:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d10d      	bne.n	800374e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
       ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800373a:	4b61      	ldr	r3, [pc, #388]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
       ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d047      	beq.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e044      	b.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d018      	beq.n	800378e <RCCEx_PLLSAI2_Config+0x86>
 800375c:	2b03      	cmp	r3, #3
 800375e:	d825      	bhi.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d002      	beq.n	800376a <RCCEx_PLLSAI2_Config+0x62>
 8003764:	2b02      	cmp	r3, #2
 8003766:	d009      	beq.n	800377c <RCCEx_PLLSAI2_Config+0x74>
 8003768:	e020      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376a:	4b55      	ldr	r3, [pc, #340]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11d      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e01a      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800377c:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d116      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e013      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800378e:	4b4c      	ldr	r3, [pc, #304]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800379a:	4b49      	ldr	r3, [pc, #292]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037aa:	e006      	b.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e004      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037c2:	4b3f      	ldr	r3, [pc, #252]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	430b      	orrs	r3, r1
 80037d8:	4939      	ldr	r1, [pc, #228]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d167      	bne.n	80038b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037e4:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a35      	ldr	r2, [pc, #212]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd f9f0 	bl	8000bd4 <HAL_GetTick>
 80037f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f6:	e009      	b.n	800380c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f8:	f7fd f9ec 	bl	8000bd4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d902      	bls.n	800380c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	73fb      	strb	r3, [r7, #15]
        break;
 800380a:	e005      	b.n	8003818 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ef      	bne.n	80037f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14a      	bne.n	80038b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d111      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800382c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	0211      	lsls	r1, r2, #8
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	0912      	lsrs	r2, r2, #4
 800383c:	0452      	lsls	r2, r2, #17
 800383e:	430a      	orrs	r2, r1
 8003840:	491f      	ldr	r1, [pc, #124]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	614b      	str	r3, [r1, #20]
 8003846:	e011      	b.n	800386c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003848:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6892      	ldr	r2, [r2, #8]
 8003858:	0211      	lsls	r1, r2, #8
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6912      	ldr	r2, [r2, #16]
 800385e:	0852      	lsrs	r2, r2, #1
 8003860:	3a01      	subs	r2, #1
 8003862:	0652      	lsls	r2, r2, #25
 8003864:	430a      	orrs	r2, r1
 8003866:	4916      	ldr	r1, [pc, #88]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800386c:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fd f9ac 	bl	8000bd4 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003880:	f7fd f9a8 	bl	8000bd4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
          break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4904      	ldr	r1, [pc, #16]	@ (80038c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000

080038c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e040      	b.n	8003958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd f82a 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fe06 	bl	800451c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fb4b 	bl	8003fac <UART_SetConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01b      	b.n	8003958 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800392e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800393e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fe85 	bl	8004660 <UART_CheckIdleState>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ba      	sub	sp, #232	@ 0xe8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800398a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800398e:	4013      	ands	r3, r2
 8003990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d115      	bne.n	80039c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00f      	beq.n	80039c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 82ca 	beq.w	8003f52 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
      }
      return;
 80039c6:	e2c4      	b.n	8003f52 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80039c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8117 	beq.w	8003c00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_UART_IRQHandler+0x298>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 810a 	beq.w	8003c00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d011      	beq.n	8003a1c <HAL_UART_IRQHandler+0xbc>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <HAL_UART_IRQHandler+0xec>
 8003a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <HAL_UART_IRQHandler+0x11c>
 8003a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aae:	f043 0208 	orr.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <HAL_UART_IRQHandler+0x18a>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8230 	beq.w	8003f56 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fea1 	bl	800488a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b40      	cmp	r3, #64	@ 0x40
 8003b54:	d141      	bne.n	8003bda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bae:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <HAL_UART_IRQHandler+0x29c>)
 8003bb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe f92f 	bl	8001e1a <HAL_DMA_Abort_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00f      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9d4 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e00b      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9d0 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e007      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9cc 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003bf0:	e1b1      	b.n	8003f56 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf2:	bf00      	nop
    return;
 8003bf4:	e1af      	b.n	8003f56 <HAL_UART_IRQHandler+0x5f6>
 8003bf6:	bf00      	nop
 8003bf8:	04000120 	.word	0x04000120
 8003bfc:	08004953 	.word	0x08004953

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 816a 	bne.w	8003ede <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8163 	beq.w	8003ede <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 815c 	beq.w	8003ede <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	f040 80d4 	bne.w	8003de6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80ad 	beq.w	8003dae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	f080 80a5 	bcs.w	8003dae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8086 	bne.w	8003d8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1da      	bne.n	8003c80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e1      	bne.n	8003cca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e4      	bne.n	8003d4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe f809 	bl	8001d9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8f4 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003dac:	e0d5      	b.n	8003f5a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db8:	429a      	cmp	r2, r3
 8003dba:	f040 80ce 	bne.w	8003f5a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	f040 80c5 	bne.w	8003f5a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8d8 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
      return;
 8003de4:	e0b9      	b.n	8003f5a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80ab 	beq.w	8003f5e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a6 	beq.w	8003f5e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e4      	bne.n	8003e12 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	623b      	str	r3, [r7, #32]
   return(result);
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e3      	bne.n	8003e48 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e4      	bne.n	8003e94 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f85c 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003edc:	e03f      	b.n	8003f5e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <HAL_UART_IRQHandler+0x5a8>
 8003eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fd66 	bl	80049d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f06:	e02d      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01c      	beq.n	8003f62 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
    }
    return;
 8003f30:	e017      	b.n	8003f62 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d012      	beq.n	8003f64 <HAL_UART_IRQHandler+0x604>
 8003f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fd17 	bl	800497e <UART_EndTransmit_IT>
    return;
 8003f50:	e008      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
      return;
 8003f52:	bf00      	nop
 8003f54:	e006      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
    return;
 8003f56:	bf00      	nop
 8003f58:	e004      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
      return;
 8003f5a:	bf00      	nop
 8003f5c:	e002      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
      return;
 8003f5e:	bf00      	nop
 8003f60:	e000      	b.n	8003f64 <HAL_UART_IRQHandler+0x604>
    return;
 8003f62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f64:	37e8      	adds	r7, #232	@ 0xe8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb0:	b08a      	sub	sp, #40	@ 0x28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4ba4      	ldr	r3, [pc, #656]	@ (800426c <UART_SetConfig+0x2c0>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a99      	ldr	r2, [pc, #612]	@ (8004270 <UART_SetConfig+0x2c4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	4313      	orrs	r3, r2
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	430a      	orrs	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a90      	ldr	r2, [pc, #576]	@ (8004274 <UART_SetConfig+0x2c8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d126      	bne.n	8004084 <UART_SetConfig+0xd8>
 8004036:	4b90      	ldr	r3, [pc, #576]	@ (8004278 <UART_SetConfig+0x2cc>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b03      	cmp	r3, #3
 8004042:	d81b      	bhi.n	800407c <UART_SetConfig+0xd0>
 8004044:	a201      	add	r2, pc, #4	@ (adr r2, 800404c <UART_SetConfig+0xa0>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	0800405d 	.word	0x0800405d
 8004050:	0800406d 	.word	0x0800406d
 8004054:	08004065 	.word	0x08004065
 8004058:	08004075 	.word	0x08004075
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004062:	e116      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004064:	2302      	movs	r3, #2
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406a:	e112      	b.n	8004292 <UART_SetConfig+0x2e6>
 800406c:	2304      	movs	r3, #4
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004072:	e10e      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004074:	2308      	movs	r3, #8
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407a:	e10a      	b.n	8004292 <UART_SetConfig+0x2e6>
 800407c:	2310      	movs	r3, #16
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004082:	e106      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <UART_SetConfig+0x2d0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d138      	bne.n	8004100 <UART_SetConfig+0x154>
 800408e:	4b7a      	ldr	r3, [pc, #488]	@ (8004278 <UART_SetConfig+0x2cc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d82d      	bhi.n	80040f8 <UART_SetConfig+0x14c>
 800409c:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <UART_SetConfig+0xf8>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080040f9 	.word	0x080040f9
 80040ac:	080040f9 	.word	0x080040f9
 80040b0:	080040f9 	.word	0x080040f9
 80040b4:	080040e9 	.word	0x080040e9
 80040b8:	080040f9 	.word	0x080040f9
 80040bc:	080040f9 	.word	0x080040f9
 80040c0:	080040f9 	.word	0x080040f9
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	080040f9 	.word	0x080040f9
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	080040f1 	.word	0x080040f1
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e0d8      	b.n	8004292 <UART_SetConfig+0x2e6>
 80040e0:	2302      	movs	r3, #2
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e6:	e0d4      	b.n	8004292 <UART_SetConfig+0x2e6>
 80040e8:	2304      	movs	r3, #4
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ee:	e0d0      	b.n	8004292 <UART_SetConfig+0x2e6>
 80040f0:	2308      	movs	r3, #8
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f6:	e0cc      	b.n	8004292 <UART_SetConfig+0x2e6>
 80040f8:	2310      	movs	r3, #16
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fe:	e0c8      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	@ (8004280 <UART_SetConfig+0x2d4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d125      	bne.n	8004156 <UART_SetConfig+0x1aa>
 800410a:	4b5b      	ldr	r3, [pc, #364]	@ (8004278 <UART_SetConfig+0x2cc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004110:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d016      	beq.n	8004146 <UART_SetConfig+0x19a>
 8004118:	2b30      	cmp	r3, #48	@ 0x30
 800411a:	d818      	bhi.n	800414e <UART_SetConfig+0x1a2>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d00a      	beq.n	8004136 <UART_SetConfig+0x18a>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d814      	bhi.n	800414e <UART_SetConfig+0x1a2>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <UART_SetConfig+0x182>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d008      	beq.n	800413e <UART_SetConfig+0x192>
 800412c:	e00f      	b.n	800414e <UART_SetConfig+0x1a2>
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004134:	e0ad      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004136:	2302      	movs	r3, #2
 8004138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413c:	e0a9      	b.n	8004292 <UART_SetConfig+0x2e6>
 800413e:	2304      	movs	r3, #4
 8004140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004144:	e0a5      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004146:	2308      	movs	r3, #8
 8004148:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414c:	e0a1      	b.n	8004292 <UART_SetConfig+0x2e6>
 800414e:	2310      	movs	r3, #16
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004154:	e09d      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4a      	ldr	r2, [pc, #296]	@ (8004284 <UART_SetConfig+0x2d8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d125      	bne.n	80041ac <UART_SetConfig+0x200>
 8004160:	4b45      	ldr	r3, [pc, #276]	@ (8004278 <UART_SetConfig+0x2cc>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800416a:	2bc0      	cmp	r3, #192	@ 0xc0
 800416c:	d016      	beq.n	800419c <UART_SetConfig+0x1f0>
 800416e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004170:	d818      	bhi.n	80041a4 <UART_SetConfig+0x1f8>
 8004172:	2b80      	cmp	r3, #128	@ 0x80
 8004174:	d00a      	beq.n	800418c <UART_SetConfig+0x1e0>
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d814      	bhi.n	80041a4 <UART_SetConfig+0x1f8>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <UART_SetConfig+0x1d8>
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d008      	beq.n	8004194 <UART_SetConfig+0x1e8>
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x1f8>
 8004184:	2300      	movs	r3, #0
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e082      	b.n	8004292 <UART_SetConfig+0x2e6>
 800418c:	2302      	movs	r3, #2
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e07e      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e07a      	b.n	8004292 <UART_SetConfig+0x2e6>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e076      	b.n	8004292 <UART_SetConfig+0x2e6>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e072      	b.n	8004292 <UART_SetConfig+0x2e6>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <UART_SetConfig+0x2dc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d12a      	bne.n	800420c <UART_SetConfig+0x260>
 80041b6:	4b30      	ldr	r3, [pc, #192]	@ (8004278 <UART_SetConfig+0x2cc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041c4:	d01a      	beq.n	80041fc <UART_SetConfig+0x250>
 80041c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ca:	d81b      	bhi.n	8004204 <UART_SetConfig+0x258>
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d0:	d00c      	beq.n	80041ec <UART_SetConfig+0x240>
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d6:	d815      	bhi.n	8004204 <UART_SetConfig+0x258>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <UART_SetConfig+0x238>
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e0:	d008      	beq.n	80041f4 <UART_SetConfig+0x248>
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x258>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ea:	e052      	b.n	8004292 <UART_SetConfig+0x2e6>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f2:	e04e      	b.n	8004292 <UART_SetConfig+0x2e6>
 80041f4:	2304      	movs	r3, #4
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fa:	e04a      	b.n	8004292 <UART_SetConfig+0x2e6>
 80041fc:	2308      	movs	r3, #8
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004202:	e046      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004204:	2310      	movs	r3, #16
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420a:	e042      	b.n	8004292 <UART_SetConfig+0x2e6>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <UART_SetConfig+0x2c4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d13a      	bne.n	800428c <UART_SetConfig+0x2e0>
 8004216:	4b18      	ldr	r3, [pc, #96]	@ (8004278 <UART_SetConfig+0x2cc>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004220:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004224:	d01a      	beq.n	800425c <UART_SetConfig+0x2b0>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800422a:	d81b      	bhi.n	8004264 <UART_SetConfig+0x2b8>
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004230:	d00c      	beq.n	800424c <UART_SetConfig+0x2a0>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004236:	d815      	bhi.n	8004264 <UART_SetConfig+0x2b8>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <UART_SetConfig+0x298>
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004240:	d008      	beq.n	8004254 <UART_SetConfig+0x2a8>
 8004242:	e00f      	b.n	8004264 <UART_SetConfig+0x2b8>
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424a:	e022      	b.n	8004292 <UART_SetConfig+0x2e6>
 800424c:	2302      	movs	r3, #2
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004252:	e01e      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004254:	2304      	movs	r3, #4
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425a:	e01a      	b.n	8004292 <UART_SetConfig+0x2e6>
 800425c:	2308      	movs	r3, #8
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e016      	b.n	8004292 <UART_SetConfig+0x2e6>
 8004264:	2310      	movs	r3, #16
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e012      	b.n	8004292 <UART_SetConfig+0x2e6>
 800426c:	efff69f3 	.word	0xefff69f3
 8004270:	40008000 	.word	0x40008000
 8004274:	40013800 	.word	0x40013800
 8004278:	40021000 	.word	0x40021000
 800427c:	40004400 	.word	0x40004400
 8004280:	40004800 	.word	0x40004800
 8004284:	40004c00 	.word	0x40004c00
 8004288:	40005000 	.word	0x40005000
 800428c:	2310      	movs	r3, #16
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a9f      	ldr	r2, [pc, #636]	@ (8004514 <UART_SetConfig+0x568>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d17a      	bne.n	8004392 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800429c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d824      	bhi.n	80042ee <UART_SetConfig+0x342>
 80042a4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <UART_SetConfig+0x300>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	080042df 	.word	0x080042df
 80042c0:	080042ef 	.word	0x080042ef
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ef 	.word	0x080042ef
 80042cc:	080042e7 	.word	0x080042e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fe fdb0 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e010      	b.n	80042fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004518 <UART_SetConfig+0x56c>)
 80042da:	61fb      	str	r3, [r7, #28]
        break;
 80042dc:	e00d      	b.n	80042fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042de:	f7fe fd11 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 80042e2:	61f8      	str	r0, [r7, #28]
        break;
 80042e4:	e009      	b.n	80042fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ea:	61fb      	str	r3, [r7, #28]
        break;
 80042ec:	e005      	b.n	80042fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80fb 	beq.w	80044f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	429a      	cmp	r2, r3
 8004310:	d305      	bcc.n	800431e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	429a      	cmp	r2, r3
 800431c:	d903      	bls.n	8004326 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004324:	e0e8      	b.n	80044f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2200      	movs	r2, #0
 800432a:	461c      	mov	r4, r3
 800432c:	4615      	mov	r5, r2
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	022b      	lsls	r3, r5, #8
 8004338:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800433c:	0222      	lsls	r2, r4, #8
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	6849      	ldr	r1, [r1, #4]
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	2000      	movs	r0, #0
 8004346:	4688      	mov	r8, r1
 8004348:	4681      	mov	r9, r0
 800434a:	eb12 0a08 	adds.w	sl, r2, r8
 800434e:	eb43 0b09 	adc.w	fp, r3, r9
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004360:	4650      	mov	r0, sl
 8004362:	4659      	mov	r1, fp
 8004364:	f7fb ff30 	bl	80001c8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004376:	d308      	bcc.n	800438a <UART_SetConfig+0x3de>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800437e:	d204      	bcs.n	800438a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e0b6      	b.n	80044f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004390:	e0b2      	b.n	80044f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800439a:	d15e      	bne.n	800445a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800439c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d828      	bhi.n	80043f6 <UART_SetConfig+0x44a>
 80043a4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <UART_SetConfig+0x400>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	080043f7 	.word	0x080043f7
 80043bc:	080043e7 	.word	0x080043e7
 80043c0:	080043f7 	.word	0x080043f7
 80043c4:	080043f7 	.word	0x080043f7
 80043c8:	080043f7 	.word	0x080043f7
 80043cc:	080043ef 	.word	0x080043ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fd30 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 80043d4:	61f8      	str	r0, [r7, #28]
        break;
 80043d6:	e014      	b.n	8004402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe fd42 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 80043dc:	61f8      	str	r0, [r7, #28]
        break;
 80043de:	e010      	b.n	8004402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004518 <UART_SetConfig+0x56c>)
 80043e2:	61fb      	str	r3, [r7, #28]
        break;
 80043e4:	e00d      	b.n	8004402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e6:	f7fe fc8d 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 80043ea:	61f8      	str	r0, [r7, #28]
        break;
 80043ec:	e009      	b.n	8004402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f2:	61fb      	str	r3, [r7, #28]
        break;
 80043f4:	e005      	b.n	8004402 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d077      	beq.n	80044f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005a      	lsls	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d916      	bls.n	8004452 <UART_SetConfig+0x4a6>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442a:	d212      	bcs.n	8004452 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f023 030f 	bic.w	r3, r3, #15
 8004434:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	b29a      	uxth	r2, r3
 8004442:	8afb      	ldrh	r3, [r7, #22]
 8004444:	4313      	orrs	r3, r2
 8004446:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	8afa      	ldrh	r2, [r7, #22]
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e052      	b.n	80044f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004458:	e04e      	b.n	80044f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800445a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800445e:	2b08      	cmp	r3, #8
 8004460:	d827      	bhi.n	80044b2 <UART_SetConfig+0x506>
 8004462:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <UART_SetConfig+0x4bc>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800448d 	.word	0x0800448d
 800446c:	08004495 	.word	0x08004495
 8004470:	0800449d 	.word	0x0800449d
 8004474:	080044b3 	.word	0x080044b3
 8004478:	080044a3 	.word	0x080044a3
 800447c:	080044b3 	.word	0x080044b3
 8004480:	080044b3 	.word	0x080044b3
 8004484:	080044b3 	.word	0x080044b3
 8004488:	080044ab 	.word	0x080044ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fe fcd2 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 8004490:	61f8      	str	r0, [r7, #28]
        break;
 8004492:	e014      	b.n	80044be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004494:	f7fe fce4 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8004498:	61f8      	str	r0, [r7, #28]
        break;
 800449a:	e010      	b.n	80044be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800449c:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <UART_SetConfig+0x56c>)
 800449e:	61fb      	str	r3, [r7, #28]
        break;
 80044a0:	e00d      	b.n	80044be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a2:	f7fe fc2f 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 80044a6:	61f8      	str	r0, [r7, #28]
        break;
 80044a8:	e009      	b.n	80044be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ae:	61fb      	str	r3, [r7, #28]
        break;
 80044b0:	e005      	b.n	80044be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044bc:	bf00      	nop
    }

    if (pclk != 0U)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	085a      	lsrs	r2, r3, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d909      	bls.n	80044f2 <UART_SetConfig+0x546>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e4:	d205      	bcs.n	80044f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	e002      	b.n	80044f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004504:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004508:	4618      	mov	r0, r3
 800450a:	3728      	adds	r7, #40	@ 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004512:	bf00      	nop
 8004514:	40008000 	.word	0x40008000
 8004518:	00f42400 	.word	0x00f42400

0800451c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01a      	beq.n	8004632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800461a:	d10a      	bne.n	8004632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b098      	sub	sp, #96	@ 0x60
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004670:	f7fc fab0 	bl	8000bd4 <HAL_GetTick>
 8004674:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d12e      	bne.n	80046e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004684:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	2200      	movs	r2, #0
 800468e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f88c 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d021      	beq.n	80046e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e6      	bne.n	800469e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e062      	b.n	80047a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d149      	bne.n	8004784 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f856 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03c      	beq.n	8004784 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	623b      	str	r3, [r7, #32]
   return(result);
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800471e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800472e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e6      	bne.n	800470a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	60fb      	str	r3, [r7, #12]
   return(result);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3308      	adds	r3, #8
 800475a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800475c:	61fa      	str	r2, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	617b      	str	r3, [r7, #20]
   return(result);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e011      	b.n	80047a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3758      	adds	r7, #88	@ 0x58
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e04f      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047c8:	d04b      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fc fa03 	bl	8000bd4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e04e      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d037      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b80      	cmp	r3, #128	@ 0x80
 80047f6:	d034      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d031      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d110      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f838 	bl	800488a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2208      	movs	r2, #8
 800481e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e029      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483c:	d111      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f81e 	bl	800488a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0a0      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b095      	sub	sp, #84	@ 0x54
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d118      	bne.n	8004932 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	60bb      	str	r3, [r7, #8]
   return(result);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f023 0310 	bic.w	r3, r3, #16
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6979      	ldr	r1, [r7, #20]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	613b      	str	r3, [r7, #16]
   return(result);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e6      	bne.n	8004900 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004946:	bf00      	nop
 8004948:	3754      	adds	r7, #84	@ 0x54
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fb05 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b088      	sub	sp, #32
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	60bb      	str	r3, [r7, #8]
   return(result);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	613b      	str	r3, [r7, #16]
   return(result);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e6      	bne.n	8004986 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fad1 	bl	8003f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ca:	bf00      	nop
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <memset>:
 80049e6:	4402      	add	r2, r0
 80049e8:	4603      	mov	r3, r0
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d100      	bne.n	80049f0 <memset+0xa>
 80049ee:	4770      	bx	lr
 80049f0:	f803 1b01 	strb.w	r1, [r3], #1
 80049f4:	e7f9      	b.n	80049ea <memset+0x4>
	...

080049f8 <__libc_init_array>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004a30 <__libc_init_array+0x38>)
 80049fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004a34 <__libc_init_array+0x3c>)
 80049fe:	1b64      	subs	r4, r4, r5
 8004a00:	10a4      	asrs	r4, r4, #2
 8004a02:	2600      	movs	r6, #0
 8004a04:	42a6      	cmp	r6, r4
 8004a06:	d109      	bne.n	8004a1c <__libc_init_array+0x24>
 8004a08:	4d0b      	ldr	r5, [pc, #44]	@ (8004a38 <__libc_init_array+0x40>)
 8004a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a3c <__libc_init_array+0x44>)
 8004a0c:	f000 f818 	bl	8004a40 <_init>
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	2600      	movs	r6, #0
 8004a16:	42a6      	cmp	r6, r4
 8004a18:	d105      	bne.n	8004a26 <__libc_init_array+0x2e>
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a20:	4798      	blx	r3
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7ee      	b.n	8004a04 <__libc_init_array+0xc>
 8004a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2a:	4798      	blx	r3
 8004a2c:	3601      	adds	r6, #1
 8004a2e:	e7f2      	b.n	8004a16 <__libc_init_array+0x1e>
 8004a30:	08004aa8 	.word	0x08004aa8
 8004a34:	08004aa8 	.word	0x08004aa8
 8004a38:	08004aa8 	.word	0x08004aa8
 8004a3c:	08004aac 	.word	0x08004aac

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
